
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00002c42  00002cd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c42  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080020e  0080020e  00002de4  2**0
                  ALLOC
  3 .stab         0000363c  00000000  00000000  00002de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001560  00000000  00000000  00006420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007980  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007994  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__ctors_end>
       4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_3>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_4>
      14:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_5>
      18:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_6>
      1c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_7>
      20:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_8>
      24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      28:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      2c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_12>
      34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_15>
      40:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      44:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      48:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      4c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      58:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      5c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      68:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      6c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      70:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      7c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      80:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      84:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	53 74       	andi	r21, 0x43	; 67
      8e:	61 72       	andi	r22, 0x21	; 33
      90:	74 69       	ori	r23, 0x94	; 148
      92:	6e 67       	ori	r22, 0x7E	; 126
      94:	20 72       	andi	r18, 0x20	; 32
      96:	61 64       	ori	r22, 0x41	; 65
      98:	69 6f       	ori	r22, 0xF9	; 249
	...

0000009b <string_intro_row1.2453>:
      9b:	2a 2a 2a 20 53 4d 36 56 46 5a 00                    *** SM6VFZ.

000000a6 <__c.2179>:
      a6:	6e 61 6e 00                                         nan.

000000aa <__c.2177>:
      aa:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ba:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ca:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      da:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ea:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      fa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     10a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     11a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     12a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     13a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     14a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     15a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     16a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     17a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     18a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     19a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf ef       	ldi	r28, 0xFF	; 255
     1ae:	d0 e1       	ldi	r29, 0x10	; 16
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	12 e0       	ldi	r17, 0x02	; 2
     1b6:	a0 e0       	ldi	r26, 0x00	; 0
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	e2 e4       	ldi	r30, 0x42	; 66
     1bc:	fc e2       	ldi	r31, 0x2C	; 44
     1be:	00 e0       	ldi	r16, 0x00	; 0
     1c0:	0b bf       	out	0x3b, r16	; 59
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x14>
     1c4:	07 90       	elpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	ae 30       	cpi	r26, 0x0E	; 14
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0x10>

000001ce <__do_clear_bss>:
     1ce:	22 e0       	ldi	r18, 0x02	; 2
     1d0:	ae e0       	ldi	r26, 0x0E	; 14
     1d2:	b2 e0       	ldi	r27, 0x02	; 2
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	a8 33       	cpi	r26, 0x38	; 56
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <main>
     1e2:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <_exit>

000001e6 <__bad_interrupt>:
     1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <__vector_15>:
volatile double freq;
volatile int8_t clar = 0;
volatile int freq_offset = 0; // offset in MHz for display


ISR(TIMER0_COMP_vect) {
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	2f 93       	push	r18
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
  if (step_timer < 500)
     1fa:	80 91 34 02 	lds	r24, 0x0234
     1fe:	90 91 35 02 	lds	r25, 0x0235
     202:	84 3f       	cpi	r24, 0xF4	; 244
     204:	91 40       	sbci	r25, 0x01	; 1
     206:	48 f4       	brcc	.+18     	; 0x21a <__vector_15+0x30>
    step_timer ++;
     208:	80 91 34 02 	lds	r24, 0x0234
     20c:	90 91 35 02 	lds	r25, 0x0235
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	90 93 35 02 	sts	0x0235, r25
     216:	80 93 34 02 	sts	0x0234, r24
}
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	2f 91       	pop	r18
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <__vector_12>:

ISR(TIMER1_COMPA_vect) {
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	8f 93       	push	r24
  timer_flag = 1;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	80 93 36 02 	sts	0x0236, r24
  
}
     23c:	8f 91       	pop	r24
     23e:	0f 90       	pop	r0
     240:	0f be       	out	0x3f, r0	; 63
     242:	0f 90       	pop	r0
     244:	1f 90       	pop	r1
     246:	18 95       	reti

00000248 <__vector_3>:


ISR(INT2_vect) {  // falling level on INT2
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	11 24       	eor	r1, r1
     252:	8f 93       	push	r24
  if(!(PIND & (1 << ROT2_A))) {
     254:	82 99       	sbic	0x10, 2	; 16
     256:	15 c0       	rjmp	.+42     	; 0x282 <__vector_3+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	86 e0       	ldi	r24, 0x06	; 6
     25a:	8a 95       	dec	r24
     25c:	f1 f7       	brne	.-4      	; 0x25a <__vector_3+0x12>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <__vector_3+0x18>
    _delay_us(20);
    if ((PIND & (1 << ROT2_B))) {
     260:	83 9b       	sbis	0x10, 3	; 16
     262:	0f c0       	rjmp	.+30     	; 0x282 <__vector_3+0x3a>
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	8a 95       	dec	r24
     268:	f1 f7       	brne	.-4      	; 0x266 <__vector_3+0x1e>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <__vector_3+0x24>
      _delay_us(20);
      if (!(PIND & (1 << ROT2_A)) && (PIND & (1 << ROT2_B))) {
     26c:	82 99       	sbic	0x10, 2	; 16
     26e:	09 c0       	rjmp	.+18     	; 0x282 <__vector_3+0x3a>
     270:	83 9b       	sbis	0x10, 3	; 16
     272:	07 c0       	rjmp	.+14     	; 0x282 <__vector_3+0x3a>
     274:	81 e2       	ldi	r24, 0x21	; 33
     276:	8a 95       	dec	r24
     278:	f1 f7       	brne	.-4      	; 0x276 <__vector_3+0x2e>
     27a:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x01;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	80 93 2e 02 	sts	0x022E, r24
      }
    }
  }
}
     282:	8f 91       	pop	r24
     284:	0f 90       	pop	r0
     286:	0f be       	out	0x3f, r0	; 63
     288:	0f 90       	pop	r0
     28a:	1f 90       	pop	r1
     28c:	18 95       	reti

0000028e <__vector_4>:

ISR(INT3_vect) {  // falling level on INT3
     28e:	1f 92       	push	r1
     290:	0f 92       	push	r0
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	8f 93       	push	r24
  if (!(PIND & (1 << ROT2_B))) {
     29a:	83 99       	sbic	0x10, 3	; 16
     29c:	15 c0       	rjmp	.+42     	; 0x2c8 <__vector_4+0x3a>
     29e:	86 e0       	ldi	r24, 0x06	; 6
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <__vector_4+0x12>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <__vector_4+0x18>
   _delay_us(20);
    if ((PIND & (1 << ROT2_A))) {
     2a6:	82 9b       	sbis	0x10, 2	; 16
     2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <__vector_4+0x3a>
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	8a 95       	dec	r24
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <__vector_4+0x1e>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <__vector_4+0x24>
      _delay_us(20);
      if ((PIND & (1 << ROT2_A)) && !(PIND & (1 << ROT2_B))) {
     2b2:	82 9b       	sbis	0x10, 2	; 16
     2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <__vector_4+0x3a>
     2b6:	83 99       	sbic	0x10, 3	; 16
     2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <__vector_4+0x3a>
     2ba:	81 e2       	ldi	r24, 0x21	; 33
     2bc:	8a 95       	dec	r24
     2be:	f1 f7       	brne	.-4      	; 0x2bc <__vector_4+0x2e>
     2c0:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x02;
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	80 93 2e 02 	sts	0x022E, r24
      }
    }
  }
}
     2c8:	8f 91       	pop	r24
     2ca:	0f 90       	pop	r0
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	0f 90       	pop	r0
     2d0:	1f 90       	pop	r1
     2d2:	18 95       	reti

000002d4 <__vector_5>:

ISR(INT4_vect) {  // falling level on INT4
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	8f 93       	push	r24
     2e0:	9f 93       	push	r25
  if(!(PINE & (1 << ROT1_A))) {
     2e2:	0c 99       	sbic	0x01, 4	; 1
     2e4:	19 c0       	rjmp	.+50     	; 0x318 <__vector_5+0x44>
     2e6:	83 ef       	ldi	r24, 0xF3	; 243
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <__vector_5+0x16>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <__vector_5+0x1c>
     2f0:	00 00       	nop
    _delay_us(2000);
    if ((PINE & (1 << ROT1_B))) {
     2f2:	0d 9b       	sbis	0x01, 5	; 1
     2f4:	11 c0       	rjmp	.+34     	; 0x318 <__vector_5+0x44>
     2f6:	83 ef       	ldi	r24, 0xF3	; 243
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <__vector_5+0x26>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <__vector_5+0x2c>
     300:	00 00       	nop
      _delay_us(2000);
      if (!(PINE & (1 << ROT1_A)) && (PINE & (1 << ROT1_B))) {
     302:	0c 99       	sbic	0x01, 4	; 1
     304:	09 c0       	rjmp	.+18     	; 0x318 <__vector_5+0x44>
     306:	0d 9b       	sbis	0x01, 5	; 1
     308:	07 c0       	rjmp	.+14     	; 0x318 <__vector_5+0x44>
     30a:	91 e2       	ldi	r25, 0x21	; 33
     30c:	9a 95       	dec	r25
     30e:	f1 f7       	brne	.-4      	; 0x30c <__vector_5+0x38>
     310:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x01;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 93 2e 02 	sts	0x022E, r24
      }
    }
  }
}
     318:	9f 91       	pop	r25
     31a:	8f 91       	pop	r24
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <__vector_6>:

ISR(INT5_vect) {  // falling level on INT5
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	8f 93       	push	r24
     332:	9f 93       	push	r25
  if (!(PINE & (1 << ROT1_B))) {
     334:	0d 99       	sbic	0x01, 5	; 1
     336:	19 c0       	rjmp	.+50     	; 0x36a <__vector_6+0x44>
     338:	83 ef       	ldi	r24, 0xF3	; 243
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <__vector_6+0x16>
     340:	00 c0       	rjmp	.+0      	; 0x342 <__vector_6+0x1c>
     342:	00 00       	nop
   _delay_us(2000);
    if ((PINE & (1 << ROT1_A))) {
     344:	0c 9b       	sbis	0x01, 4	; 1
     346:	11 c0       	rjmp	.+34     	; 0x36a <__vector_6+0x44>
     348:	83 ef       	ldi	r24, 0xF3	; 243
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <__vector_6+0x26>
     350:	00 c0       	rjmp	.+0      	; 0x352 <__vector_6+0x2c>
     352:	00 00       	nop
      _delay_us(2000);
      if ((PINE & (1 << ROT1_A)) && !(PINE & (1 << ROT1_B))) {
     354:	0c 9b       	sbis	0x01, 4	; 1
     356:	09 c0       	rjmp	.+18     	; 0x36a <__vector_6+0x44>
     358:	0d 99       	sbic	0x01, 5	; 1
     35a:	07 c0       	rjmp	.+14     	; 0x36a <__vector_6+0x44>
     35c:	91 e2       	ldi	r25, 0x21	; 33
     35e:	9a 95       	dec	r25
     360:	f1 f7       	brne	.-4      	; 0x35e <__vector_6+0x38>
     362:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x02;
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	80 93 2e 02 	sts	0x022E, r24
      }
    }
  }
}
     36a:	9f 91       	pop	r25
     36c:	8f 91       	pop	r24
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <__vector_7>:

ISR(INT6_vect) {  // falling level on INT6
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
  if(!(PINE & (1 << VOLROT_A))) {
     386:	0e 99       	sbic	0x01, 6	; 1
     388:	19 c0       	rjmp	.+50     	; 0x3bc <__vector_7+0x44>
     38a:	83 ef       	ldi	r24, 0xF3	; 243
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <__vector_7+0x16>
     392:	00 c0       	rjmp	.+0      	; 0x394 <__vector_7+0x1c>
     394:	00 00       	nop
    _delay_us(2000);
    if ((PINE & (1 << VOLROT_B))) {
     396:	0f 9b       	sbis	0x01, 7	; 1
     398:	11 c0       	rjmp	.+34     	; 0x3bc <__vector_7+0x44>
     39a:	83 ef       	ldi	r24, 0xF3	; 243
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <__vector_7+0x26>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <__vector_7+0x2c>
     3a4:	00 00       	nop
      _delay_us(2000);
      if (!(PINE & (1 << VOLROT_A)) && (PINE & (1 << VOLROT_B))) {
     3a6:	0e 99       	sbic	0x01, 6	; 1
     3a8:	09 c0       	rjmp	.+18     	; 0x3bc <__vector_7+0x44>
     3aa:	0f 9b       	sbis	0x01, 7	; 1
     3ac:	07 c0       	rjmp	.+14     	; 0x3bc <__vector_7+0x44>
     3ae:	91 e2       	ldi	r25, 0x21	; 33
     3b0:	9a 95       	dec	r25
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <__vector_7+0x38>
     3b4:	00 00       	nop
	_delay_us(100);
	vol_flag = 0x02;
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	80 93 2f 02 	sts	0x022F, r24
      }
    }
  }
}
     3bc:	9f 91       	pop	r25
     3be:	8f 91       	pop	r24
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <__vector_8>:

ISR(INT7_vect) {  // falling level on INT7
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	8f 93       	push	r24
     3d6:	9f 93       	push	r25
  if (!(PINE & (1 << VOLROT_B))) {
     3d8:	0f 99       	sbic	0x01, 7	; 1
     3da:	19 c0       	rjmp	.+50     	; 0x40e <__vector_8+0x44>
     3dc:	83 ef       	ldi	r24, 0xF3	; 243
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <__vector_8+0x16>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <__vector_8+0x1c>
     3e6:	00 00       	nop
    _delay_us(2000);
    if ((PINE & (1 << VOLROT_A))) {
     3e8:	0e 9b       	sbis	0x01, 6	; 1
     3ea:	11 c0       	rjmp	.+34     	; 0x40e <__vector_8+0x44>
     3ec:	83 ef       	ldi	r24, 0xF3	; 243
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <__vector_8+0x26>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <__vector_8+0x2c>
     3f6:	00 00       	nop
      _delay_us(2000);
      if ((PINE & (1 << VOLROT_A)) && !(PINE & (1 << VOLROT_B))) {
     3f8:	0e 9b       	sbis	0x01, 6	; 1
     3fa:	09 c0       	rjmp	.+18     	; 0x40e <__vector_8+0x44>
     3fc:	0f 99       	sbic	0x01, 7	; 1
     3fe:	07 c0       	rjmp	.+14     	; 0x40e <__vector_8+0x44>
     400:	91 e2       	ldi	r25, 0x21	; 33
     402:	9a 95       	dec	r25
     404:	f1 f7       	brne	.-4      	; 0x402 <__vector_8+0x38>
     406:	00 00       	nop
	_delay_us(100);
	vol_flag = 0x01;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 2f 02 	sts	0x022F, r24
      }
    }
  }
}
     40e:	9f 91       	pop	r25
     410:	8f 91       	pop	r24
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <TWIinit>:

void TWIinit(void) {
  TWBR = 0x45;
     41c:	85 e4       	ldi	r24, 0x45	; 69
     41e:	80 93 70 00 	sts	0x0070, r24
  TWCR = (1 << TWEN);
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	80 93 74 00 	sts	0x0074, r24
     428:	08 95       	ret

0000042a <TWIStart>:
}

void TWIStart(void) {
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     42a:	84 ea       	ldi	r24, 0xA4	; 164
     42c:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     430:	80 91 74 00 	lds	r24, 0x0074
     434:	87 ff       	sbrs	r24, 7
     436:	fc cf       	rjmp	.-8      	; 0x430 <TWIStart+0x6>
}
     438:	08 95       	ret

0000043a <TWIStop>:

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     43a:	84 e9       	ldi	r24, 0x94	; 148
     43c:	80 93 74 00 	sts	0x0074, r24
     440:	08 95       	ret

00000442 <TWIWrite>:
}

void TWIWrite(uint8_t u8data) {
  TWDR = u8data;
     442:	80 93 73 00 	sts	0x0073, r24
  TWCR = (1<<TWINT)|(1<<TWEN);
     446:	84 e8       	ldi	r24, 0x84	; 132
     448:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     44c:	80 91 74 00 	lds	r24, 0x0074
     450:	87 ff       	sbrs	r24, 7
     452:	fc cf       	rjmp	.-8      	; 0x44c <TWIWrite+0xa>
}
     454:	08 95       	ret

00000456 <TWIReadACK>:

uint8_t TWIReadACK(void) {
  TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     456:	84 ec       	ldi	r24, 0xC4	; 196
     458:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     45c:	80 91 74 00 	lds	r24, 0x0074
     460:	87 ff       	sbrs	r24, 7
     462:	fc cf       	rjmp	.-8      	; 0x45c <TWIReadACK+0x6>
  return TWDR;
     464:	80 91 73 00 	lds	r24, 0x0073
}
     468:	08 95       	ret

0000046a <TWIReadNACK>:

//read byte with NACK
uint8_t TWIReadNACK(void) {
  TWCR = (1<<TWINT)|(1<<TWEN);
     46a:	84 e8       	ldi	r24, 0x84	; 132
     46c:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     470:	80 91 74 00 	lds	r24, 0x0074
     474:	87 ff       	sbrs	r24, 7
     476:	fc cf       	rjmp	.-8      	; 0x470 <TWIReadNACK+0x6>
  return TWDR;
     478:	80 91 73 00 	lds	r24, 0x0073
}
     47c:	08 95       	ret

0000047e <TWIGetStatus>:

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     47e:	80 91 71 00 	lds	r24, 0x0071
  return status;
}
     482:	88 7f       	andi	r24, 0xF8	; 248
     484:	08 95       	ret

00000486 <TWI_write_byte>:

uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	1f 92       	push	r1
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	16 2f       	mov	r17, r22

  TWIStart();
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     49a:	90 91 71 00 	lds	r25, 0x0071
     49e:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	98 30       	cpi	r25, 0x08	; 8
     4a4:	29 f0       	breq	.+10     	; 0x4b0 <TWI_write_byte+0x2a>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4a6:	84 e9       	ldi	r24, 0x94	; 148
     4a8:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	1e c0       	rjmp	.+60     	; 0x4ec <TWI_write_byte+0x66>
  }
  TWIWrite(addr << 1);
     4b0:	88 0f       	add	r24, r24
     4b2:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     4b6:	90 91 71 00 	lds	r25, 0x0071
     4ba:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     4bc:	98 31       	cpi	r25, 0x18	; 24
     4be:	29 f0       	breq	.+10     	; 0x4ca <TWI_write_byte+0x44>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4c0:	84 e9       	ldi	r24, 0x94	; 148
     4c2:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	11 c0       	rjmp	.+34     	; 0x4ec <TWI_write_byte+0x66>
  }  
  TWIWrite(data);
     4ca:	81 2f       	mov	r24, r17
     4cc:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     4d0:	80 91 71 00 	lds	r24, 0x0071
     4d4:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;
  }  
  TWIWrite(data);
  if (TWIGetStatus() != 0x28) {
     4d6:	88 32       	cpi	r24, 0x28	; 40
     4d8:	29 f0       	breq	.+10     	; 0x4e4 <TWI_write_byte+0x5e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4da:	84 e9       	ldi	r24, 0x94	; 148
     4dc:	80 93 74 00 	sts	0x0074, r24
    return 0x02;
  }  
  TWIWrite(data);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	04 c0       	rjmp	.+8      	; 0x4ec <TWI_write_byte+0x66>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4e4:	84 e9       	ldi	r24, 0x94	; 148
     4e6:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIStop();
  return 0x00;
     4ea:	80 e0       	ldi	r24, 0x00	; 0
}
     4ec:	0f 90       	pop	r0
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	08 95       	ret

000004f6 <TWI_read_byte>:

uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	8b 01       	movw	r16, r22

  TWIStart();
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     50c:	90 91 71 00 	lds	r25, 0x0071
     510:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	98 30       	cpi	r25, 0x08	; 8
     516:	29 f0       	breq	.+10     	; 0x522 <TWI_read_byte+0x2c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     518:	84 e9       	ldi	r24, 0x94	; 148
     51a:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	16 c0       	rjmp	.+44     	; 0x54e <TWI_read_byte+0x58>
  }
  TWIWrite((addr << 1) | 0x01);
     522:	88 0f       	add	r24, r24
     524:	81 60       	ori	r24, 0x01	; 1
     526:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     52a:	80 91 71 00 	lds	r24, 0x0071
     52e:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite((addr << 1) | 0x01);
  if (TWIGetStatus() != 0x40) {
     530:	80 34       	cpi	r24, 0x40	; 64
     532:	29 f0       	breq	.+10     	; 0x53e <TWI_read_byte+0x48>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     534:	84 e9       	ldi	r24, 0x94	; 148
     536:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite((addr << 1) | 0x01);
  if (TWIGetStatus() != 0x40) {
    TWIStop();
    return 0x02;
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	08 c0       	rjmp	.+16     	; 0x54e <TWI_read_byte+0x58>
  }
  *data = TWIReadNACK();
     53e:	0e 94 35 02 	call	0x46a	; 0x46a <TWIReadNACK>
     542:	f8 01       	movw	r30, r16
     544:	80 83       	st	Z, r24
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     546:	84 e9       	ldi	r24, 0x94	; 148
     548:	80 93 74 00 	sts	0x0074, r24
     54c:	80 e0       	ldi	r24, 0x00	; 0
    return 0x02;
  }
  *data = TWIReadNACK();
  TWIStop();
  return 0x00;
}
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	08 95       	ret

0000055a <TWI_write_word>:

uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	1f 92       	push	r1
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	16 2f       	mov	r17, r22
     56a:	07 2f       	mov	r16, r23

  TWIStart();
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     572:	90 91 71 00 	lds	r25, 0x0071
     576:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	98 30       	cpi	r25, 0x08	; 8
     57c:	29 f0       	breq	.+10     	; 0x588 <TWI_write_word+0x2e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     57e:	84 e9       	ldi	r24, 0x94	; 148
     580:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	2b c0       	rjmp	.+86     	; 0x5de <TWI_write_word+0x84>
  }
  TWIWrite(addr << 1);
     588:	88 0f       	add	r24, r24
     58a:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     58e:	90 91 71 00 	lds	r25, 0x0071
     592:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     594:	98 31       	cpi	r25, 0x18	; 24
     596:	29 f0       	breq	.+10     	; 0x5a2 <TWI_write_word+0x48>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     598:	84 e9       	ldi	r24, 0x94	; 148
     59a:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	1e c0       	rjmp	.+60     	; 0x5de <TWI_write_word+0x84>
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
     5a2:	80 2f       	mov	r24, r16
     5a4:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     5a8:	90 91 71 00 	lds	r25, 0x0071
     5ac:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
  if (TWIGetStatus() != 0x28) {
     5ae:	98 32       	cpi	r25, 0x28	; 40
     5b0:	29 f0       	breq	.+10     	; 0x5bc <TWI_write_word+0x62>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5b2:	84 e9       	ldi	r24, 0x94	; 148
     5b4:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	11 c0       	rjmp	.+34     	; 0x5de <TWI_write_word+0x84>
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     5c2:	80 91 71 00 	lds	r24, 0x0071
     5c6:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
  if (TWIGetStatus() != 0x28) {
     5c8:	88 32       	cpi	r24, 0x28	; 40
     5ca:	29 f0       	breq	.+10     	; 0x5d6 <TWI_write_word+0x7c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5cc:	84 e9       	ldi	r24, 0x94	; 148
     5ce:	80 93 74 00 	sts	0x0074, r24
    return 0x03;
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     5d2:	84 e0       	ldi	r24, 0x04	; 4
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <TWI_write_word+0x84>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5d6:	84 e9       	ldi	r24, 0x94	; 148
     5d8:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
}
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	08 95       	ret

000005ea <TWI_write_3bytes>:

uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	1f 92       	push	r1
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	16 2f       	mov	r17, r22
     5fc:	04 2f       	mov	r16, r20
     5fe:	f2 2e       	mov	r15, r18

  TWIStart();
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     606:	90 91 71 00 	lds	r25, 0x0071
     60a:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	98 30       	cpi	r25, 0x08	; 8
     610:	29 f0       	breq	.+10     	; 0x61c <TWI_write_3bytes+0x32>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     612:	84 e9       	ldi	r24, 0x94	; 148
     614:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	33 c0       	rjmp	.+102    	; 0x682 <TWI_write_3bytes+0x98>
  }
  TWIWrite(addr << 1);
     61c:	88 0f       	add	r24, r24
     61e:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     622:	90 91 71 00 	lds	r25, 0x0071
     626:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     628:	98 31       	cpi	r25, 0x18	; 24
     62a:	29 f0       	breq	.+10     	; 0x636 <TWI_write_3bytes+0x4c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     62c:	84 e9       	ldi	r24, 0x94	; 148
     62e:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	26 c0       	rjmp	.+76     	; 0x682 <TWI_write_3bytes+0x98>
  }
  TWIWrite(byte1);
     636:	81 2f       	mov	r24, r17
     638:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     63c:	90 91 71 00 	lds	r25, 0x0071
     640:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     642:	98 32       	cpi	r25, 0x28	; 40
     644:	29 f0       	breq	.+10     	; 0x650 <TWI_write_3bytes+0x66>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     646:	84 e9       	ldi	r24, 0x94	; 148
     648:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	19 c0       	rjmp	.+50     	; 0x682 <TWI_write_3bytes+0x98>
  }
  TWIWrite(byte2);
     650:	80 2f       	mov	r24, r16
     652:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     656:	90 91 71 00 	lds	r25, 0x0071
     65a:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     65c:	98 32       	cpi	r25, 0x28	; 40
     65e:	41 f4       	brne	.+16     	; 0x670 <TWI_write_3bytes+0x86>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     660:	8f 2d       	mov	r24, r15
     662:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     666:	80 91 71 00 	lds	r24, 0x0071
     66a:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     66c:	88 32       	cpi	r24, 0x28	; 40
     66e:	29 f0       	breq	.+10     	; 0x67a <TWI_write_3bytes+0x90>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     670:	84 e9       	ldi	r24, 0x94	; 148
     672:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	04 c0       	rjmp	.+8      	; 0x682 <TWI_write_3bytes+0x98>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     67a:	84 e9       	ldi	r24, 0x94	; 148
     67c:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     680:	80 e0       	ldi	r24, 0x00	; 0
}
     682:	0f 90       	pop	r0
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	08 95       	ret

00000690 <TWI_write_4bytes>:

uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	1f 92       	push	r1
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	16 2f       	mov	r17, r22
     6a4:	f4 2e       	mov	r15, r20
     6a6:	e2 2e       	mov	r14, r18

  TWIStart();
     6a8:	89 83       	std	Y+1, r24	; 0x01
     6aa:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6ae:	90 91 71 00 	lds	r25, 0x0071
     6b2:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	98 30       	cpi	r25, 0x08	; 8
     6b8:	29 f0       	breq	.+10     	; 0x6c4 <TWI_write_4bytes+0x34>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6ba:	84 e9       	ldi	r24, 0x94	; 148
     6bc:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	3b c0       	rjmp	.+118    	; 0x73a <TWI_write_4bytes+0xaa>
  }
  TWIWrite(addr << 1);
     6c4:	88 0f       	add	r24, r24
     6c6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6ca:	90 91 71 00 	lds	r25, 0x0071
     6ce:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     6d0:	98 31       	cpi	r25, 0x18	; 24
     6d2:	29 f0       	breq	.+10     	; 0x6de <TWI_write_4bytes+0x4e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6d4:	84 e9       	ldi	r24, 0x94	; 148
     6d6:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	2e c0       	rjmp	.+92     	; 0x73a <TWI_write_4bytes+0xaa>
  }
  TWIWrite(byte1);
     6de:	81 2f       	mov	r24, r17
     6e0:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6e4:	90 91 71 00 	lds	r25, 0x0071
     6e8:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     6ea:	98 32       	cpi	r25, 0x28	; 40
     6ec:	29 f0       	breq	.+10     	; 0x6f8 <TWI_write_4bytes+0x68>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6ee:	84 e9       	ldi	r24, 0x94	; 148
     6f0:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	21 c0       	rjmp	.+66     	; 0x73a <TWI_write_4bytes+0xaa>
  }
  TWIWrite(byte2);
     6f8:	8f 2d       	mov	r24, r15
     6fa:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6fe:	90 91 71 00 	lds	r25, 0x0071
     702:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     704:	98 32       	cpi	r25, 0x28	; 40
     706:	81 f4       	brne	.+32     	; 0x728 <TWI_write_4bytes+0x98>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     708:	8e 2d       	mov	r24, r14
     70a:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     70e:	90 91 71 00 	lds	r25, 0x0071
     712:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     714:	98 32       	cpi	r25, 0x28	; 40
     716:	41 f4       	brne	.+16     	; 0x728 <TWI_write_4bytes+0x98>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
     718:	80 2f       	mov	r24, r16
     71a:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     71e:	80 91 71 00 	lds	r24, 0x0071
     722:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
     724:	88 32       	cpi	r24, 0x28	; 40
     726:	29 f0       	breq	.+10     	; 0x732 <TWI_write_4bytes+0xa2>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     728:	84 e9       	ldi	r24, 0x94	; 148
     72a:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	04 c0       	rjmp	.+8      	; 0x73a <TWI_write_4bytes+0xaa>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     732:	84 e9       	ldi	r24, 0x94	; 148
     734:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     738:	80 e0       	ldi	r24, 0x00	; 0
}
     73a:	0f 90       	pop	r0
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	08 95       	ret

0000074a <TWI_write_5bytes>:

uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	16 2f       	mov	r17, r22
     760:	f4 2e       	mov	r15, r20
     762:	d2 2e       	mov	r13, r18

  TWIStart();
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     76a:	90 91 71 00 	lds	r25, 0x0071
     76e:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	98 30       	cpi	r25, 0x08	; 8
     774:	29 f0       	breq	.+10     	; 0x780 <TWI_write_5bytes+0x36>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     776:	84 e9       	ldi	r24, 0x94	; 148
     778:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	43 c0       	rjmp	.+134    	; 0x806 <TWI_write_5bytes+0xbc>
  }
  TWIWrite(addr << 1);
     780:	88 0f       	add	r24, r24
     782:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     786:	90 91 71 00 	lds	r25, 0x0071
     78a:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     78c:	98 31       	cpi	r25, 0x18	; 24
     78e:	29 f0       	breq	.+10     	; 0x79a <TWI_write_5bytes+0x50>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     790:	84 e9       	ldi	r24, 0x94	; 148
     792:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	36 c0       	rjmp	.+108    	; 0x806 <TWI_write_5bytes+0xbc>
  }
  TWIWrite(byte1);
     79a:	81 2f       	mov	r24, r17
     79c:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7a0:	90 91 71 00 	lds	r25, 0x0071
     7a4:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     7a6:	98 32       	cpi	r25, 0x28	; 40
     7a8:	29 f0       	breq	.+10     	; 0x7b4 <TWI_write_5bytes+0x6a>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     7aa:	84 e9       	ldi	r24, 0x94	; 148
     7ac:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	29 c0       	rjmp	.+82     	; 0x806 <TWI_write_5bytes+0xbc>
  }
  TWIWrite(byte2);
     7b4:	8f 2d       	mov	r24, r15
     7b6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7ba:	90 91 71 00 	lds	r25, 0x0071
     7be:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     7c0:	98 32       	cpi	r25, 0x28	; 40
     7c2:	c1 f4       	brne	.+48     	; 0x7f4 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     7c4:	8d 2d       	mov	r24, r13
     7c6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7ca:	90 91 71 00 	lds	r25, 0x0071
     7ce:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     7d0:	98 32       	cpi	r25, 0x28	; 40
     7d2:	81 f4       	brne	.+32     	; 0x7f4 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
     7d4:	80 2f       	mov	r24, r16
     7d6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7da:	90 91 71 00 	lds	r25, 0x0071
     7de:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
     7e0:	98 32       	cpi	r25, 0x28	; 40
     7e2:	41 f4       	brne	.+16     	; 0x7f4 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte5);
     7e4:	8e 2d       	mov	r24, r14
     7e6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7ea:	80 91 71 00 	lds	r24, 0x0071
     7ee:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte5);
  if (TWIGetStatus() != 0x28) {
     7f0:	88 32       	cpi	r24, 0x28	; 40
     7f2:	29 f0       	breq	.+10     	; 0x7fe <TWI_write_5bytes+0xb4>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     7f4:	84 e9       	ldi	r24, 0x94	; 148
     7f6:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte5);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     7fa:	84 e0       	ldi	r24, 0x04	; 4
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <TWI_write_5bytes+0xbc>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     7fe:	84 e9       	ldi	r24, 0x94	; 148
     800:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     804:	80 e0       	ldi	r24, 0x00	; 0
}
     806:	0f 90       	pop	r0
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	08 95       	ret

00000818 <lcd_freq>:

void lcd_freq() {
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	ec 97       	sbiw	r28, 0x3c	; 60
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
  char buffer[60];

  if (mode == AM || mode == AMN || mode == FM) {
     840:	80 91 30 02 	lds	r24, 0x0230
     844:	88 30       	cpi	r24, 0x08	; 8
     846:	41 f0       	breq	.+16     	; 0x858 <lcd_freq+0x40>
     848:	80 91 30 02 	lds	r24, 0x0230
     84c:	89 30       	cpi	r24, 0x09	; 9
     84e:	21 f0       	breq	.+8      	; 0x858 <lcd_freq+0x40>
     850:	80 91 30 02 	lds	r24, 0x0230
     854:	8a 30       	cpi	r24, 0x0A	; 10
     856:	91 f4       	brne	.+36     	; 0x87c <lcd_freq+0x64>
    freq = round(freq);
     858:	60 91 2a 02 	lds	r22, 0x022A
     85c:	70 91 2b 02 	lds	r23, 0x022B
     860:	80 91 2c 02 	lds	r24, 0x022C
     864:	90 91 2d 02 	lds	r25, 0x022D
     868:	0e 94 39 14 	call	0x2872	; 0x2872 <round>
     86c:	60 93 2a 02 	sts	0x022A, r22
     870:	70 93 2b 02 	sts	0x022B, r23
     874:	80 93 2c 02 	sts	0x022C, r24
     878:	90 93 2d 02 	sts	0x022D, r25
  }
  lcd_goto(0x04);
     87c:	84 e0       	ldi	r24, 0x04	; 4
     87e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
  sprintf(buffer,"%d,%06.2f     ",(int)floor(freq/1000+freq_offset),fmod(freq,1000));
     882:	60 91 2a 02 	lds	r22, 0x022A
     886:	70 91 2b 02 	lds	r23, 0x022B
     88a:	80 91 2c 02 	lds	r24, 0x022C
     88e:	90 91 2d 02 	lds	r25, 0x022D
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	4a e7       	ldi	r20, 0x7A	; 122
     898:	54 e4       	ldi	r21, 0x44	; 68
     89a:	0e 94 cd 12 	call	0x259a	; 0x259a <fmod>
     89e:	f6 2e       	mov	r15, r22
     8a0:	e7 2e       	mov	r14, r23
     8a2:	d8 2e       	mov	r13, r24
     8a4:	c9 2e       	mov	r12, r25
     8a6:	60 91 2a 02 	lds	r22, 0x022A
     8aa:	70 91 2b 02 	lds	r23, 0x022B
     8ae:	80 91 2c 02 	lds	r24, 0x022C
     8b2:	90 91 2d 02 	lds	r25, 0x022D
     8b6:	00 91 0e 02 	lds	r16, 0x020E
     8ba:	10 91 0f 02 	lds	r17, 0x020F
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	4a e7       	ldi	r20, 0x7A	; 122
     8c4:	54 e4       	ldi	r21, 0x44	; 68
     8c6:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
     8ca:	4b 01       	movw	r8, r22
     8cc:	5c 01       	movw	r10, r24
     8ce:	b8 01       	movw	r22, r16
     8d0:	11 0f       	add	r17, r17
     8d2:	88 0b       	sbc	r24, r24
     8d4:	99 0b       	sbc	r25, r25
     8d6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
     8da:	9b 01       	movw	r18, r22
     8dc:	ac 01       	movw	r20, r24
     8de:	c5 01       	movw	r24, r10
     8e0:	b4 01       	movw	r22, r8
     8e2:	0e 94 55 11 	call	0x22aa	; 0x22aa <__addsf3>
     8e6:	0e 94 ab 12 	call	0x2556	; 0x2556 <floor>
     8ea:	cf 92       	push	r12
     8ec:	df 92       	push	r13
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0e 94 38 12 	call	0x2470	; 0x2470 <__fixsfsi>
     8f6:	7f 93       	push	r23
     8f8:	6f 93       	push	r22
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	9f 93       	push	r25
     900:	8f 93       	push	r24
     902:	8e 01       	movw	r16, r28
     904:	0f 5f       	subi	r16, 0xFF	; 255
     906:	1f 4f       	sbci	r17, 0xFF	; 255
     908:	1f 93       	push	r17
     90a:	0f 93       	push	r16
     90c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <sprintf>
  lcd_puts(buffer);
     910:	c8 01       	movw	r24, r16
     912:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
  lcd_goto(0x0f);
     916:	8f e0       	ldi	r24, 0x0F	; 15
     918:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
  if (clar > 10)
     91c:	80 91 10 02 	lds	r24, 0x0210
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
     92a:	8b 30       	cpi	r24, 0x0B	; 11
     92c:	1c f0       	brlt	.+6      	; 0x934 <lcd_freq+0x11c>
    sprintf(buffer,"+");
     92e:	61 e1       	ldi	r22, 0x11	; 17
     930:	71 e0       	ldi	r23, 0x01	; 1
     932:	09 c0       	rjmp	.+18     	; 0x946 <lcd_freq+0x12e>
  else if (clar < -10)
     934:	80 91 10 02 	lds	r24, 0x0210
     938:	86 3f       	cpi	r24, 0xF6	; 246
     93a:	1c f4       	brge	.+6      	; 0x942 <lcd_freq+0x12a>
    sprintf(buffer,"-");
     93c:	63 e1       	ldi	r22, 0x13	; 19
     93e:	71 e0       	ldi	r23, 0x01	; 1
     940:	02 c0       	rjmp	.+4      	; 0x946 <lcd_freq+0x12e>
  else
    sprintf(buffer," ");
     942:	6c e3       	ldi	r22, 0x3C	; 60
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	c8 01       	movw	r24, r16
     948:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <strcpy>
  lcd_puts(buffer);
     94c:	c8 01       	movw	r24, r16
     94e:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
}
     952:	ec 96       	adiw	r28, 0x3c	; 60
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	9f 90       	pop	r9
     974:	8f 90       	pop	r8
     976:	08 95       	ret

00000978 <updateVolumeSquelch>:

uint8_t updateVolumeSquelch(uint8_t vol, uint8_t sq) {
     978:	ef 92       	push	r14
     97a:	0f 93       	push	r16
  
  uint8_t addr, err;

  addr = 0x80; // Address for audio conf

  err = TWI_write_5bytes(fpga_addr, addr, 0x00, 0x00, sq, vol);
     97c:	e8 2e       	mov	r14, r24
     97e:	06 2f       	mov	r16, r22
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	60 e8       	ldi	r22, 0x80	; 128
     986:	83 e2       	ldi	r24, 0x23	; 35
     988:	0e 94 a5 03 	call	0x74a	; 0x74a <TWI_write_5bytes>
  if(err)
    return err;
  return 0x00;
}
     98c:	0f 91       	pop	r16
     98e:	ef 90       	pop	r14
     990:	08 95       	ret

00000992 <readClar>:

uint16_t readClar(void) {
  return (ADC);
     992:	84 b1       	in	r24, 0x04	; 4
     994:	95 b1       	in	r25, 0x05	; 5
}
     996:	08 95       	ret

00000998 <updateRFFE>:

uint8_t updateRFFE(void) {
  uint8_t err;
  uint16_t rxatt;

  if (rx_att)
     998:	40 91 28 02 	lds	r20, 0x0228
    rxatt = 0x0001;
  else
    rxatt = 0x0000;

  err = TWI_write_word(pll_addr,(pll_n & 0x0fff) | (tx << 15) | (bandf << 14) | (rxatt << 13));
     99c:	80 91 11 02 	lds	r24, 0x0211
     9a0:	90 91 12 02 	lds	r25, 0x0212
     9a4:	60 91 31 02 	lds	r22, 0x0231
     9a8:	70 91 32 02 	lds	r23, 0x0232
     9ac:	20 91 25 02 	lds	r18, 0x0225
     9b0:	30 91 26 02 	lds	r19, 0x0226
     9b4:	77 27       	eor	r23, r23
     9b6:	66 95       	lsr	r22
     9b8:	77 95       	ror	r23
     9ba:	66 27       	eor	r22, r22
     9bc:	9f 70       	andi	r25, 0x0F	; 15
     9be:	68 2b       	or	r22, r24
     9c0:	79 2b       	or	r23, r25
     9c2:	30 e4       	ldi	r19, 0x40	; 64
     9c4:	23 9f       	mul	r18, r19
     9c6:	30 2d       	mov	r19, r0
     9c8:	22 27       	eor	r18, r18
     9ca:	11 24       	eor	r1, r1
     9cc:	62 2b       	or	r22, r18
     9ce:	73 2b       	or	r23, r19

uint8_t updateRFFE(void) {
  uint8_t err;
  uint16_t rxatt;

  if (rx_att)
     9d0:	21 e0       	ldi	r18, 0x01	; 1
     9d2:	41 11       	cpse	r20, r1
     9d4:	01 c0       	rjmp	.+2      	; 0x9d8 <updateRFFE+0x40>
     9d6:	20 e0       	ldi	r18, 0x00	; 0
    rxatt = 0x0001;
  else
    rxatt = 0x0000;

  err = TWI_write_word(pll_addr,(pll_n & 0x0fff) | (tx << 15) | (bandf << 14) | (rxatt << 13));
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	92 2f       	mov	r25, r18
     9de:	92 95       	swap	r25
     9e0:	99 0f       	add	r25, r25
     9e2:	90 7e       	andi	r25, 0xE0	; 224
     9e4:	68 2b       	or	r22, r24
     9e6:	79 2b       	or	r23, r25
     9e8:	82 e2       	ldi	r24, 0x22	; 34
     9ea:	0e 94 ad 02 	call	0x55a	; 0x55a <TWI_write_word>
  if (err)
     9ee:	88 23       	and	r24, r24
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <updateRFFE+0x5e>
    return err+5;
     9f2:	8b 5f       	subi	r24, 0xFB	; 251
     9f4:	08 95       	ret
  return 0x00;
     9f6:	80 e0       	ldi	r24, 0x00	; 0
} 
     9f8:	08 95       	ret

000009fa <updateFreq>:
  
uint8_t updateFreq(uint8_t all_update) {
     9fa:	8f 92       	push	r8
     9fc:	9f 92       	push	r9
     9fe:	af 92       	push	r10
     a00:	bf 92       	push	r11
     a02:	cf 92       	push	r12
     a04:	df 92       	push	r13
     a06:	ef 92       	push	r14
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	1f 92       	push	r1
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
  //   char buffer[60];
  uint8_t byte1, byte2, byte3, byte4, byte5, err;
  uint16_t pll_n_ = pll_n;
     a18:	20 91 11 02 	lds	r18, 0x0211
     a1c:	30 91 12 02 	lds	r19, 0x0212
    else
      freq_lo = (double)((freq_MHz - 1152)*1000 + 21400 + freq_kHz);
    bandf = 1;
    }*/

  if (all_update) {
     a20:	88 23       	and	r24, r24
     a22:	09 f4       	brne	.+2      	; 0xa26 <updateFreq+0x2c>
     a24:	98 c0       	rjmp	.+304    	; 0xb56 <updateFreq+0x15c>
#endif
#ifdef LO_IF_PLUS_FREQ
    freq_lo = if_freq + freq;
#endif
#ifdef LO_IF_MINUS_FREQ
    freq_lo = if_freq - freq;
     a26:	20 91 2a 02 	lds	r18, 0x022A
     a2a:	30 91 2b 02 	lds	r19, 0x022B
     a2e:	40 91 2c 02 	lds	r20, 0x022C
     a32:	50 91 2d 02 	lds	r21, 0x022D
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	78 ec       	ldi	r23, 0xC8	; 200
     a3a:	8f e2       	ldi	r24, 0x2F	; 47
     a3c:	97 e4       	ldi	r25, 0x47	; 71
     a3e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__subsf3>
#endif

    bandf = 1;
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	30 93 26 02 	sts	0x0226, r19
     a4a:	20 93 25 02 	sts	0x0225, r18

    if (mode == USB) {
     a4e:	20 91 30 02 	lds	r18, 0x0230
     a52:	23 30       	cpi	r18, 0x03	; 3
     a54:	39 f4       	brne	.+14     	; 0xa64 <updateFreq+0x6a>
      freq_lo -= (double)1.8;
     a56:	26 e6       	ldi	r18, 0x66	; 102
     a58:	36 e6       	ldi	r19, 0x66	; 102
     a5a:	46 ee       	ldi	r20, 0xE6	; 230
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__subsf3>
     a62:	17 c0       	rjmp	.+46     	; 0xa92 <updateFreq+0x98>
    }
    else if (mode == CW) {
     a64:	20 91 30 02 	lds	r18, 0x0230
     a68:	25 30       	cpi	r18, 0x05	; 5
     a6a:	29 f4       	brne	.+10     	; 0xa76 <updateFreq+0x7c>
#if defined(LO_FREQ_PLUS_IF)||defined(LO_IF_PLUS_FREQ)
      freq_lo -= (double)0.9;  // CW = USB
#else
      freq_lo += (double)0.9;  // CW = LSB
     a6c:	26 e6       	ldi	r18, 0x66	; 102
     a6e:	36 e6       	ldi	r19, 0x66	; 102
     a70:	46 e6       	ldi	r20, 0x66	; 102
     a72:	5f e3       	ldi	r21, 0x3F	; 63
     a74:	0c c0       	rjmp	.+24     	; 0xa8e <updateFreq+0x94>
#endif

    }
    else if (mode == CWN) {
     a76:	20 91 30 02 	lds	r18, 0x0230
     a7a:	26 30       	cpi	r18, 0x06	; 6
     a7c:	51 f0       	breq	.+20     	; 0xa92 <updateFreq+0x98>
      //freq_lo += (double)0.9;
    }
    else if (mode == LSB ) {
     a7e:	20 91 30 02 	lds	r18, 0x0230
     a82:	21 30       	cpi	r18, 0x01	; 1
     a84:	31 f4       	brne	.+12     	; 0xa92 <updateFreq+0x98>
      freq_lo += (double)1.8;
     a86:	26 e6       	ldi	r18, 0x66	; 102
     a88:	36 e6       	ldi	r19, 0x66	; 102
     a8a:	46 ee       	ldi	r20, 0xE6	; 230
     a8c:	5f e3       	ldi	r21, 0x3F	; 63
     a8e:	0e 94 55 11 	call	0x22aa	; 0x22aa <__addsf3>
    ftw_topbot = floor((ftw-ftw_toptop*(double)16777216)/(double)65536);
    ftw_bottop = floor((ftw-ftw_toptop*(double)16777216-ftw_topbot*(double)65536)/(double)256);
    ftw_botbot = fmod(ftw,256);
#endif
#ifdef DIRECT_FREQ
    ftw = freq_lo*(double)279.62026666667; // 20MHz,25bit: 279.620266667 19.2MHz,22bit: 36.4088889
     a92:	25 e6       	ldi	r18, 0x65	; 101
     a94:	3f ec       	ldi	r19, 0xCF	; 207
     a96:	4b e8       	ldi	r20, 0x8B	; 139
     a98:	53 e4       	ldi	r21, 0x43	; 67
     a9a:	0e 94 cc 13 	call	0x2798	; 0x2798 <__mulsf3>
     a9e:	6b 01       	movw	r12, r22
     aa0:	7c 01       	movw	r14, r24
    ftw_toptop = floor(ftw/(double)16777216);
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	53 e3       	ldi	r21, 0x33	; 51
     aaa:	0e 94 cc 13 	call	0x2798	; 0x2798 <__mulsf3>
     aae:	0e 94 ab 12 	call	0x2556	; 0x2556 <floor>
     ab2:	60 93 1f 02 	sts	0x021F, r22
     ab6:	70 93 20 02 	sts	0x0220, r23
     aba:	80 93 21 02 	sts	0x0221, r24
     abe:	90 93 22 02 	sts	0x0222, r25
    ftw_topbot = floor((ftw-ftw_toptop*(double)16777216)/(double)65536);
     ac2:	20 e0       	ldi	r18, 0x00	; 0
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e8       	ldi	r20, 0x80	; 128
     ac8:	5b e4       	ldi	r21, 0x4B	; 75
     aca:	0e 94 cc 13 	call	0x2798	; 0x2798 <__mulsf3>
     ace:	9b 01       	movw	r18, r22
     ad0:	ac 01       	movw	r20, r24
     ad2:	c7 01       	movw	r24, r14
     ad4:	b6 01       	movw	r22, r12
     ad6:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__subsf3>
     ada:	4b 01       	movw	r8, r22
     adc:	5c 01       	movw	r10, r24
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	40 e8       	ldi	r20, 0x80	; 128
     ae4:	57 e3       	ldi	r21, 0x37	; 55
     ae6:	0e 94 cc 13 	call	0x2798	; 0x2798 <__mulsf3>
     aea:	0e 94 ab 12 	call	0x2556	; 0x2556 <floor>
     aee:	60 93 1b 02 	sts	0x021B, r22
     af2:	70 93 1c 02 	sts	0x021C, r23
     af6:	80 93 1d 02 	sts	0x021D, r24
     afa:	90 93 1e 02 	sts	0x021E, r25
    ftw_bottop = floor((ftw-ftw_toptop*(double)16777216-ftw_topbot*(double)65536)/(double)256);
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e8       	ldi	r20, 0x80	; 128
     b04:	57 e4       	ldi	r21, 0x47	; 71
     b06:	0e 94 cc 13 	call	0x2798	; 0x2798 <__mulsf3>
     b0a:	9b 01       	movw	r18, r22
     b0c:	ac 01       	movw	r20, r24
     b0e:	c5 01       	movw	r24, r10
     b10:	b4 01       	movw	r22, r8
     b12:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__subsf3>
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e8       	ldi	r20, 0x80	; 128
     b1c:	5b e3       	ldi	r21, 0x3B	; 59
     b1e:	0e 94 cc 13 	call	0x2798	; 0x2798 <__mulsf3>
     b22:	0e 94 ab 12 	call	0x2556	; 0x2556 <floor>
     b26:	60 93 17 02 	sts	0x0217, r22
     b2a:	70 93 18 02 	sts	0x0218, r23
     b2e:	80 93 19 02 	sts	0x0219, r24
     b32:	90 93 1a 02 	sts	0x021A, r25
    ftw_botbot = fmod(ftw,256);
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e8       	ldi	r20, 0x80	; 128
     b3c:	53 e4       	ldi	r21, 0x43	; 67
     b3e:	c7 01       	movw	r24, r14
     b40:	b6 01       	movw	r22, r12
     b42:	0e 94 cd 12 	call	0x259a	; 0x259a <fmod>
     b46:	60 93 13 02 	sts	0x0213, r22
     b4a:	70 93 14 02 	sts	0x0214, r23
     b4e:	80 93 15 02 	sts	0x0215, r24
     b52:	90 93 16 02 	sts	0x0216, r25

#if defined(LO_FREQ_PLUS_IF) || defined(LO_IF_PLUS_FREQ)
  clar = -(clar+1);  // For arch with LO above RF freq
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
     b56:	10 91 10 02 	lds	r17, 0x0210
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
  byte5 = (uint8_t)ftw_botbot;
     b5a:	60 91 13 02 	lds	r22, 0x0213
     b5e:	70 91 14 02 	lds	r23, 0x0214
     b62:	80 91 15 02 	lds	r24, 0x0215
     b66:	90 91 16 02 	lds	r25, 0x0216
     b6a:	0e 94 3f 12 	call	0x247e	; 0x247e <__fixunssfsi>
     b6e:	e6 2e       	mov	r14, r22
  clar = -(clar+1);  // For arch with LO above RF freq
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
     b70:	60 91 17 02 	lds	r22, 0x0217
     b74:	70 91 18 02 	lds	r23, 0x0218
     b78:	80 91 19 02 	lds	r24, 0x0219
     b7c:	90 91 1a 02 	lds	r25, 0x021A
     b80:	0e 94 3f 12 	call	0x247e	; 0x247e <__fixunssfsi>
     b84:	06 2f       	mov	r16, r22
#if defined(LO_FREQ_PLUS_IF) || defined(LO_IF_PLUS_FREQ)
  clar = -(clar+1);  // For arch with LO above RF freq
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
  byte3 = (uint8_t)ftw_topbot;
     b86:	60 91 1b 02 	lds	r22, 0x021B
     b8a:	70 91 1c 02 	lds	r23, 0x021C
     b8e:	80 91 1d 02 	lds	r24, 0x021D
     b92:	90 91 1e 02 	lds	r25, 0x021E
     b96:	0e 94 3f 12 	call	0x247e	; 0x247e <__fixunssfsi>
     b9a:	26 2f       	mov	r18, r22

#if defined(LO_FREQ_PLUS_IF) || defined(LO_IF_PLUS_FREQ)
  clar = -(clar+1);  // For arch with LO above RF freq
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
     b9c:	60 91 1f 02 	lds	r22, 0x021F
     ba0:	70 91 20 02 	lds	r23, 0x0220
     ba4:	80 91 21 02 	lds	r24, 0x0221
     ba8:	90 91 22 02 	lds	r25, 0x0222
     bac:	29 83       	std	Y+1, r18	; 0x01
     bae:	0e 94 3f 12 	call	0x247e	; 0x247e <__fixunssfsi>
     bb2:	41 2f       	mov	r20, r17
     bb4:	4e 7f       	andi	r20, 0xFE	; 254
     bb6:	46 2b       	or	r20, r22
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
  byte5 = (uint8_t)ftw_botbot;

  err = TWI_write_5bytes(fpga_addr, byte1, byte2, byte3, byte4, byte5);
     bb8:	29 81       	ldd	r18, Y+1	; 0x01
     bba:	60 ec       	ldi	r22, 0xC0	; 192
     bbc:	83 e2       	ldi	r24, 0x23	; 35
     bbe:	0e 94 a5 03 	call	0x74a	; 0x74a <TWI_write_5bytes>
    if (err)
      return err+5;
  }
#endif
  return 0x00;
}
     bc2:	0f 90       	pop	r0
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	bf 90       	pop	r11
     bd6:	af 90       	pop	r10
     bd8:	9f 90       	pop	r9
     bda:	8f 90       	pop	r8
     bdc:	08 95       	ret

00000bde <updateSettings>:

uint8_t updateSettings (void) {
     bde:	ef 92       	push	r14
     be0:	0f 93       	push	r16

  uint8_t err;
  uint8_t byte0, byte1, byte2, byte3, byte4;

  switch (mode) {  
     be2:	90 91 30 02 	lds	r25, 0x0230
     be6:	95 30       	cpi	r25, 0x05	; 5
     be8:	51 f1       	breq	.+84     	; 0xc3e <updateSettings+0x60>
     bea:	a0 f4       	brcc	.+40     	; 0xc14 <updateSettings+0x36>
     bec:	91 30       	cpi	r25, 0x01	; 1
     bee:	39 f1       	breq	.+78     	; 0xc3e <updateSettings+0x60>
     bf0:	93 30       	cpi	r25, 0x03	; 3
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <updateSettings+0x18>
     bf4:	50 c0       	rjmp	.+160    	; 0xc96 <updateSettings+0xb8>
#endif
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     bf6:	90 91 33 02 	lds	r25, 0x0233
     bfa:	80 91 28 02 	lds	r24, 0x0228
     bfe:	28 e0       	ldi	r18, 0x08	; 8
     c00:	82 9f       	mul	r24, r18
     c02:	a0 01       	movw	r20, r0
     c04:	11 24       	eor	r1, r1
     c06:	20 e4       	ldi	r18, 0x40	; 64
     c08:	92 9f       	mul	r25, r18
     c0a:	c0 01       	movw	r24, r0
     c0c:	11 24       	eor	r1, r1
     c0e:	48 2b       	or	r20, r24

  case USB:
#if defined(LO_FREQ_PLUS_IF)||defined(LO_IF_PLUS_FREQ)
    byte0 = 0b01110000; // Set LSB
#else
    byte0 = 0b01111000; // Set USB
     c10:	68 e7       	ldi	r22, 0x78	; 120
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     c12:	41 c0       	rjmp	.+130    	; 0xc96 <updateSettings+0xb8>
uint8_t updateSettings (void) {

  uint8_t err;
  uint8_t byte0, byte1, byte2, byte3, byte4;

  switch (mode) {  
     c14:	98 30       	cpi	r25, 0x08	; 8
     c16:	11 f1       	breq	.+68     	; 0xc5c <updateSettings+0x7e>
     c18:	9a 30       	cpi	r25, 0x0A	; 10
     c1a:	79 f1       	breq	.+94     	; 0xc7a <updateSettings+0x9c>
     c1c:	96 30       	cpi	r25, 0x06	; 6
     c1e:	d9 f5       	brne	.+118    	; 0xc96 <updateSettings+0xb8>
#endif
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     c20:	90 91 33 02 	lds	r25, 0x0233
     c24:	80 91 28 02 	lds	r24, 0x0228
     c28:	28 e0       	ldi	r18, 0x08	; 8
     c2a:	82 9f       	mul	r24, r18
     c2c:	a0 01       	movw	r20, r0
     c2e:	11 24       	eor	r1, r1
     c30:	20 e4       	ldi	r18, 0x40	; 64
     c32:	92 9f       	mul	r25, r18
     c34:	c0 01       	movw	r24, r0
     c36:	11 24       	eor	r1, r1
     c38:	48 2b       	or	r20, r24

  case CWN:
#if defined(LO_FREQ_PLUS_IF)||defined(LO_IF_PLUS_FREQ)
    byte0 = 0b01101000; // Set narrow USB
#else
    byte0 = 0b01100000; // Set narrow LSB
     c3a:	60 e6       	ldi	r22, 0x60	; 96
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     c3c:	2c c0       	rjmp	.+88     	; 0xc96 <updateSettings+0xb8>
#endif
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     c3e:	90 91 33 02 	lds	r25, 0x0233
     c42:	80 91 28 02 	lds	r24, 0x0228
     c46:	28 e0       	ldi	r18, 0x08	; 8
     c48:	82 9f       	mul	r24, r18
     c4a:	a0 01       	movw	r20, r0
     c4c:	11 24       	eor	r1, r1
     c4e:	20 e4       	ldi	r18, 0x40	; 64
     c50:	92 9f       	mul	r25, r18
     c52:	c0 01       	movw	r24, r0
     c54:	11 24       	eor	r1, r1
     c56:	48 2b       	or	r20, r24

  case CW:
#if defined(LO_FREQ_PLUS_IF)||defined(LO_IF_PLUS_FREQ)
    byte0 = 0b01111000; // Set USB
#else
    byte0 = 0b01110000; // Set LSB
     c58:	60 e7       	ldi	r22, 0x70	; 112
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     c5a:	1d c0       	rjmp	.+58     	; 0xc96 <updateSettings+0xb8>
    byte0 = 0b01000000;
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     c5c:	90 91 33 02 	lds	r25, 0x0233
     c60:	80 91 28 02 	lds	r24, 0x0228
     c64:	28 e0       	ldi	r18, 0x08	; 8
     c66:	82 9f       	mul	r24, r18
     c68:	a0 01       	movw	r20, r0
     c6a:	11 24       	eor	r1, r1
     c6c:	20 e4       	ldi	r18, 0x40	; 64
     c6e:	92 9f       	mul	r25, r18
     c70:	c0 01       	movw	r24, r0
     c72:	11 24       	eor	r1, r1
     c74:	48 2b       	or	r20, r24
    byte3 = 0x00;
    byte4 = 0x00;
    break;

  case AM:
    byte0 = 0b01000000;
     c76:	60 e4       	ldi	r22, 0x40	; 64
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     c78:	0e c0       	rjmp	.+28     	; 0xc96 <updateSettings+0xb8>
    byte0 = 0b01000001;
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     c7a:	90 91 33 02 	lds	r25, 0x0233
     c7e:	80 91 28 02 	lds	r24, 0x0228
     c82:	28 e0       	ldi	r18, 0x08	; 8
     c84:	82 9f       	mul	r24, r18
     c86:	a0 01       	movw	r20, r0
     c88:	11 24       	eor	r1, r1
     c8a:	20 e4       	ldi	r18, 0x40	; 64
     c8c:	92 9f       	mul	r25, r18
     c8e:	c0 01       	movw	r24, r0
     c90:	11 24       	eor	r1, r1
     c92:	48 2b       	or	r20, r24
    byte3 = 0x00;
    byte4 = 0x00;
    break;

  case FM:
    byte0 = 0b01000001;
     c94:	61 e4       	ldi	r22, 0x41	; 65
#endif
    byte3 = 0x00;
    byte4 = 0x00;
  }
  
  err = TWI_write_5bytes(fpga_addr, byte0, byte1, byte2, byte3, byte4);
     c96:	e1 2c       	mov	r14, r1
     c98:	00 e0       	ldi	r16, 0x00	; 0
     c9a:	28 e8       	ldi	r18, 0x88	; 136
     c9c:	83 e2       	ldi	r24, 0x23	; 35
     c9e:	0e 94 a5 03 	call	0x74a	; 0x74a <TWI_write_5bytes>
  if (err)
    return err;

  return 0x00;

}
     ca2:	0f 91       	pop	r16
     ca4:	ef 90       	pop	r14
     ca6:	08 95       	ret

00000ca8 <adcInit>:

void adcInit(void) {
  ADCSRA = (1 << ADEN) | (1 << ADFR) | (1 << ADPS2) | (1 << ADPS1); // Free run, /64 -> 77 kHz
     ca8:	86 ea       	ldi	r24, 0xA6	; 166
     caa:	86 b9       	out	0x06, r24	; 6
  ADMUX = 0x43; // ADC3, AVCC ref
     cac:	83 e4       	ldi	r24, 0x43	; 67
     cae:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= (1 << ADSC); // Start conversion
     cb0:	36 9a       	sbi	0x06, 6	; 6
     cb2:	08 95       	ret

00000cb4 <Timer0Init>:

}

void Timer0Init(void) {

  TCCR0 = 0x0f; // CTC mode, 1024 prescaler
     cb4:	8f e0       	ldi	r24, 0x0F	; 15
     cb6:	83 bf       	out	0x33, r24	; 51
  OCR0 = (uint8_t)10; // 1000000/(1024*10) = 100 Hz, 10ms
     cb8:	8a e0       	ldi	r24, 0x0A	; 10
     cba:	81 bf       	out	0x31, r24	; 49
  TIMSK |= (1 << OCIE0); // Interrupt at compare match
     cbc:	87 b7       	in	r24, 0x37	; 55
     cbe:	82 60       	ori	r24, 0x02	; 2
     cc0:	87 bf       	out	0x37, r24	; 55
     cc2:	08 95       	ret

00000cc4 <Timer1Init>:
}

void Timer1Init(void) {

  TCCR1A = 0x00;  
     cc4:	1f bc       	out	0x2f, r1	; 47
  TCCR1B = 0x0b; // CTC mode, 64 prescaler
     cc6:	8b e0       	ldi	r24, 0x0B	; 11
     cc8:	8e bd       	out	0x2e, r24	; 46
  OCR1A = (uint16_t)1563; // 1000000/(64*1563) = 10 Hz, 100ms
     cca:	8b e1       	ldi	r24, 0x1B	; 27
     ccc:	96 e0       	ldi	r25, 0x06	; 6
     cce:	9b bd       	out	0x2b, r25	; 43
     cd0:	8a bd       	out	0x2a, r24	; 42
  TIMSK |= (1 << OCIE1A); // Interrupt at compare match
     cd2:	87 b7       	in	r24, 0x37	; 55
     cd4:	80 61       	ori	r24, 0x10	; 16
     cd6:	87 bf       	out	0x37, r24	; 55
     cd8:	08 95       	ret

00000cda <lcd_e_port_low>:
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     cda:	e5 e6       	ldi	r30, 0x65	; 101
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	8d 7f       	andi	r24, 0xFD	; 253
     ce2:	80 83       	st	Z, r24
     ce4:	08 95       	ret

00000ce6 <lcd_e_port_high>:
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     ce6:	e5 e6       	ldi	r30, 0x65	; 101
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	82 60       	ori	r24, 0x02	; 2
     cee:	80 83       	st	Z, r24
     cf0:	08 95       	ret

00000cf2 <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if RW_LINE_IMPLEMENTED==1
static uint8_t lcd_read(uint8_t rs)
  {
     cf2:	af 92       	push	r10
     cf4:	bf 92       	push	r11
     cf6:	cf 92       	push	r12
     cf8:	df 92       	push	r13
     cfa:	ef 92       	push	r14
     cfc:	ff 92       	push	r15
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	1f 92       	push	r1
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    
    #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
    if (rs)
     d0c:	88 23       	and	r24, r24
     d0e:	21 f0       	breq	.+8      	; 0xd18 <lcd_read+0x26>
      lcd_waitbusy();
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_waitbusy>
     d16:	89 81       	ldd	r24, Y+1	; 0x01
      if (PrevCmdInvolvedAddressCounter)
     d18:	90 91 23 02 	lds	r25, 0x0223
     d1c:	99 23       	and	r25, r25
     d1e:	29 f0       	breq	.+10     	; 0xd2a <lcd_read+0x38>
        {
          Delay_us(5);
     d20:	00 c0       	rjmp	.+0      	; 0xd22 <lcd_read+0x30>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <lcd_read+0x32>
     d24:	00 00       	nop
          PrevCmdInvolvedAddressCounter=0;
     d26:	10 92 23 02 	sts	0x0223, r1
        }
    #endif

    if (rs)
     d2a:	88 23       	and	r24, r24
     d2c:	29 f0       	breq	.+10     	; 0xd38 <lcd_read+0x46>
      {
        lcd_rs_port_high();                             // RS=1: Read Data
     d2e:	97 9a       	sbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=1;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	80 93 23 02 	sts	0x0223, r24
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <lcd_read+0x48>
        #endif
      }
    else lcd_rs_port_low();                           // RS=0: Read Busy Flag
     d38:	97 98       	cbi	0x12, 7	; 18

    
    lcd_rw_port_high();                               // RW=1: Read Mode
     d3a:	80 91 65 00 	lds	r24, 0x0065
     d3e:	81 60       	ori	r24, 0x01	; 1
     d40:	80 93 65 00 	sts	0x0065, r24
      lcd_db7_port_high();                            // Pins High (Inactive)
      lcd_db6_port_high();
      lcd_db5_port_high();
      lcd_db4_port_high();
    #else //using 8-Bit-Mode
      lcd_db7_ddr_low();                              // Configure Data Pins as Input
     d44:	a7 98       	cbi	0x14, 7	; 20
      lcd_db6_ddr_low();
     d46:	a6 98       	cbi	0x14, 6	; 20
      lcd_db5_ddr_low();
     d48:	a5 98       	cbi	0x14, 5	; 20
      lcd_db4_ddr_low();
     d4a:	a4 98       	cbi	0x14, 4	; 20
      lcd_db3_ddr_low();
     d4c:	a3 98       	cbi	0x14, 3	; 20
      lcd_db2_ddr_low();
     d4e:	a2 98       	cbi	0x14, 2	; 20
      lcd_db1_ddr_low();
     d50:	a1 98       	cbi	0x14, 1	; 20
      lcd_db0_ddr_low();
     d52:	a0 98       	cbi	0x14, 0	; 20

      lcd_e_port_high();
     d54:	0e 94 73 06 	call	0xce6	; 0xce6 <lcd_e_port_high>
      Delay_ns(500);
     d58:	00 00       	nop

      data=lcd_db7_pin_get() << 7 | lcd_db6_pin_get() << 6 |
     d5a:	e3 b2       	in	r14, 0x13	; 19
     d5c:	c3 b2       	in	r12, 0x13	; 19
           lcd_db5_pin_get() << 5 | lcd_db4_pin_get() << 4 |
     d5e:	f3 b2       	in	r15, 0x13	; 19
     d60:	03 b3       	in	r16, 0x13	; 19
           lcd_db3_pin_get() << 3 | lcd_db2_pin_get() << 2 |
     d62:	13 b3       	in	r17, 0x13	; 19
     d64:	b3 b2       	in	r11, 0x13	; 19
           lcd_db1_pin_get() << 1 | lcd_db0_pin_get();
     d66:	a3 b2       	in	r10, 0x13	; 19
     d68:	d3 b2       	in	r13, 0x13	; 19

      lcd_e_port_low();
     d6a:	0e 94 6d 06 	call	0xcda	; 0xcda <lcd_e_port_low>

      lcd_db7_ddr_high();                             // Configure Data Pins as Output
     d6e:	a7 9a       	sbi	0x14, 7	; 20
      lcd_db6_ddr_high();
     d70:	a6 9a       	sbi	0x14, 6	; 20
      lcd_db5_ddr_high();
     d72:	a5 9a       	sbi	0x14, 5	; 20
      lcd_db4_ddr_high();
     d74:	a4 9a       	sbi	0x14, 4	; 20
      lcd_db3_ddr_high();
     d76:	a3 9a       	sbi	0x14, 3	; 20
      lcd_db2_ddr_high();
     d78:	a2 9a       	sbi	0x14, 2	; 20
      lcd_db1_ddr_high();
     d7a:	a1 9a       	sbi	0x14, 1	; 20
      lcd_db0_ddr_high();
     d7c:	a0 9a       	sbi	0x14, 0	; 20

      lcd_db7_port_high();                            // Pins High (Inactive)
     d7e:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
     d80:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
     d82:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
     d84:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db3_port_high();
     d86:	ab 9a       	sbi	0x15, 3	; 21
      lcd_db2_port_high();
     d88:	aa 9a       	sbi	0x15, 2	; 21
      lcd_db1_port_high();
     d8a:	a9 9a       	sbi	0x15, 1	; 21
      lcd_db0_port_high();
     d8c:	a8 9a       	sbi	0x15, 0	; 21
    #endif
    
    lcd_rw_port_low();
     d8e:	80 91 65 00 	lds	r24, 0x0065
     d92:	8e 7f       	andi	r24, 0xFE	; 254
     d94:	80 93 65 00 	sts	0x0065, r24
      lcd_db0_ddr_low();

      lcd_e_port_high();
      Delay_ns(500);

      data=lcd_db7_pin_get() << 7 | lcd_db6_pin_get() << 6 |
     d98:	8c 2d       	mov	r24, r12
     d9a:	80 74       	andi	r24, 0x40	; 64
     d9c:	9e 2d       	mov	r25, r14
     d9e:	90 78       	andi	r25, 0x80	; 128
     da0:	e8 2e       	mov	r14, r24
     da2:	e9 2a       	or	r14, r25
     da4:	9f 2d       	mov	r25, r15
     da6:	90 72       	andi	r25, 0x20	; 32
     da8:	fe 2c       	mov	r15, r14
     daa:	f9 2a       	or	r15, r25
     dac:	00 71       	andi	r16, 0x10	; 16
     dae:	0f 29       	or	r16, r15
     db0:	18 70       	andi	r17, 0x08	; 8
     db2:	10 2b       	or	r17, r16
     db4:	8b 2d       	mov	r24, r11
     db6:	84 70       	andi	r24, 0x04	; 4
     db8:	81 2b       	or	r24, r17
     dba:	9a 2d       	mov	r25, r10
     dbc:	92 70       	andi	r25, 0x02	; 2
     dbe:	98 2b       	or	r25, r24
           lcd_db5_pin_get() << 5 | lcd_db4_pin_get() << 4 |
           lcd_db3_pin_get() << 3 | lcd_db2_pin_get() << 2 |
           lcd_db1_pin_get() << 1 | lcd_db0_pin_get();
     dc0:	8d 2d       	mov	r24, r13
     dc2:	81 70       	andi	r24, 0x01	; 1
    if (rs)
      Delay_us(40);
    else Delay_us(1);
    #endif
    return data;
  }
     dc4:	89 2b       	or	r24, r25
     dc6:	0f 90       	pop	r0
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	ef 90       	pop	r14
     dd4:	df 90       	pop	r13
     dd6:	cf 90       	pop	r12
     dd8:	bf 90       	pop	r11
     dda:	af 90       	pop	r10
     ddc:	08 95       	ret

00000dde <lcd_waitbusy>:
*************************************************************************/
#if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
static uint8_t lcd_read(uint8_t rs);

static void lcd_waitbusy(void)
  {
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
    register uint8_t c;
    unsigned int ul1=0;

    while ( ((c=lcd_read(0)) & (1<<LCD_BUSY)) && ul1<((F_CPU/16384>=16)?F_CPU/16384:16))     // Wait Until Busy Flag is Cleared
     de2:	ce e3       	ldi	r28, 0x3E	; 62
     de4:	d0 e0       	ldi	r29, 0x00	; 0
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	0e 94 79 06 	call	0xcf2	; 0xcf2 <lcd_read>
     dec:	87 ff       	sbrs	r24, 7
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <lcd_waitbusy+0x16>
     df0:	21 97       	sbiw	r28, 0x01	; 1
     df2:	c9 f7       	brne	.-14     	; 0xde6 <lcd_waitbusy+0x8>
      ul1++;
  }
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <lcd_write>:
          rs     1: write data
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs)
  {
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <lcd_write+0x6>
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
    #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
      lcd_waitbusy();
     e04:	6a 83       	std	Y+2, r22	; 0x02
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	0e 94 ef 06 	call	0xdde	; 0xdde <lcd_waitbusy>
      if (PrevCmdInvolvedAddressCounter)
     e0c:	90 91 23 02 	lds	r25, 0x0223
     e10:	6a 81       	ldd	r22, Y+2	; 0x02
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	99 23       	and	r25, r25
     e16:	29 f0       	breq	.+10     	; 0xe22 <lcd_write+0x28>
        {
          Delay_us(5);
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <lcd_write+0x20>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <lcd_write+0x22>
     e1c:	00 00       	nop
          PrevCmdInvolvedAddressCounter=0;
     e1e:	10 92 23 02 	sts	0x0223, r1
        }
    #endif

    if (rs)
     e22:	66 23       	and	r22, r22
     e24:	29 f0       	breq	.+10     	; 0xe30 <lcd_write+0x36>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
     e26:	97 9a       	sbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=1;
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	90 93 23 02 	sts	0x0223, r25
     e2e:	03 c0       	rjmp	.+6      	; 0xe36 <lcd_write+0x3c>
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
     e30:	97 98       	cbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=0;
     e32:	10 92 23 02 	sts	0x0223, r1
      lcd_db6_port_high();
      lcd_db5_port_high();
      lcd_db4_port_high();

    #else //using 8-Bit_Mode
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
     e36:	87 ff       	sbrs	r24, 7
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <lcd_write+0x44>
     e3a:	af 9a       	sbi	0x15, 7	; 21
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <lcd_write+0x46>
     e3e:	af 98       	cbi	0x15, 7	; 21
      lcd_db6_port_set(data&_BV(6));
     e40:	86 ff       	sbrs	r24, 6
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <lcd_write+0x4e>
     e44:	ae 9a       	sbi	0x15, 6	; 21
     e46:	01 c0       	rjmp	.+2      	; 0xe4a <lcd_write+0x50>
     e48:	ae 98       	cbi	0x15, 6	; 21
      lcd_db5_port_set(data&_BV(5));
     e4a:	85 ff       	sbrs	r24, 5
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <lcd_write+0x58>
     e4e:	ad 9a       	sbi	0x15, 5	; 21
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <lcd_write+0x5a>
     e52:	ad 98       	cbi	0x15, 5	; 21
      lcd_db4_port_set(data&_BV(4));
     e54:	84 ff       	sbrs	r24, 4
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <lcd_write+0x62>
     e58:	ac 9a       	sbi	0x15, 4	; 21
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <lcd_write+0x64>
     e5c:	ac 98       	cbi	0x15, 4	; 21
      lcd_db3_port_set(data&_BV(3));                  //Output High Nibble
     e5e:	83 ff       	sbrs	r24, 3
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <lcd_write+0x6c>
     e62:	ab 9a       	sbi	0x15, 3	; 21
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <lcd_write+0x6e>
     e66:	ab 98       	cbi	0x15, 3	; 21
      lcd_db2_port_set(data&_BV(2));
     e68:	82 ff       	sbrs	r24, 2
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <lcd_write+0x76>
     e6c:	aa 9a       	sbi	0x15, 2	; 21
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <lcd_write+0x78>
     e70:	aa 98       	cbi	0x15, 2	; 21
      lcd_db1_port_set(data&_BV(1));
     e72:	81 ff       	sbrs	r24, 1
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <lcd_write+0x80>
     e76:	a9 9a       	sbi	0x15, 1	; 21
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <lcd_write+0x82>
     e7a:	a9 98       	cbi	0x15, 1	; 21
      lcd_db0_port_set(data&_BV(0));
     e7c:	80 ff       	sbrs	r24, 0
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <lcd_write+0x8a>
     e80:	a8 9a       	sbi	0x15, 0	; 21
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <lcd_write+0x8c>
     e84:	a8 98       	cbi	0x15, 0	; 21

      Delay_ns(100);
     e86:	00 00       	nop
      lcd_e_port_high();
     e88:	0e 94 73 06 	call	0xce6	; 0xce6 <lcd_e_port_high>
      Delay_ns(500);
     e8c:	00 00       	nop
      lcd_e_port_low();
     e8e:	0e 94 6d 06 	call	0xcda	; 0xcda <lcd_e_port_low>

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
     e92:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
     e94:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
     e96:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
     e98:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db3_port_high();
     e9a:	ab 9a       	sbi	0x15, 3	; 21
      lcd_db2_port_high();
     e9c:	aa 9a       	sbi	0x15, 2	; 21
      lcd_db1_port_high();
     e9e:	a9 9a       	sbi	0x15, 1	; 21
      lcd_db0_port_high();
     ea0:	a8 9a       	sbi	0x15, 0	; 21
    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
        Delay_us(1640);
      else Delay_us(40);
    #endif
  }
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret

00000eac <lcd_getc>:
    return data;
  }

uint8_t lcd_getc()
  {
    return lcd_read(1);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	0c 94 79 06 	jmp	0xcf2	; 0xcf2 <lcd_read>

00000eb2 <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <lcd_write>

00000eb8 <lcd_goto>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
     eb8:	80 58       	subi	r24, 0x80	; 128
     eba:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <lcd_command>

00000ebe <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <lcd_command>

00000ec4 <lcd_home>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
  {
    lcd_command(1<<LCD_HOME);
     ec4:	82 e0       	ldi	r24, 0x02	; 2
     ec6:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <lcd_command>

00000eca <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <lcd_write>

00000ed0 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	ec 01       	movw	r28, r24
    register char c;

    while ((c=*s++)) 
     ed6:	89 91       	ld	r24, Y+
     ed8:	88 23       	and	r24, r24
     eda:	19 f0       	breq	.+6      	; 0xee2 <lcd_puts+0x12>
      lcd_putc(c);
     edc:	0e 94 65 07 	call	0xeca	; 0xeca <lcd_putc>
     ee0:	fa cf       	rjmp	.-12     	; 0xed6 <lcd_puts+0x6>
  }
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	08 95       	ret

00000ee8 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	fc 01       	movw	r30, r24
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
     eee:	84 91       	lpm	r24, Z
     ef0:	ef 01       	movw	r28, r30
     ef2:	21 96       	adiw	r28, 0x01	; 1
     ef4:	88 23       	and	r24, r24
     ef6:	21 f0       	breq	.+8      	; 0xf00 <lcd_puts_P+0x18>
      lcd_putc(c);
     ef8:	0e 94 65 07 	call	0xeca	; 0xeca <lcd_putc>
     efc:	fe 01       	movw	r30, r28
     efe:	f7 cf       	rjmp	.-18     	; 0xeee <lcd_puts_P+0x6>
  }
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	08 95       	ret

00000f06 <lcd_init>:
     f06:	e4 e6       	ldi	r30, 0x64	; 100
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	82 60       	ori	r24, 0x02	; 2
     f0e:	80 83       	st	Z, r24
     f10:	8f 9a       	sbi	0x11, 7	; 17
     f12:	80 81       	ld	r24, Z
     f14:	81 60       	ori	r24, 0x01	; 1
     f16:	80 83       	st	Z, r24
     f18:	a7 9a       	sbi	0x14, 7	; 20
     f1a:	a6 9a       	sbi	0x14, 6	; 20
     f1c:	a5 9a       	sbi	0x14, 5	; 20
     f1e:	a4 9a       	sbi	0x14, 4	; 20
     f20:	a3 9a       	sbi	0x14, 3	; 20
     f22:	a2 9a       	sbi	0x14, 2	; 20
     f24:	a1 9a       	sbi	0x14, 1	; 20
     f26:	a0 9a       	sbi	0x14, 0	; 20
     f28:	0e 94 6d 06 	call	0xcda	; 0xcda <lcd_e_port_low>
     f2c:	97 98       	cbi	0x12, 7	; 18
     f2e:	e5 e6       	ldi	r30, 0x65	; 101
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	8e 7f       	andi	r24, 0xFE	; 254
     f36:	80 83       	st	Z, r24
     f38:	af 9a       	sbi	0x15, 7	; 21
     f3a:	ae 9a       	sbi	0x15, 6	; 21
     f3c:	ad 9a       	sbi	0x15, 5	; 21
     f3e:	ac 9a       	sbi	0x15, 4	; 21
     f40:	ab 9a       	sbi	0x15, 3	; 21
     f42:	aa 9a       	sbi	0x15, 2	; 21
     f44:	a9 9a       	sbi	0x15, 1	; 21
     f46:	a8 9a       	sbi	0x15, 0	; 21
     f48:	85 ea       	ldi	r24, 0xA5	; 165
     f4a:	9e e0       	ldi	r25, 0x0E	; 14
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	f1 f7       	brne	.-4      	; 0xf4c <lcd_init+0x46>
     f50:	00 c0       	rjmp	.+0      	; 0xf52 <lcd_init+0x4c>
     f52:	00 00       	nop
     f54:	af 98       	cbi	0x15, 7	; 21
     f56:	ae 98       	cbi	0x15, 6	; 21
     f58:	00 00       	nop
     f5a:	0e 94 73 06 	call	0xce6	; 0xce6 <lcd_e_port_high>
     f5e:	00 00       	nop
     f60:	0e 94 6d 06 	call	0xcda	; 0xcda <lcd_e_port_low>
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	94 e0       	ldi	r25, 0x04	; 4
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <lcd_init+0x62>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <lcd_init+0x68>
     f6e:	00 00       	nop
     f70:	0e 94 73 06 	call	0xce6	; 0xce6 <lcd_e_port_high>
     f74:	00 00       	nop
     f76:	0e 94 6d 06 	call	0xcda	; 0xcda <lcd_e_port_low>
     f7a:	91 e2       	ldi	r25, 0x21	; 33
     f7c:	9a 95       	dec	r25
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <lcd_init+0x76>
     f80:	00 00       	nop
     f82:	0e 94 73 06 	call	0xce6	; 0xce6 <lcd_e_port_high>
     f86:	00 00       	nop
     f88:	0e 94 6d 06 	call	0xcda	; 0xcda <lcd_e_port_low>
     f8c:	8d e0       	ldi	r24, 0x0D	; 13
     f8e:	8a 95       	dec	r24
     f90:	f1 f7       	brne	.-4      	; 0xf8e <lcd_init+0x88>
     f92:	00 00       	nop
     f94:	aa 98       	cbi	0x15, 2	; 21
     f96:	00 00       	nop
     f98:	0e 94 73 06 	call	0xce6	; 0xce6 <lcd_e_port_high>
     f9c:	00 00       	nop
     f9e:	0e 94 6d 06 	call	0xcda	; 0xcda <lcd_e_port_low>
     fa2:	9d e0       	ldi	r25, 0x0D	; 13
     fa4:	9a 95       	dec	r25
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <lcd_init+0x9e>
     fa8:	00 00       	nop
     faa:	88 e0       	ldi	r24, 0x08	; 8
     fac:	0e 94 59 07 	call	0xeb2	; 0xeb2 <lcd_command>
     fb0:	0e 94 5f 07 	call	0xebe	; 0xebe <lcd_clrscr>
     fb4:	86 e0       	ldi	r24, 0x06	; 6
     fb6:	0e 94 59 07 	call	0xeb2	; 0xeb2 <lcd_command>
     fba:	8c e0       	ldi	r24, 0x0C	; 12
     fbc:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <lcd_command>

00000fc0 <main>:
}

int main(void)
{
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	c3 54       	subi	r28, 0x43	; 67
     fca:	d1 09       	sbc	r29, r1
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
  uint16_t steps;
  
  static const char string_intro_row1[] PROGMEM = "*** SM6VFZ";
  static const char string_intro_row2[] PROGMEM = "Starting radio";

  DDRA = 0xFF;
     fd6:	8f ef       	ldi	r24, 0xFF	; 255
     fd8:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xFF;
     fda:	87 bb       	out	0x17, r24	; 23
  DDRC = 0xFF;
     fdc:	84 bb       	out	0x14, r24	; 20
  DDRD = ~(uint8_t)((1 << ROT2_A)|(1 << ROT2_B));
     fde:	93 ef       	ldi	r25, 0xF3	; 243
     fe0:	91 bb       	out	0x11, r25	; 17
  DDRE = ~(uint8_t)((1 << ROT1_A)|(1 << ROT1_B)|(1 << VOLROT_A)|(1 << VOLROT_B)|(1 << FREQ_BUTTON));
     fe2:	97 e0       	ldi	r25, 0x07	; 7
     fe4:	92 b9       	out	0x02, r25	; 2
  DDRF = ~(uint8_t)((1 << VOL_BUTTON)|(1 << MODE_BUTTON)|(1 << BAND_BUTTON)|(1 << CLAR_POT)|(1 << MENU_BUTTON));
     fe6:	90 ee       	ldi	r25, 0xE0	; 224
     fe8:	90 93 61 00 	sts	0x0061, r25
  DDRG = 0xFF;  
     fec:	80 93 64 00 	sts	0x0064, r24
	
  PORTA = 0x00;
     ff0:	1b ba       	out	0x1b, r1	; 27
  PORTB = 0x00;
     ff2:	18 ba       	out	0x18, r1	; 24
  PORTC = 0x00;
     ff4:	15 ba       	out	0x15, r1	; 21
  PORTD = (uint8_t)((1 << ROT2_A)|(1 << ROT2_B));
     ff6:	8c e0       	ldi	r24, 0x0C	; 12
     ff8:	82 bb       	out	0x12, r24	; 18
  PORTE = (uint8_t)((1 << ROT1_A)|(1 << ROT1_B)|(1 << VOLROT_A)|(1 << VOLROT_B)|(1 << FREQ_BUTTON)|(1 << ROT_BUTTON));
     ffa:	88 ef       	ldi	r24, 0xF8	; 248
     ffc:	83 b9       	out	0x03, r24	; 3
  PORTF = (uint8_t)((1 << VOL_BUTTON)|(1 << MODE_BUTTON)|(1 << BAND_BUTTON)|(1 << MODE_BUTTON)|(1 << SQUELCH_BUTTON));
     ffe:	83 e1       	ldi	r24, 0x13	; 19
    1000:	80 93 62 00 	sts	0x0062, r24
  PORTG = 0x00;
    1004:	10 92 65 00 	sts	0x0065, r1
	
  // turn off the analog comparator
  ACSR = 0x40U;
    1008:	80 e4       	ldi	r24, 0x40	; 64
    100a:	88 b9       	out	0x08, r24	; 8
	
  // turn off SPI, TWI and USART0
  //PRR  = 0x86U;
	
  EICRA = (1<<ISC21)|(1<<ISC31);
    100c:	80 ea       	ldi	r24, 0xA0	; 160
    100e:	80 93 6a 00 	sts	0x006A, r24
  EICRB = (1<<ISC41)|(1<<ISC51)|(1<<ISC61)|(1<<ISC71);
    1012:	8a ea       	ldi	r24, 0xAA	; 170
    1014:	8a bf       	out	0x3a, r24	; 58

  EIMSK = (1 << INTF2)|(1 << INTF3)|(1 << INTF4)|(1 << INTF5)|(1 << INTF6)|(1 << INTF7);
    1016:	8c ef       	ldi	r24, 0xFC	; 252
    1018:	89 bf       	out	0x39, r24	; 57
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	a8 95       	wdr
    1020:	81 b5       	in	r24, 0x21	; 33
    1022:	88 61       	ori	r24, 0x18	; 24
    1024:	81 bd       	out	0x21, r24	; 33
    1026:	11 bc       	out	0x21, r1	; 33
    1028:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    102a:	2f e9       	ldi	r18, 0x9F	; 159
    102c:	86 e8       	ldi	r24, 0x86	; 134
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	21 50       	subi	r18, 0x01	; 1
    1032:	80 40       	sbci	r24, 0x00	; 0
    1034:	90 40       	sbci	r25, 0x00	; 0
    1036:	e1 f7       	brne	.-8      	; 0x1030 <main+0x70>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <main+0x7a>
    103a:	00 00       	nop

  wdt_disable();

  _delay_ms(500);

  PORTD |= (1 << LED_RED) | (1 << LED_GREEN);
    103c:	82 b3       	in	r24, 0x12	; 18
    103e:	80 66       	ori	r24, 0x60	; 96
    1040:	82 bb       	out	0x12, r24	; 18

  TIMSK = 0;
    1042:	17 be       	out	0x37, r1	; 55
  Timer0Init();
    1044:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Timer0Init>
  Timer1Init();
    1048:	0e 94 62 06 	call	0xcc4	; 0xcc4 <Timer1Init>
  TWIinit();
    104c:	0e 94 0e 02 	call	0x41c	; 0x41c <TWIinit>
  lcd_init();
    1050:	0e 94 83 07 	call	0xf06	; 0xf06 <lcd_init>
  lcd_clrscr();
    1054:	0e 94 5f 07 	call	0xebe	; 0xebe <lcd_clrscr>
  adcInit();
    1058:	0e 94 54 06 	call	0xca8	; 0xca8 <adcInit>
    105c:	af e4       	ldi	r26, 0x4F	; 79
    105e:	b3 ec       	ldi	r27, 0xC3	; 195
    1060:	11 97       	sbiw	r26, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <main+0xa0>
    1064:	00 c0       	rjmp	.+0      	; 0x1066 <main+0xa6>
    1066:	00 00       	nop

  _delay_ms(200);

  PORTD &= ~((1 << LED_RED) | (1 << LED_GREEN));
    1068:	82 b3       	in	r24, 0x12	; 18
    106a:	8f 79       	andi	r24, 0x9F	; 159
    106c:	82 bb       	out	0x12, r24	; 18

  strcpy_P(buffer, string_intro_row1);
    106e:	6b e9       	ldi	r22, 0x9B	; 155
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	8e 01       	movw	r16, r28
    1074:	0f 5f       	subi	r16, 0xFF	; 255
    1076:	1f 4f       	sbci	r17, 0xFF	; 255
    1078:	c8 01       	movw	r24, r16
    107a:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <strcpy_P>
  lcd_puts(buffer);
    107e:	c8 01       	movw	r24, r16
    1080:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
  lcd_goto(0x40);
    1084:	80 e4       	ldi	r24, 0x40	; 64
    1086:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
  strcpy_P(buffer, string_intro_row2);
    108a:	6c e8       	ldi	r22, 0x8C	; 140
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	c8 01       	movw	r24, r16
    1090:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <strcpy_P>
  lcd_puts(buffer);
    1094:	c8 01       	movw	r24, r16
    1096:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>

  rot_flag = 0x01;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	80 93 2e 02 	sts	0x022E, r24
  mode_flag = 0x01;
    10a0:	80 93 27 02 	sts	0x0227, r24
  band_flag = 0x02;
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	80 93 29 02 	sts	0x0229, r24
  timer_flag = 0x00;
    10aa:	10 92 36 02 	sts	0x0236, r1

  band = 10;
    10ae:	8a e0       	ldi	r24, 0x0A	; 10
    10b0:	80 93 24 02 	sts	0x0224, r24
  freq = 7010;
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e1       	ldi	r25, 0x10	; 16
    10b8:	ab ed       	ldi	r26, 0xDB	; 219
    10ba:	b5 e4       	ldi	r27, 0x45	; 69
    10bc:	80 93 2a 02 	sts	0x022A, r24
    10c0:	90 93 2b 02 	sts	0x022B, r25
    10c4:	a0 93 2c 02 	sts	0x022C, r26
    10c8:	b0 93 2d 02 	sts	0x022D, r27
  step_timer = 255;
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	90 93 35 02 	sts	0x0235, r25
    10d4:	80 93 34 02 	sts	0x0234, r24
  steps = 0;
  last_dir = 0x00;
  mode = 0x00;
    10d8:	10 92 30 02 	sts	0x0230, r1
  tx = 0x0000;
    10dc:	10 92 32 02 	sts	0x0232, r1
    10e0:	10 92 31 02 	sts	0x0231, r1
  rx_att = 0x00;
    10e4:	10 92 28 02 	sts	0x0228, r1
  tx_att = 0x00;
    10e8:	10 92 33 02 	sts	0x0233, r1
  rffe_rx_att = false;
    10ec:	10 92 37 02 	sts	0x0237, r1

  err = updateVolumeSquelch(vol, squelch);
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	88 e1       	ldi	r24, 0x18	; 24
    10f4:	0e 94 bc 04 	call	0x978	; 0x978 <updateVolumeSquelch>
    10f8:	bf e7       	ldi	r27, 0x7F	; 127
    10fa:	2a e1       	ldi	r18, 0x1A	; 26
    10fc:	86 e0       	ldi	r24, 0x06	; 6
    10fe:	b1 50       	subi	r27, 0x01	; 1
    1100:	20 40       	sbci	r18, 0x00	; 0
    1102:	80 40       	sbci	r24, 0x00	; 0
    1104:	e1 f7       	brne	.-8      	; 0x10fe <main+0x13e>
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <__stack+0x9>
    1108:	00 00       	nop
  
  _delay_ms(2000);

  lcd_clrscr();
    110a:	0e 94 5f 07 	call	0xebe	; 0xebe <lcd_clrscr>
  
  sei();
    110e:	78 94       	sei
  timer_flag = 0x00;

  band = 10;
  freq = 7010;
  step_timer = 255;
  steps = 0;
    1110:	c1 2c       	mov	r12, r1
    1112:	d1 2c       	mov	r13, r1
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
  uint8_t last_dir;
  uint8_t squelch = 0;
  uint8_t tx_last = 255;
  uint8_t vol = 0x18;
    1114:	38 e1       	ldi	r19, 0x18	; 24
    1116:	a3 2e       	mov	r10, r19
  int16_t clarval, clarval_last;
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
  uint8_t last_dir;
  uint8_t squelch = 0;
  uint8_t tx_last = 255;
    1118:	9f ef       	ldi	r25, 0xFF	; 255
    111a:	9e af       	std	Y+62, r25	; 0x3e
  double freq_last;
  int16_t clarval, clarval_last;
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
  uint8_t last_dir;
  uint8_t squelch = 0;
    111c:	b1 2c       	mov	r11, r1

  band = 10;
  freq = 7010;
  step_timer = 255;
  steps = 0;
  last_dir = 0x00;
    111e:	1f ae       	std	Y+63, r1	; 0x3f
{
  char buffer[60];
  double freq_last;
  int16_t clarval, clarval_last;
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
    1120:	e1 2c       	mov	r14, r1
    1122:	f1 2c       	mov	r15, r1
#endif
      }
      else {
#ifdef HF_HAM
	if (freq<3500)
	  freq = 3510;
    1124:	41 2c       	mov	r4, r1
    1126:	40 e6       	ldi	r20, 0x60	; 96
    1128:	54 2e       	mov	r5, r20
    112a:	4b e5       	ldi	r20, 0x5B	; 91
    112c:	64 2e       	mov	r6, r20
    112e:	45 e4       	ldi	r20, 0x45	; 69
    1130:	74 2e       	mov	r7, r20
  lcd_clrscr();
  
  sei();

  while (1) {
    if (timer_flag) {
    1132:	80 91 36 02 	lds	r24, 0x0236
    1136:	88 23       	and	r24, r24
    1138:	09 f4       	brne	.+2      	; 0x113c <__stack+0x3d>
    113a:	52 c1       	rjmp	.+676    	; 0x13e0 <__stack+0x2e1>
    return err;
  return 0x00;
}

uint16_t readClar(void) {
  return (ADC);
    113c:	84 b0       	in	r8, 0x04	; 4
    113e:	95 b0       	in	r9, 0x05	; 5
#endif
#ifndef CLARPOT
      clarval = 0;
#endif

      if ((clarval < clarval_last - 10) || (clarval > clarval_last + 10)) {
    1140:	c1 01       	movw	r24, r2
    1142:	0a 97       	sbiw	r24, 0x0a	; 10
    1144:	88 16       	cp	r8, r24
    1146:	99 06       	cpc	r9, r25
    1148:	24 f0       	brlt	.+8      	; 0x1152 <__stack+0x53>
    114a:	44 96       	adiw	r24, 0x14	; 20
    114c:	88 15       	cp	r24, r8
    114e:	99 05       	cpc	r25, r9
    1150:	3c f5       	brge	.+78     	; 0x11a0 <__stack+0xa1>
	clar = (int8_t)((clarval - 512) >> 2);
    1152:	c4 01       	movw	r24, r8
    1154:	92 50       	subi	r25, 0x02	; 2
    1156:	95 95       	asr	r25
    1158:	87 95       	ror	r24
    115a:	95 95       	asr	r25
    115c:	87 95       	ror	r24
    115e:	80 93 10 02 	sts	0x0210, r24
	err = updateFreq(0);
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	0e 94 fd 04 	call	0x9fa	; 0x9fa <updateFreq>
	if (err) {
    1168:	88 23       	and	r24, r24
    116a:	b9 f0       	breq	.+46     	; 0x119a <__stack+0x9b>
	  sprintf(buffer,"Err %x         ",err);
    116c:	1f 92       	push	r1
    116e:	8f 93       	push	r24
    1170:	85 e1       	ldi	r24, 0x15	; 21
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	9f 93       	push	r25
    1176:	8f 93       	push	r24
    1178:	1f 93       	push	r17
    117a:	0f 93       	push	r16
    117c:	0e 94 91 15 	call	0x2b22	; 0x2b22 <sprintf>
	  lcd_goto(0x40);
    1180:	80 e4       	ldi	r24, 0x40	; 64
    1182:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	  lcd_puts(buffer);	
    1186:	c8 01       	movw	r24, r16
    1188:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <__stack+0x9f>
	}
	else {
	  lcd_freq();
    119a:	0e 94 0c 04 	call	0x818	; 0x818 <lcd_freq>

  while (1) {
    if (timer_flag) {

#ifdef CLARPOT
      clarval = readClar();
    119e:	14 01       	movw	r2, r8
	  lcd_freq();
	}
	clarval_last = clarval;
      }

      if (vol_timer < 255)
    11a0:	80 91 00 01 	lds	r24, 0x0100
    11a4:	8f 3f       	cpi	r24, 0xFF	; 255
    11a6:	29 f0       	breq	.+10     	; 0x11b2 <__stack+0xb3>
	vol_timer ++;
    11a8:	80 91 00 01 	lds	r24, 0x0100
    11ac:	8f 5f       	subi	r24, 0xFF	; 255
    11ae:	80 93 00 01 	sts	0x0100, r24

      // Band button

      if (band_timer < 9) { // Recently pressed ?
    11b2:	80 91 01 01 	lds	r24, 0x0101
    11b6:	89 30       	cpi	r24, 0x09	; 9
    11b8:	d8 f4       	brcc	.+54     	; 0x11f0 <__stack+0xf1>
	band_timer ++;
    11ba:	80 91 01 01 	lds	r24, 0x0101
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	80 93 01 01 	sts	0x0101, r24
	if ((band_timer < 9) && (PINF & (1 << BAND_BUTTON))) {
    11c4:	80 91 01 01 	lds	r24, 0x0101
    11c8:	89 30       	cpi	r24, 0x09	; 9
    11ca:	40 f4       	brcc	.+16     	; 0x11dc <__stack+0xdd>
    11cc:	00 9b       	sbis	0x00, 0	; 0
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <__stack+0xdd>
	  band_flag = 0x01; // short press
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	80 93 29 02 	sts	0x0229, r24
	  band_timer = 255;
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	80 93 01 01 	sts	0x0101, r24
	}
	if ((band_timer == 9) && (!(PINF & (1 << BAND_BUTTON)))) 
    11dc:	80 91 01 01 	lds	r24, 0x0101
    11e0:	89 30       	cpi	r24, 0x09	; 9
    11e2:	49 f4       	brne	.+18     	; 0x11f6 <__stack+0xf7>
    11e4:	00 99       	sbic	0x00, 0	; 0
    11e6:	07 c0       	rjmp	.+14     	; 0x11f6 <__stack+0xf7>
	  band_flag = 0x02; // long press
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	80 93 29 02 	sts	0x0229, r24
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <__stack+0xf7>
      }
      else if (!(PINF & (1 << BAND_BUTTON))) {  // New press
    11f0:	00 9b       	sbis	0x00, 0	; 0
	band_timer = 0;
    11f2:	10 92 01 01 	sts	0x0101, r1
      }

      // Mode button

      if (!(PINF & (1 << MODE_BUTTON))) {
    11f6:	01 99       	sbic	0x00, 1	; 0
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <__stack+0x101>
	mode_flag = 0x01;
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 93 27 02 	sts	0x0227, r24
      }
      
      // Update frequency if necessary:
      if (freq != freq_last) {
    1200:	60 91 2a 02 	lds	r22, 0x022A
    1204:	70 91 2b 02 	lds	r23, 0x022B
    1208:	80 91 2c 02 	lds	r24, 0x022C
    120c:	90 91 2d 02 	lds	r25, 0x022D
    1210:	24 96       	adiw	r28, 0x04	; 4
    1212:	2c ad       	ldd	r18, Y+60	; 0x3c
    1214:	3d ad       	ldd	r19, Y+61	; 0x3d
    1216:	4e ad       	ldd	r20, Y+62	; 0x3e
    1218:	5f ad       	ldd	r21, Y+63	; 0x3f
    121a:	24 97       	sbiw	r28, 0x04	; 4
    121c:	0e 94 c1 11 	call	0x2382	; 0x2382 <__cmpsf2>
    1220:	88 23       	and	r24, r24
    1222:	59 f1       	breq	.+86     	; 0x127a <__stack+0x17b>
	lcd_freq();
    1224:	0e 94 0c 04 	call	0x818	; 0x818 <lcd_freq>
	err = updateFreq(1);
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <updateFreq>
	if (err) {
    122e:	88 23       	and	r24, r24
    1230:	b1 f0       	breq	.+44     	; 0x125e <__stack+0x15f>
	  sprintf(buffer,"Err %x         ",err);
    1232:	1f 92       	push	r1
    1234:	8f 93       	push	r24
    1236:	85 e1       	ldi	r24, 0x15	; 21
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	9f 93       	push	r25
    123c:	8f 93       	push	r24
    123e:	1f 93       	push	r17
    1240:	0f 93       	push	r16
    1242:	0e 94 91 15 	call	0x2b22	; 0x2b22 <sprintf>
	  lcd_goto(0x40);
    1246:	80 e4       	ldi	r24, 0x40	; 64
    1248:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	  lcd_puts(buffer);	
    124c:	c8 01       	movw	r24, r16
    124e:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
	}
	freq_last = freq;
    125e:	80 91 2a 02 	lds	r24, 0x022A
    1262:	90 91 2b 02 	lds	r25, 0x022B
    1266:	a0 91 2c 02 	lds	r26, 0x022C
    126a:	b0 91 2d 02 	lds	r27, 0x022D
    126e:	24 96       	adiw	r28, 0x04	; 4
    1270:	8c af       	std	Y+60, r24	; 0x3c
    1272:	9d af       	std	Y+61, r25	; 0x3d
    1274:	ae af       	std	Y+62, r26	; 0x3e
    1276:	bf af       	std	Y+63, r27	; 0x3f
    1278:	24 97       	sbiw	r28, 0x04	; 4
      }

      // Read RSSI and status:
      err = TWI_read_byte(fpga_addr, &data);
    127a:	be 01       	movw	r22, r28
    127c:	63 5c       	subi	r22, 0xC3	; 195
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	83 e2       	ldi	r24, 0x23	; 35
    1282:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <TWI_read_byte>
      if (!err) {
    1286:	81 11       	cpse	r24, r1
    1288:	20 c0       	rjmp	.+64     	; 0x12ca <__stack+0x1cb>
	if ((data & 0x80) && (tx_last != 1)) { // Shift to TX ?
    128a:	8d ad       	ldd	r24, Y+61	; 0x3d
    128c:	87 ff       	sbrs	r24, 7
    128e:	10 c0       	rjmp	.+32     	; 0x12b0 <__stack+0x1b1>
    1290:	9e ad       	ldd	r25, Y+62	; 0x3e
    1292:	91 30       	cpi	r25, 0x01	; 1
    1294:	e9 f0       	breq	.+58     	; 0x12d0 <__stack+0x1d1>
	  tx = 0x0001;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	90 93 32 02 	sts	0x0232, r25
    129e:	80 93 31 02 	sts	0x0231, r24
	  updateRFFE();
    12a2:	0e 94 cc 04 	call	0x998	; 0x998 <updateRFFE>
	  PORTD |= (1 << LED_RED);
    12a6:	96 9a       	sbi	0x12, 6	; 18
	  PORTD &= ~(1 << LED_GREEN);
    12a8:	95 98       	cbi	0x12, 5	; 18
	  tx_last = 1;
    12aa:	a1 e0       	ldi	r26, 0x01	; 1
    12ac:	ae af       	std	Y+62, r26	; 0x3e
    12ae:	10 c0       	rjmp	.+32     	; 0x12d0 <__stack+0x1d1>
	}
	else if (!(data & 0x80) && (tx_last != 0)) { // Shift to RX ?
    12b0:	be ad       	ldd	r27, Y+62	; 0x3e
    12b2:	bb 23       	and	r27, r27
    12b4:	69 f0       	breq	.+26     	; 0x12d0 <__stack+0x1d1>
	  tx = 0x0000;
    12b6:	10 92 32 02 	sts	0x0232, r1
    12ba:	10 92 31 02 	sts	0x0231, r1
	  updateRFFE();
    12be:	0e 94 cc 04 	call	0x998	; 0x998 <updateRFFE>
	  PORTD |= (1 << LED_GREEN);
    12c2:	95 9a       	sbi	0x12, 5	; 18
	  PORTD &= ~(1 << LED_RED);
    12c4:	96 98       	cbi	0x12, 6	; 18
	  tx_last = 0;
    12c6:	1e ae       	std	Y+62, r1	; 0x3e
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <__stack+0x1d1>
	}
      }
      else { // error
	PORTD &= ~((1 << LED_RED)|(1 << LED_GREEN));
    12ca:	82 b3       	in	r24, 0x12	; 18
    12cc:	8f 79       	andi	r24, 0x9F	; 159
    12ce:	82 bb       	out	0x12, r24	; 18
      }

      rssi = (0x3f & data); 
    12d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    12d2:	8f 73       	andi	r24, 0x3F	; 63
    12d4:	f8 16       	cp	r15, r24
    12d6:	08 f4       	brcc	.+2      	; 0x12da <__stack+0x1db>
    12d8:	f8 2e       	mov	r15, r24
      if (rssi_max < rssi) 
	rssi_max = rssi;
      rssi_count ++;
    12da:	e3 94       	inc	r14
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
    12dc:	80 91 37 02 	lds	r24, 0x0237
    12e0:	81 11       	cpse	r24, r1
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <__stack+0x1eb>
    12e4:	22 e0       	ldi	r18, 0x02	; 2
    12e6:	2e 15       	cp	r18, r14
    12e8:	48 f0       	brcs	.+18     	; 0x12fc <__stack+0x1fd>
    12ea:	80 91 37 02 	lds	r24, 0x0237
    12ee:	88 23       	and	r24, r24
    12f0:	09 f4       	brne	.+2      	; 0x12f4 <__stack+0x1f5>
    12f2:	73 c0       	rjmp	.+230    	; 0x13da <__stack+0x2db>
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	8e 15       	cp	r24, r14
    12f8:	08 f0       	brcs	.+2      	; 0x12fc <__stack+0x1fd>
    12fa:	6f c0       	rjmp	.+222    	; 0x13da <__stack+0x2db>
	rssi_count = 0;
	if (rssi_max < 4)
    12fc:	93 e0       	ldi	r25, 0x03	; 3
    12fe:	9f 15       	cp	r25, r15
    1300:	18 f4       	brcc	.+6      	; 0x1308 <__stack+0x209>
	  rssi = 0;
	else 
	  rssi = rssi_max - 4;
    1302:	8c ef       	ldi	r24, 0xFC	; 252
    1304:	8f 0d       	add	r24, r15
    1306:	01 c0       	rjmp	.+2      	; 0x130a <__stack+0x20b>
	rssi_max = rssi;
      rssi_count ++;
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
	rssi_count = 0;
	if (rssi_max < 4)
	  rssi = 0;
    1308:	80 e0       	ldi	r24, 0x00	; 0
	else 
	  rssi = rssi_max - 4;
	rssi_max = 0;

	if (vol_timer < 10); // Don't print if vol info
    130a:	90 91 00 01 	lds	r25, 0x0100
    130e:	9a 30       	cpi	r25, 0x0A	; 10
    1310:	08 f4       	brcc	.+2      	; 0x1314 <__stack+0x215>
    1312:	61 c0       	rjmp	.+194    	; 0x13d6 <__stack+0x2d7>
	else if (rffe_rx_att && (rssi>9)) {
    1314:	90 91 37 02 	lds	r25, 0x0237
    1318:	99 23       	and	r25, r25
    131a:	29 f0       	breq	.+10     	; 0x1326 <__stack+0x227>
    131c:	8a 30       	cpi	r24, 0x0A	; 10
    131e:	18 f0       	brcs	.+6      	; 0x1326 <__stack+0x227>
	  sprintf(buffer,"S---9+++   ");
    1320:	65 e2       	ldi	r22, 0x25	; 37
    1322:	71 e0       	ldi	r23, 0x01	; 1
    1324:	49 c0       	rjmp	.+146    	; 0x13b8 <__stack+0x2b9>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rffe_rx_att && (rssi < 10)) {
    1326:	90 91 37 02 	lds	r25, 0x0237
    132a:	99 23       	and	r25, r25
    132c:	29 f0       	breq	.+10     	; 0x1338 <__stack+0x239>
    132e:	8a 30       	cpi	r24, 0x0A	; 10
    1330:	88 f4       	brcc	.+34     	; 0x1354 <__stack+0x255>
	  rffe_rx_att = false;
    1332:	10 92 37 02 	sts	0x0237, r1
    1336:	4d c0       	rjmp	.+154    	; 0x13d2 <__stack+0x2d3>
	  err = updateRFFE();
	}
	else if (rssi < 2) { 
    1338:	82 30       	cpi	r24, 0x02	; 2
    133a:	28 f4       	brcc	.+10     	; 0x1346 <__stack+0x247>
	  sprintf(buffer,"S%d         ",rssi);
    133c:	1f 92       	push	r1
    133e:	8f 93       	push	r24
    1340:	81 e3       	ldi	r24, 0x31	; 49
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	0d c0       	rjmp	.+26     	; 0x1360 <__stack+0x261>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 4) {
    1346:	84 30       	cpi	r24, 0x04	; 4
    1348:	28 f4       	brcc	.+10     	; 0x1354 <__stack+0x255>
	  sprintf(buffer,"S-%d        ",rssi);
    134a:	1f 92       	push	r1
    134c:	8f 93       	push	r24
    134e:	8e e3       	ldi	r24, 0x3E	; 62
    1350:	91 e0       	ldi	r25, 0x01	; 1
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <__stack+0x261>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
 	}
	else if (rssi < 6) {
    1354:	86 30       	cpi	r24, 0x06	; 6
    1356:	38 f4       	brcc	.+14     	; 0x1366 <__stack+0x267>
	  sprintf(buffer,"S--%d       ",rssi);
    1358:	1f 92       	push	r1
    135a:	8f 93       	push	r24
    135c:	8b e4       	ldi	r24, 0x4B	; 75
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	9f 93       	push	r25
    1362:	8f 93       	push	r24
    1364:	0f c0       	rjmp	.+30     	; 0x1384 <__stack+0x285>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 8) {
    1366:	88 30       	cpi	r24, 0x08	; 8
    1368:	28 f4       	brcc	.+10     	; 0x1374 <__stack+0x275>
	  sprintf(buffer,"S---%d      ",rssi);
    136a:	1f 92       	push	r1
    136c:	8f 93       	push	r24
    136e:	a8 e5       	ldi	r26, 0x58	; 88
    1370:	b1 e0       	ldi	r27, 0x01	; 1
    1372:	06 c0       	rjmp	.+12     	; 0x1380 <__stack+0x281>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 10) {
    1374:	8a 30       	cpi	r24, 0x0A	; 10
    1376:	b8 f4       	brcc	.+46     	; 0x13a6 <__stack+0x2a7>
	  sprintf(buffer,"S----%d     ",rssi);
    1378:	1f 92       	push	r1
    137a:	8f 93       	push	r24
    137c:	a5 e6       	ldi	r26, 0x65	; 101
    137e:	b1 e0       	ldi	r27, 0x01	; 1
    1380:	bf 93       	push	r27
    1382:	af 93       	push	r26
    1384:	1f 93       	push	r17
    1386:	0f 93       	push	r16
    1388:	0e 94 91 15 	call	0x2b22	; 0x2b22 <sprintf>
	  lcd_goto(0x40);
    138c:	80 e4       	ldi	r24, 0x40	; 64
    138e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	  lcd_puts(buffer);
    1392:	c8 01       	movw	r24, r16
    1394:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	18 c0       	rjmp	.+48     	; 0x13d6 <__stack+0x2d7>
	}
	else if (rssi < 12) {
    13a6:	8c 30       	cpi	r24, 0x0C	; 12
    13a8:	18 f4       	brcc	.+6      	; 0x13b0 <__stack+0x2b1>
	  sprintf(buffer,"S----9+    ");
    13aa:	62 e7       	ldi	r22, 0x72	; 114
    13ac:	71 e0       	ldi	r23, 0x01	; 1
    13ae:	04 c0       	rjmp	.+8      	; 0x13b8 <__stack+0x2b9>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 13 ){
    13b0:	8c 30       	cpi	r24, 0x0C	; 12
    13b2:	61 f4       	brne	.+24     	; 0x13cc <__stack+0x2cd>
	  sprintf(buffer,"S----9++   ");
    13b4:	6e e7       	ldi	r22, 0x7E	; 126
    13b6:	71 e0       	ldi	r23, 0x01	; 1
    13b8:	c8 01       	movw	r24, r16
    13ba:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <strcpy>
	  lcd_goto(0x40);
    13be:	80 e4       	ldi	r24, 0x40	; 64
    13c0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	  lcd_puts(buffer);
    13c4:	c8 01       	movw	r24, r16
    13c6:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <__stack+0x2d7>
	}
	else {
	  rffe_rx_att = true;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 37 02 	sts	0x0237, r24
	  err = updateRFFE();
    13d2:	0e 94 cc 04 	call	0x998	; 0x998 <updateRFFE>
      rssi = (0x3f & data); 
      if (rssi_max < rssi) 
	rssi_max = rssi;
      rssi_count ++;
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
	rssi_count = 0;
    13d6:	e1 2c       	mov	r14, r1
	if (rssi_max < 4)
	  rssi = 0;
	else 
	  rssi = rssi_max - 4;
	rssi_max = 0;
    13d8:	f1 2c       	mov	r15, r1
	  rffe_rx_att = true;
	  err = updateRFFE();
	}
	rssi = 0;
      }
      timer_flag = 0;
    13da:	10 92 36 02 	sts	0x0236, r1
    13de:	6e c0       	rjmp	.+220    	; 0x14bc <__stack+0x3bd>
    }
    else if (mode_flag) {
    13e0:	80 91 27 02 	lds	r24, 0x0227
    13e4:	88 23       	and	r24, r24
    13e6:	09 f4       	brne	.+2      	; 0x13ea <__stack+0x2eb>
    13e8:	69 c0       	rjmp	.+210    	; 0x14bc <__stack+0x3bd>
      switch (mode) {
    13ea:	80 91 30 02 	lds	r24, 0x0230
    13ee:	83 30       	cpi	r24, 0x03	; 3
    13f0:	a9 f0       	breq	.+42     	; 0x141c <__stack+0x31d>
    13f2:	18 f4       	brcc	.+6      	; 0x13fa <__stack+0x2fb>
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	31 f0       	breq	.+12     	; 0x1404 <__stack+0x305>
    13f8:	45 c0       	rjmp	.+138    	; 0x1484 <__stack+0x385>
    13fa:	85 30       	cpi	r24, 0x05	; 5
    13fc:	d9 f0       	breq	.+54     	; 0x1434 <__stack+0x335>
    13fe:	86 30       	cpi	r24, 0x06	; 6
    1400:	29 f1       	breq	.+74     	; 0x144c <__stack+0x34d>
    1402:	40 c0       	rjmp	.+128    	; 0x1484 <__stack+0x385>
      case LSB:
	mode = USB;
    1404:	83 e0       	ldi	r24, 0x03	; 3
    1406:	80 93 30 02 	sts	0x0230, r24
	if (!updateSettings()) { 
    140a:	0e 94 ef 05 	call	0xbde	; 0xbde <updateSettings>
    140e:	81 11       	cpse	r24, r1
    1410:	4a c0       	rjmp	.+148    	; 0x14a6 <__stack+0x3a7>
	  lcd_goto(0x00);
    1412:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	  sprintf(buffer,"USB ");
    1416:	6a e8       	ldi	r22, 0x8A	; 138
    1418:	71 e0       	ldi	r23, 0x01	; 1
    141a:	3f c0       	rjmp	.+126    	; 0x149a <__stack+0x39b>
	  lcd_puts(buffer);
	}
	break;
      case USB:
	mode = CW;
    141c:	85 e0       	ldi	r24, 0x05	; 5
    141e:	80 93 30 02 	sts	0x0230, r24
	if(!updateSettings()) {
    1422:	0e 94 ef 05 	call	0xbde	; 0xbde <updateSettings>
    1426:	81 11       	cpse	r24, r1
    1428:	3e c0       	rjmp	.+124    	; 0x14a6 <__stack+0x3a7>
	  lcd_goto(0x00);
    142a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	  sprintf(buffer,"CW  ");
    142e:	6f e8       	ldi	r22, 0x8F	; 143
    1430:	71 e0       	ldi	r23, 0x01	; 1
    1432:	33 c0       	rjmp	.+102    	; 0x149a <__stack+0x39b>
	  lcd_puts(buffer);
	}
	break;
      case CW:
	mode = CWN;
    1434:	86 e0       	ldi	r24, 0x06	; 6
    1436:	80 93 30 02 	sts	0x0230, r24
	if(!updateSettings()) {
    143a:	0e 94 ef 05 	call	0xbde	; 0xbde <updateSettings>
    143e:	81 11       	cpse	r24, r1
    1440:	32 c0       	rjmp	.+100    	; 0x14a6 <__stack+0x3a7>
	  lcd_goto(0x00);
    1442:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	  sprintf(buffer,"CWN ");
    1446:	64 e9       	ldi	r22, 0x94	; 148
    1448:	71 e0       	ldi	r23, 0x01	; 1
    144a:	27 c0       	rjmp	.+78     	; 0x149a <__stack+0x39b>
	  lcd_puts(buffer);
	}
	break;
      case CWN:
	if (band < 200) {
    144c:	80 91 24 02 	lds	r24, 0x0224
    1450:	88 3c       	cpi	r24, 0xC8	; 200
    1452:	60 f4       	brcc	.+24     	; 0x146c <__stack+0x36d>
	  mode = AM;
    1454:	88 e0       	ldi	r24, 0x08	; 8
    1456:	80 93 30 02 	sts	0x0230, r24
	  if(!updateSettings()) {
    145a:	0e 94 ef 05 	call	0xbde	; 0xbde <updateSettings>
    145e:	81 11       	cpse	r24, r1
    1460:	22 c0       	rjmp	.+68     	; 0x14a6 <__stack+0x3a7>
	    lcd_goto(0x00);
    1462:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	    sprintf(buffer,"AM  ");
    1466:	69 e9       	ldi	r22, 0x99	; 153
    1468:	71 e0       	ldi	r23, 0x01	; 1
    146a:	17 c0       	rjmp	.+46     	; 0x149a <__stack+0x39b>
	    lcd_puts(buffer);
	  }
	}
	else {
	  mode = FM;
    146c:	8a e0       	ldi	r24, 0x0A	; 10
    146e:	80 93 30 02 	sts	0x0230, r24
	  if(!updateSettings()) {
    1472:	0e 94 ef 05 	call	0xbde	; 0xbde <updateSettings>
    1476:	81 11       	cpse	r24, r1
    1478:	16 c0       	rjmp	.+44     	; 0x14a6 <__stack+0x3a7>
	    lcd_goto(0x00);
    147a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	    sprintf(buffer,"FM  ");
    147e:	6e e9       	ldi	r22, 0x9E	; 158
    1480:	71 e0       	ldi	r23, 0x01	; 1
    1482:	0b c0       	rjmp	.+22     	; 0x149a <__stack+0x39b>
	}	  
	break;
      case AM:
      case FM:
      default:
	mode = LSB;
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	80 93 30 02 	sts	0x0230, r24
	if(!updateSettings()) { 
    148a:	0e 94 ef 05 	call	0xbde	; 0xbde <updateSettings>
    148e:	81 11       	cpse	r24, r1
    1490:	0a c0       	rjmp	.+20     	; 0x14a6 <__stack+0x3a7>
	  lcd_goto(0x00);
    1492:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	  sprintf(buffer,"LSB ");
    1496:	63 ea       	ldi	r22, 0xA3	; 163
    1498:	71 e0       	ldi	r23, 0x01	; 1
    149a:	c8 01       	movw	r24, r16
    149c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <strcpy>
	  lcd_puts(buffer);
    14a0:	c8 01       	movw	r24, r16
    14a2:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
    14a6:	83 e2       	ldi	r24, 0x23	; 35
    14a8:	94 ef       	ldi	r25, 0xF4	; 244
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <__stack+0x3ab>
    14ae:	00 c0       	rjmp	.+0      	; 0x14b0 <__stack+0x3b1>
    14b0:	00 00       	nop
	}
	break;
      }
      _delay_ms(250);
      err = updateFreq(1);  // To shift +/-
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <updateFreq>
      mode_flag = 0x00;
    14b8:	10 92 27 02 	sts	0x0227, r1
    }

    if (band_flag) {
    14bc:	80 91 29 02 	lds	r24, 0x0229
    14c0:	88 23       	and	r24, r24
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <__stack+0x3c7>
    14c4:	12 c1       	rjmp	.+548    	; 0x16ea <__stack+0x5eb>
      if (band_flag == 0x02) { // long press
    14c6:	80 91 29 02 	lds	r24, 0x0229
    14ca:	82 30       	cpi	r24, 0x02	; 2
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <__stack+0x3d1>
    14ce:	cd c0       	rjmp	.+410    	; 0x166a <__stack+0x56b>
	}
#endif
      }
      else {
#ifdef HF_HAM
	if (freq<3500)
    14d0:	60 91 2a 02 	lds	r22, 0x022A
    14d4:	70 91 2b 02 	lds	r23, 0x022B
    14d8:	80 91 2c 02 	lds	r24, 0x022C
    14dc:	90 91 2d 02 	lds	r25, 0x022D
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 ec       	ldi	r19, 0xC0	; 192
    14e4:	4a e5       	ldi	r20, 0x5A	; 90
    14e6:	55 e4       	ldi	r21, 0x45	; 69
    14e8:	0e 94 c1 11 	call	0x2382	; 0x2382 <__cmpsf2>
    14ec:	87 ff       	sbrs	r24, 7
    14ee:	09 c0       	rjmp	.+18     	; 0x1502 <__stack+0x403>
	  freq = 3510;
    14f0:	40 92 2a 02 	sts	0x022A, r4
    14f4:	50 92 2b 02 	sts	0x022B, r5
    14f8:	60 92 2c 02 	sts	0x022C, r6
    14fc:	70 92 2d 02 	sts	0x022D, r7
    1500:	b4 c0       	rjmp	.+360    	; 0x166a <__stack+0x56b>
	else if(freq<7000)
    1502:	60 91 2a 02 	lds	r22, 0x022A
    1506:	70 91 2b 02 	lds	r23, 0x022B
    150a:	80 91 2c 02 	lds	r24, 0x022C
    150e:	90 91 2d 02 	lds	r25, 0x022D
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 ec       	ldi	r19, 0xC0	; 192
    1516:	4a ed       	ldi	r20, 0xDA	; 218
    1518:	55 e4       	ldi	r21, 0x45	; 69
    151a:	0e 94 c1 11 	call	0x2382	; 0x2382 <__cmpsf2>
    151e:	87 ff       	sbrs	r24, 7
    1520:	05 c0       	rjmp	.+10     	; 0x152c <__stack+0x42d>
	  freq = 7010;
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e1       	ldi	r25, 0x10	; 16
    1526:	ab ed       	ldi	r26, 0xDB	; 219
    1528:	b5 e4       	ldi	r27, 0x45	; 69
    152a:	97 c0       	rjmp	.+302    	; 0x165a <__stack+0x55b>
	else if(freq<10100)
    152c:	60 91 2a 02 	lds	r22, 0x022A
    1530:	70 91 2b 02 	lds	r23, 0x022B
    1534:	80 91 2c 02 	lds	r24, 0x022C
    1538:	90 91 2d 02 	lds	r25, 0x022D
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 ed       	ldi	r19, 0xD0	; 208
    1540:	4d e1       	ldi	r20, 0x1D	; 29
    1542:	56 e4       	ldi	r21, 0x46	; 70
    1544:	0e 94 c1 11 	call	0x2382	; 0x2382 <__cmpsf2>
    1548:	87 ff       	sbrs	r24, 7
    154a:	05 c0       	rjmp	.+10     	; 0x1556 <__stack+0x457>
	  freq = 10110;
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	98 ef       	ldi	r25, 0xF8	; 248
    1550:	ad e1       	ldi	r26, 0x1D	; 29
    1552:	b6 e4       	ldi	r27, 0x46	; 70
    1554:	82 c0       	rjmp	.+260    	; 0x165a <__stack+0x55b>
	else if(freq<14000)
    1556:	60 91 2a 02 	lds	r22, 0x022A
    155a:	70 91 2b 02 	lds	r23, 0x022B
    155e:	80 91 2c 02 	lds	r24, 0x022C
    1562:	90 91 2d 02 	lds	r25, 0x022D
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 ec       	ldi	r19, 0xC0	; 192
    156a:	4a e5       	ldi	r20, 0x5A	; 90
    156c:	56 e4       	ldi	r21, 0x46	; 70
    156e:	0e 94 c1 11 	call	0x2382	; 0x2382 <__cmpsf2>
    1572:	87 ff       	sbrs	r24, 7
    1574:	05 c0       	rjmp	.+10     	; 0x1580 <__stack+0x481>
	  freq = 14010;
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	98 ee       	ldi	r25, 0xE8	; 232
    157a:	aa e5       	ldi	r26, 0x5A	; 90
    157c:	b6 e4       	ldi	r27, 0x46	; 70
    157e:	6d c0       	rjmp	.+218    	; 0x165a <__stack+0x55b>
	else if(freq<18068)
    1580:	60 91 2a 02 	lds	r22, 0x022A
    1584:	70 91 2b 02 	lds	r23, 0x022B
    1588:	80 91 2c 02 	lds	r24, 0x022C
    158c:	90 91 2d 02 	lds	r25, 0x022D
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	38 e2       	ldi	r19, 0x28	; 40
    1594:	4d e8       	ldi	r20, 0x8D	; 141
    1596:	56 e4       	ldi	r21, 0x46	; 70
    1598:	0e 94 c1 11 	call	0x2382	; 0x2382 <__cmpsf2>
    159c:	87 ff       	sbrs	r24, 7
    159e:	05 c0       	rjmp	.+10     	; 0x15aa <__stack+0x4ab>
	  freq = 18078;
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	9c e3       	ldi	r25, 0x3C	; 60
    15a4:	ad e8       	ldi	r26, 0x8D	; 141
    15a6:	b6 e4       	ldi	r27, 0x46	; 70
    15a8:	58 c0       	rjmp	.+176    	; 0x165a <__stack+0x55b>
	else if(freq<21000)
    15aa:	60 91 2a 02 	lds	r22, 0x022A
    15ae:	70 91 2b 02 	lds	r23, 0x022B
    15b2:	80 91 2c 02 	lds	r24, 0x022C
    15b6:	90 91 2d 02 	lds	r25, 0x022D
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e1       	ldi	r19, 0x10	; 16
    15be:	44 ea       	ldi	r20, 0xA4	; 164
    15c0:	56 e4       	ldi	r21, 0x46	; 70
    15c2:	0e 94 c1 11 	call	0x2382	; 0x2382 <__cmpsf2>
    15c6:	87 ff       	sbrs	r24, 7
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <__stack+0x4d5>
	  freq = 21010;
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	94 e2       	ldi	r25, 0x24	; 36
    15ce:	a4 ea       	ldi	r26, 0xA4	; 164
    15d0:	b6 e4       	ldi	r27, 0x46	; 70
    15d2:	43 c0       	rjmp	.+134    	; 0x165a <__stack+0x55b>
	else if(freq<24890)
    15d4:	60 91 2a 02 	lds	r22, 0x022A
    15d8:	70 91 2b 02 	lds	r23, 0x022B
    15dc:	80 91 2c 02 	lds	r24, 0x022C
    15e0:	90 91 2d 02 	lds	r25, 0x022D
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	34 e7       	ldi	r19, 0x74	; 116
    15e8:	42 ec       	ldi	r20, 0xC2	; 194
    15ea:	56 e4       	ldi	r21, 0x46	; 70
    15ec:	0e 94 c1 11 	call	0x2382	; 0x2382 <__cmpsf2>
    15f0:	87 ff       	sbrs	r24, 7
    15f2:	05 c0       	rjmp	.+10     	; 0x15fe <__stack+0x4ff>
	  freq = 24900;
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	98 e8       	ldi	r25, 0x88	; 136
    15f8:	a2 ec       	ldi	r26, 0xC2	; 194
    15fa:	b6 e4       	ldi	r27, 0x46	; 70
    15fc:	2e c0       	rjmp	.+92     	; 0x165a <__stack+0x55b>
	else if(freq<28000)
    15fe:	60 91 2a 02 	lds	r22, 0x022A
    1602:	70 91 2b 02 	lds	r23, 0x022B
    1606:	80 91 2c 02 	lds	r24, 0x022C
    160a:	90 91 2d 02 	lds	r25, 0x022D
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 ec       	ldi	r19, 0xC0	; 192
    1612:	4a ed       	ldi	r20, 0xDA	; 218
    1614:	56 e4       	ldi	r21, 0x46	; 70
    1616:	0e 94 c1 11 	call	0x2382	; 0x2382 <__cmpsf2>
    161a:	87 ff       	sbrs	r24, 7
    161c:	05 c0       	rjmp	.+10     	; 0x1628 <__stack+0x529>
	  freq = 28010;
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	94 ed       	ldi	r25, 0xD4	; 212
    1622:	aa ed       	ldi	r26, 0xDA	; 218
    1624:	b6 e4       	ldi	r27, 0x46	; 70
    1626:	19 c0       	rjmp	.+50     	; 0x165a <__stack+0x55b>
	else if(freq<28500)
    1628:	60 91 2a 02 	lds	r22, 0x022A
    162c:	70 91 2b 02 	lds	r23, 0x022B
    1630:	80 91 2c 02 	lds	r24, 0x022C
    1634:	90 91 2d 02 	lds	r25, 0x022D
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	38 ea       	ldi	r19, 0xA8	; 168
    163c:	4e ed       	ldi	r20, 0xDE	; 222
    163e:	56 e4       	ldi	r21, 0x46	; 70
    1640:	0e 94 c1 11 	call	0x2382	; 0x2382 <__cmpsf2>
    1644:	87 ff       	sbrs	r24, 7
    1646:	05 c0       	rjmp	.+10     	; 0x1652 <__stack+0x553>
	  freq = 28600;
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e7       	ldi	r25, 0x70	; 112
    164c:	af ed       	ldi	r26, 0xDF	; 223
    164e:	b6 e4       	ldi	r27, 0x46	; 70
    1650:	04 c0       	rjmp	.+8      	; 0x165a <__stack+0x55b>
	else
	  freq = 1810;
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e4       	ldi	r25, 0x40	; 64
    1656:	a2 ee       	ldi	r26, 0xE2	; 226
    1658:	b4 e4       	ldi	r27, 0x44	; 68
    165a:	80 93 2a 02 	sts	0x022A, r24
    165e:	90 93 2b 02 	sts	0x022B, r25
    1662:	a0 93 2c 02 	sts	0x022C, r26
    1666:	b0 93 2d 02 	sts	0x022D, r27
      else if(freq<150000)
	freq = 144200;
#endif
      }

      lcd_freq();
    166a:	0e 94 0c 04 	call	0x818	; 0x818 <lcd_freq>
      err = updateFreq(1);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	0e 94 fd 04 	call	0x9fa	; 0x9fa <updateFreq>
      if (err) {
    1674:	88 23       	and	r24, r24
    1676:	b1 f0       	breq	.+44     	; 0x16a4 <__stack+0x5a5>
	sprintf(buffer,"Err freq %x         ",err);
    1678:	1f 92       	push	r1
    167a:	8f 93       	push	r24
    167c:	88 ea       	ldi	r24, 0xA8	; 168
    167e:	91 e0       	ldi	r25, 0x01	; 1
    1680:	9f 93       	push	r25
    1682:	8f 93       	push	r24
    1684:	1f 93       	push	r17
    1686:	0f 93       	push	r16
    1688:	0e 94 91 15 	call	0x2b22	; 0x2b22 <sprintf>
	lcd_goto(0x40);
    168c:	80 e4       	ldi	r24, 0x40	; 64
    168e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	lcd_puts(buffer);	
    1692:	c8 01       	movw	r24, r16
    1694:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
      }      
      err = updateSettings();
    16a4:	0e 94 ef 05 	call	0xbde	; 0xbde <updateSettings>
      if (err) {
    16a8:	88 23       	and	r24, r24
    16aa:	b1 f0       	breq	.+44     	; 0x16d8 <__stack+0x5d9>
	sprintf(buffer,"Err sett %x         ",err);
    16ac:	1f 92       	push	r1
    16ae:	8f 93       	push	r24
    16b0:	8d eb       	ldi	r24, 0xBD	; 189
    16b2:	91 e0       	ldi	r25, 0x01	; 1
    16b4:	9f 93       	push	r25
    16b6:	8f 93       	push	r24
    16b8:	1f 93       	push	r17
    16ba:	0f 93       	push	r16
    16bc:	0e 94 91 15 	call	0x2b22	; 0x2b22 <sprintf>
	lcd_goto(0x40);
    16c0:	80 e4       	ldi	r24, 0x40	; 64
    16c2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	lcd_puts(buffer);	
    16c6:	c8 01       	movw	r24, r16
    16c8:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	af e4       	ldi	r26, 0x4F	; 79
    16da:	b3 ec       	ldi	r27, 0xC3	; 195
    16dc:	11 97       	sbiw	r26, 0x01	; 1
    16de:	f1 f7       	brne	.-4      	; 0x16dc <__stack+0x5dd>
    16e0:	00 c0       	rjmp	.+0      	; 0x16e2 <__stack+0x5e3>
    16e2:	00 00       	nop
      }      
      _delay_ms(200);
      band_flag = 0x00;
    16e4:	10 92 29 02 	sts	0x0229, r1
    16e8:	24 cd       	rjmp	.-1464   	; 0x1132 <__stack+0x33>
    }
    else if (rot_flag) {
    16ea:	80 91 2e 02 	lds	r24, 0x022E
    16ee:	88 23       	and	r24, r24
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <__stack+0x5f5>
    16f2:	ae c1       	rjmp	.+860    	; 0x1a50 <__stack+0x951>
      if (rot_flag != last_dir) {
    16f4:	80 91 2e 02 	lds	r24, 0x022E
    16f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    16fa:	8b 17       	cp	r24, r27
    16fc:	49 f0       	breq	.+18     	; 0x1710 <__stack+0x611>
	steps = 0;
	step_timer = 0;
    16fe:	10 92 35 02 	sts	0x0235, r1
    1702:	10 92 34 02 	sts	0x0234, r1
	last_dir = rot_flag;
    1706:	80 91 2e 02 	lds	r24, 0x022E
      _delay_ms(200);
      band_flag = 0x00;
    }
    else if (rot_flag) {
      if (rot_flag != last_dir) {
	steps = 0;
    170a:	c1 2c       	mov	r12, r1
    170c:	d1 2c       	mov	r13, r1
    170e:	9c c1       	rjmp	.+824    	; 0x1a48 <__stack+0x949>
	step_timer = 0;
	last_dir = rot_flag;
      }
      else if (rot_flag == 0x01) {
    1710:	90 91 2e 02 	lds	r25, 0x022E
    1714:	91 30       	cpi	r25, 0x01	; 1
    1716:	09 f0       	breq	.+2      	; 0x171a <__stack+0x61b>
    1718:	c5 c0       	rjmp	.+394    	; 0x18a4 <__stack+0x7a5>
	if (step_timer < 30) {
    171a:	80 91 34 02 	lds	r24, 0x0234
    171e:	90 91 35 02 	lds	r25, 0x0235
	  step_timer = 0;
    1722:	10 92 35 02 	sts	0x0235, r1
    1726:	10 92 34 02 	sts	0x0234, r1
	steps = 0;
	step_timer = 0;
	last_dir = rot_flag;
      }
      else if (rot_flag == 0x01) {
	if (step_timer < 30) {
    172a:	4e 97       	sbiw	r24, 0x1e	; 30
    172c:	48 f4       	brcc	.+18     	; 0x1740 <__stack+0x641>
	  step_timer = 0;
	  steps ++;
    172e:	2f ef       	ldi	r18, 0xFF	; 255
    1730:	c2 1a       	sub	r12, r18
    1732:	d2 0a       	sbc	r13, r18
	else {
	  step_timer = 0;
	  steps = 1;
	}
	
	if (steps > 500) {
    1734:	85 ef       	ldi	r24, 0xF5	; 245
    1736:	c8 16       	cp	r12, r24
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	d8 06       	cpc	r13, r24
    173c:	28 f4       	brcc	.+10     	; 0x1748 <__stack+0x649>
    173e:	27 c0       	rjmp	.+78     	; 0x178e <__stack+0x68f>
	  step_timer = 0;
	  steps ++;
	}
	else {
	  step_timer = 0;
	  steps = 1;
    1740:	cc 24       	eor	r12, r12
    1742:	c3 94       	inc	r12
    1744:	d1 2c       	mov	r13, r1
    1746:	56 c0       	rjmp	.+172    	; 0x17f4 <__stack+0x6f5>
	}
	
	if (steps > 500) {
	  if (mode == AM)
    1748:	80 91 30 02 	lds	r24, 0x0230
    174c:	88 30       	cpi	r24, 0x08	; 8
    174e:	69 f4       	brne	.+26     	; 0x176a <__stack+0x66b>
	    freq += 20;
    1750:	60 91 2a 02 	lds	r22, 0x022A
    1754:	70 91 2b 02 	lds	r23, 0x022B
    1758:	80 91 2c 02 	lds	r24, 0x022C
    175c:	90 91 2d 02 	lds	r25, 0x022D
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 ea       	ldi	r20, 0xA0	; 160
    1766:	51 e4       	ldi	r21, 0x41	; 65
    1768:	91 c0       	rjmp	.+290    	; 0x188c <__stack+0x78d>
	  else if (mode == FM)
    176a:	80 91 30 02 	lds	r24, 0x0230
    176e:	8a 30       	cpi	r24, 0x0A	; 10
    1770:	09 f0       	breq	.+2      	; 0x1774 <__stack+0x675>
    1772:	46 c0       	rjmp	.+140    	; 0x1800 <__stack+0x701>
	    freq += 50;
    1774:	60 91 2a 02 	lds	r22, 0x022A
    1778:	70 91 2b 02 	lds	r23, 0x022B
    177c:	80 91 2c 02 	lds	r24, 0x022C
    1780:	90 91 2d 02 	lds	r25, 0x022D
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	48 e4       	ldi	r20, 0x48	; 72
    178a:	52 e4       	ldi	r21, 0x42	; 66
    178c:	7f c0       	rjmp	.+254    	; 0x188c <__stack+0x78d>
	  else
	    freq += 1;
	}
	else if (steps > 150) {
    178e:	97 e9       	ldi	r25, 0x97	; 151
    1790:	c9 16       	cp	r12, r25
    1792:	d1 04       	cpc	r13, r1
    1794:	78 f1       	brcs	.+94     	; 0x17f4 <__stack+0x6f5>
	  if (mode == AM)
    1796:	80 91 30 02 	lds	r24, 0x0230
    179a:	88 30       	cpi	r24, 0x08	; 8
    179c:	69 f4       	brne	.+26     	; 0x17b8 <__stack+0x6b9>
	    freq += 5;
    179e:	60 91 2a 02 	lds	r22, 0x022A
    17a2:	70 91 2b 02 	lds	r23, 0x022B
    17a6:	80 91 2c 02 	lds	r24, 0x022C
    17aa:	90 91 2d 02 	lds	r25, 0x022D
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 ea       	ldi	r20, 0xA0	; 160
    17b4:	50 e4       	ldi	r21, 0x40	; 64
    17b6:	6a c0       	rjmp	.+212    	; 0x188c <__stack+0x78d>
	  else if (mode == FM)
    17b8:	80 91 30 02 	lds	r24, 0x0230
    17bc:	8a 30       	cpi	r24, 0x0A	; 10
    17be:	69 f4       	brne	.+26     	; 0x17da <__stack+0x6db>
	    freq += 25;
    17c0:	60 91 2a 02 	lds	r22, 0x022A
    17c4:	70 91 2b 02 	lds	r23, 0x022B
    17c8:	80 91 2c 02 	lds	r24, 0x022C
    17cc:	90 91 2d 02 	lds	r25, 0x022D
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	48 ec       	ldi	r20, 0xC8	; 200
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	59 c0       	rjmp	.+178    	; 0x188c <__stack+0x78d>
	  else
	    freq += 0.5;
    17da:	60 91 2a 02 	lds	r22, 0x022A
    17de:	70 91 2b 02 	lds	r23, 0x022B
    17e2:	80 91 2c 02 	lds	r24, 0x022C
    17e6:	90 91 2d 02 	lds	r25, 0x022D
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	5f e3       	ldi	r21, 0x3F	; 63
    17f2:	4c c0       	rjmp	.+152    	; 0x188c <__stack+0x78d>
	}
	else {
	  if (mode == AM) {
    17f4:	80 91 30 02 	lds	r24, 0x0230
    17f8:	88 30       	cpi	r24, 0x08	; 8
    17fa:	e1 f4       	brne	.+56     	; 0x1834 <__stack+0x735>
	    if (PINE & (1 << ROT_BUTTON)) 
    17fc:	0b 9b       	sbis	0x01, 3	; 1
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <__stack+0x71b>
		freq += 1;
    1800:	60 91 2a 02 	lds	r22, 0x022A
    1804:	70 91 2b 02 	lds	r23, 0x022B
    1808:	80 91 2c 02 	lds	r24, 0x022C
    180c:	90 91 2d 02 	lds	r25, 0x022D
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	39 c0       	rjmp	.+114    	; 0x188c <__stack+0x78d>
	    else
	      freq += 10;
    181a:	60 91 2a 02 	lds	r22, 0x022A
    181e:	70 91 2b 02 	lds	r23, 0x022B
    1822:	80 91 2c 02 	lds	r24, 0x022C
    1826:	90 91 2d 02 	lds	r25, 0x022D
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e2       	ldi	r20, 0x20	; 32
    1830:	51 e4       	ldi	r21, 0x41	; 65
    1832:	2c c0       	rjmp	.+88     	; 0x188c <__stack+0x78d>
	  }
	  else if (mode == FM)
    1834:	80 91 30 02 	lds	r24, 0x0230
    1838:	8a 30       	cpi	r24, 0x0A	; 10
    183a:	69 f4       	brne	.+26     	; 0x1856 <__stack+0x757>
	    freq += 2.5;
    183c:	60 91 2a 02 	lds	r22, 0x022A
    1840:	70 91 2b 02 	lds	r23, 0x022B
    1844:	80 91 2c 02 	lds	r24, 0x022C
    1848:	90 91 2d 02 	lds	r25, 0x022D
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	40 e2       	ldi	r20, 0x20	; 32
    1852:	50 e4       	ldi	r21, 0x40	; 64
    1854:	1b c0       	rjmp	.+54     	; 0x188c <__stack+0x78d>
	  else {
	    if (PINE & (1 << ROT_BUTTON)) 
    1856:	0b 9b       	sbis	0x01, 3	; 1
    1858:	0d c0       	rjmp	.+26     	; 0x1874 <__stack+0x775>
		freq += 0.05;
    185a:	60 91 2a 02 	lds	r22, 0x022A
    185e:	70 91 2b 02 	lds	r23, 0x022B
    1862:	80 91 2c 02 	lds	r24, 0x022C
    1866:	90 91 2d 02 	lds	r25, 0x022D
    186a:	2d ec       	ldi	r18, 0xCD	; 205
    186c:	3c ec       	ldi	r19, 0xCC	; 204
    186e:	4c e4       	ldi	r20, 0x4C	; 76
    1870:	5d e3       	ldi	r21, 0x3D	; 61
    1872:	0c c0       	rjmp	.+24     	; 0x188c <__stack+0x78d>
	    else
	      freq += 2;
    1874:	60 91 2a 02 	lds	r22, 0x022A
    1878:	70 91 2b 02 	lds	r23, 0x022B
    187c:	80 91 2c 02 	lds	r24, 0x022C
    1880:	90 91 2d 02 	lds	r25, 0x022D
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	50 e4       	ldi	r21, 0x40	; 64
    188c:	0e 94 55 11 	call	0x22aa	; 0x22aa <__addsf3>
    1890:	60 93 2a 02 	sts	0x022A, r22
    1894:	70 93 2b 02 	sts	0x022B, r23
    1898:	80 93 2c 02 	sts	0x022C, r24
    189c:	90 93 2d 02 	sts	0x022D, r25
	  }
	}
	last_dir = 0x01;
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	d2 c0       	rjmp	.+420    	; 0x1a48 <__stack+0x949>
      }
      else if (rot_flag == 0x02) {
    18a4:	90 91 2e 02 	lds	r25, 0x022E
    18a8:	92 30       	cpi	r25, 0x02	; 2
    18aa:	09 f0       	breq	.+2      	; 0x18ae <__stack+0x7af>
    18ac:	cd c0       	rjmp	.+410    	; 0x1a48 <__stack+0x949>
	if ((step_timer < 30) && (last_dir == rot_flag)) {
    18ae:	80 91 34 02 	lds	r24, 0x0234
    18b2:	90 91 35 02 	lds	r25, 0x0235
    18b6:	4e 97       	sbiw	r24, 0x1e	; 30
    18b8:	90 f4       	brcc	.+36     	; 0x18de <__stack+0x7df>
    18ba:	80 91 2e 02 	lds	r24, 0x022E
    18be:	af ad       	ldd	r26, Y+63	; 0x3f
    18c0:	a8 13       	cpse	r26, r24
    18c2:	0d c0       	rjmp	.+26     	; 0x18de <__stack+0x7df>
	  step_timer = 0;
    18c4:	10 92 35 02 	sts	0x0235, r1
    18c8:	10 92 34 02 	sts	0x0234, r1
	  steps ++;
    18cc:	bf ef       	ldi	r27, 0xFF	; 255
    18ce:	cb 1a       	sub	r12, r27
    18d0:	db 0a       	sbc	r13, r27
	else {
	  step_timer = 0;
	  steps = 1;
	}
	
	if (steps > 500) {
    18d2:	25 ef       	ldi	r18, 0xF5	; 245
    18d4:	c2 16       	cp	r12, r18
    18d6:	21 e0       	ldi	r18, 0x01	; 1
    18d8:	d2 06       	cpc	r13, r18
    18da:	48 f4       	brcc	.+18     	; 0x18ee <__stack+0x7ef>
    18dc:	2b c0       	rjmp	.+86     	; 0x1934 <__stack+0x835>
	if ((step_timer < 30) && (last_dir == rot_flag)) {
	  step_timer = 0;
	  steps ++;
	}
	else {
	  step_timer = 0;
    18de:	10 92 35 02 	sts	0x0235, r1
    18e2:	10 92 34 02 	sts	0x0234, r1
	  steps = 1;
    18e6:	cc 24       	eor	r12, r12
    18e8:	c3 94       	inc	r12
    18ea:	d1 2c       	mov	r13, r1
    18ec:	56 c0       	rjmp	.+172    	; 0x199a <__stack+0x89b>
	}
	
	if (steps > 500) {
	  if (mode == AM)
    18ee:	80 91 30 02 	lds	r24, 0x0230
    18f2:	88 30       	cpi	r24, 0x08	; 8
    18f4:	69 f4       	brne	.+26     	; 0x1910 <__stack+0x811>
	    freq -= 20;
    18f6:	60 91 2a 02 	lds	r22, 0x022A
    18fa:	70 91 2b 02 	lds	r23, 0x022B
    18fe:	80 91 2c 02 	lds	r24, 0x022C
    1902:	90 91 2d 02 	lds	r25, 0x022D
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 ea       	ldi	r20, 0xA0	; 160
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	91 c0       	rjmp	.+290    	; 0x1a32 <__stack+0x933>
	  else if (mode == FM)
    1910:	80 91 30 02 	lds	r24, 0x0230
    1914:	8a 30       	cpi	r24, 0x0A	; 10
    1916:	09 f0       	breq	.+2      	; 0x191a <__stack+0x81b>
    1918:	46 c0       	rjmp	.+140    	; 0x19a6 <__stack+0x8a7>
	    freq -= 50;
    191a:	60 91 2a 02 	lds	r22, 0x022A
    191e:	70 91 2b 02 	lds	r23, 0x022B
    1922:	80 91 2c 02 	lds	r24, 0x022C
    1926:	90 91 2d 02 	lds	r25, 0x022D
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	48 e4       	ldi	r20, 0x48	; 72
    1930:	52 e4       	ldi	r21, 0x42	; 66
    1932:	7f c0       	rjmp	.+254    	; 0x1a32 <__stack+0x933>
	  else
	    freq -= 1;
	}
	else if (steps > 150) {
    1934:	87 e9       	ldi	r24, 0x97	; 151
    1936:	c8 16       	cp	r12, r24
    1938:	d1 04       	cpc	r13, r1
    193a:	78 f1       	brcs	.+94     	; 0x199a <__stack+0x89b>
	  if (mode == AM)
    193c:	80 91 30 02 	lds	r24, 0x0230
    1940:	88 30       	cpi	r24, 0x08	; 8
    1942:	69 f4       	brne	.+26     	; 0x195e <__stack+0x85f>
	    freq -= 5;
    1944:	60 91 2a 02 	lds	r22, 0x022A
    1948:	70 91 2b 02 	lds	r23, 0x022B
    194c:	80 91 2c 02 	lds	r24, 0x022C
    1950:	90 91 2d 02 	lds	r25, 0x022D
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	40 ea       	ldi	r20, 0xA0	; 160
    195a:	50 e4       	ldi	r21, 0x40	; 64
    195c:	6a c0       	rjmp	.+212    	; 0x1a32 <__stack+0x933>
	  else if (mode == FM)
    195e:	80 91 30 02 	lds	r24, 0x0230
    1962:	8a 30       	cpi	r24, 0x0A	; 10
    1964:	69 f4       	brne	.+26     	; 0x1980 <__stack+0x881>
	    freq -= 25;
    1966:	60 91 2a 02 	lds	r22, 0x022A
    196a:	70 91 2b 02 	lds	r23, 0x022B
    196e:	80 91 2c 02 	lds	r24, 0x022C
    1972:	90 91 2d 02 	lds	r25, 0x022D
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	48 ec       	ldi	r20, 0xC8	; 200
    197c:	51 e4       	ldi	r21, 0x41	; 65
    197e:	59 c0       	rjmp	.+178    	; 0x1a32 <__stack+0x933>
	  else
	    freq -= 0.5;
    1980:	60 91 2a 02 	lds	r22, 0x022A
    1984:	70 91 2b 02 	lds	r23, 0x022B
    1988:	80 91 2c 02 	lds	r24, 0x022C
    198c:	90 91 2d 02 	lds	r25, 0x022D
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	4c c0       	rjmp	.+152    	; 0x1a32 <__stack+0x933>
	}
	else {
	  if (mode == AM) {
    199a:	80 91 30 02 	lds	r24, 0x0230
    199e:	88 30       	cpi	r24, 0x08	; 8
    19a0:	e1 f4       	brne	.+56     	; 0x19da <__stack+0x8db>
	    if (PINE & (1 << ROT_BUTTON)) 
    19a2:	0b 9b       	sbis	0x01, 3	; 1
    19a4:	0d c0       	rjmp	.+26     	; 0x19c0 <__stack+0x8c1>
		freq -= 1;
    19a6:	60 91 2a 02 	lds	r22, 0x022A
    19aa:	70 91 2b 02 	lds	r23, 0x022B
    19ae:	80 91 2c 02 	lds	r24, 0x022C
    19b2:	90 91 2d 02 	lds	r25, 0x022D
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	39 c0       	rjmp	.+114    	; 0x1a32 <__stack+0x933>
	    else
	      freq -= 10;
    19c0:	60 91 2a 02 	lds	r22, 0x022A
    19c4:	70 91 2b 02 	lds	r23, 0x022B
    19c8:	80 91 2c 02 	lds	r24, 0x022C
    19cc:	90 91 2d 02 	lds	r25, 0x022D
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e2       	ldi	r20, 0x20	; 32
    19d6:	51 e4       	ldi	r21, 0x41	; 65
    19d8:	2c c0       	rjmp	.+88     	; 0x1a32 <__stack+0x933>
	  }
	  else if (mode == FM)
    19da:	80 91 30 02 	lds	r24, 0x0230
    19de:	8a 30       	cpi	r24, 0x0A	; 10
    19e0:	69 f4       	brne	.+26     	; 0x19fc <__stack+0x8fd>
	    freq -= 2.5;
    19e2:	60 91 2a 02 	lds	r22, 0x022A
    19e6:	70 91 2b 02 	lds	r23, 0x022B
    19ea:	80 91 2c 02 	lds	r24, 0x022C
    19ee:	90 91 2d 02 	lds	r25, 0x022D
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	50 e4       	ldi	r21, 0x40	; 64
    19fa:	1b c0       	rjmp	.+54     	; 0x1a32 <__stack+0x933>
	  else {
	    if (PINE & (1 << ROT_BUTTON)) 
    19fc:	0b 9b       	sbis	0x01, 3	; 1
    19fe:	0d c0       	rjmp	.+26     	; 0x1a1a <__stack+0x91b>
		freq -= 0.05;
    1a00:	60 91 2a 02 	lds	r22, 0x022A
    1a04:	70 91 2b 02 	lds	r23, 0x022B
    1a08:	80 91 2c 02 	lds	r24, 0x022C
    1a0c:	90 91 2d 02 	lds	r25, 0x022D
    1a10:	2d ec       	ldi	r18, 0xCD	; 205
    1a12:	3c ec       	ldi	r19, 0xCC	; 204
    1a14:	4c e4       	ldi	r20, 0x4C	; 76
    1a16:	5d e3       	ldi	r21, 0x3D	; 61
    1a18:	0c c0       	rjmp	.+24     	; 0x1a32 <__stack+0x933>
	    else
	      freq -= 2;
    1a1a:	60 91 2a 02 	lds	r22, 0x022A
    1a1e:	70 91 2b 02 	lds	r23, 0x022B
    1a22:	80 91 2c 02 	lds	r24, 0x022C
    1a26:	90 91 2d 02 	lds	r25, 0x022D
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	50 e4       	ldi	r21, 0x40	; 64
    1a32:	0e 94 54 11 	call	0x22a8	; 0x22a8 <__subsf3>
    1a36:	60 93 2a 02 	sts	0x022A, r22
    1a3a:	70 93 2b 02 	sts	0x022B, r23
    1a3e:	80 93 2c 02 	sts	0x022C, r24
    1a42:	90 93 2d 02 	sts	0x022D, r25
	  }
	}
      last_dir = 0x02;
    1a46:	82 e0       	ldi	r24, 0x02	; 2
      }
      //_delay_ms(30);

      rot_flag = 0x00;
    1a48:	10 92 2e 02 	sts	0x022E, r1
    1a4c:	8f af       	std	Y+63, r24	; 0x3f
    1a4e:	71 cb       	rjmp	.-2334   	; 0x1132 <__stack+0x33>
    }
    else if (vol_flag) {
    1a50:	80 91 2f 02 	lds	r24, 0x022F
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <__stack+0x95b>
    1a58:	6c cb       	rjmp	.-2344   	; 0x1132 <__stack+0x33>
      if (vol_timer > 1) {
    1a5a:	80 91 00 01 	lds	r24, 0x0100
    1a5e:	82 30       	cpi	r24, 0x02	; 2
    1a60:	08 f4       	brcc	.+2      	; 0x1a64 <__stack+0x965>
    1a62:	7a c0       	rjmp	.+244    	; 0x1b58 <__stack+0xa59>
	if (PINF & (1 << SQUELCH_BUTTON)) {
    1a64:	04 9b       	sbis	0x00, 4	; 0
    1a66:	35 c0       	rjmp	.+106    	; 0x1ad2 <__stack+0x9d3>
	    if (vol_flag == 0x01) {
    1a68:	80 91 2f 02 	lds	r24, 0x022F
    1a6c:	81 30       	cpi	r24, 0x01	; 1
    1a6e:	29 f4       	brne	.+10     	; 0x1a7a <__stack+0x97b>
	      if(vol<31)
    1a70:	9e e1       	ldi	r25, 0x1E	; 30
    1a72:	9a 15       	cp	r25, r10
    1a74:	40 f0       	brcs	.+16     	; 0x1a86 <__stack+0x987>
		vol ++; // Higher means lower 
    1a76:	a3 94       	inc	r10
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <__stack+0x987>
	      sprintf(buffer,"Vol %d    ", 31-vol);
	      lcd_goto(0x40);
	      lcd_puts(buffer);
	    }
	    else if (vol_flag == 0x02) {
    1a7a:	80 91 2f 02 	lds	r24, 0x022F
    1a7e:	82 30       	cpi	r24, 0x02	; 2
    1a80:	e1 f4       	brne	.+56     	; 0x1aba <__stack+0x9bb>
	      if(vol>0)
    1a82:	a1 10       	cpse	r10, r1
		vol --;
    1a84:	aa 94       	dec	r10
	      sprintf(buffer,"Vol %d    ", 31-vol);
    1a86:	8f e1       	ldi	r24, 0x1F	; 31
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	8a 19       	sub	r24, r10
    1a8c:	91 09       	sbc	r25, r1
    1a8e:	9f 93       	push	r25
    1a90:	8f 93       	push	r24
    1a92:	82 ed       	ldi	r24, 0xD2	; 210
    1a94:	91 e0       	ldi	r25, 0x01	; 1
    1a96:	9f 93       	push	r25
    1a98:	8f 93       	push	r24
    1a9a:	1f 93       	push	r17
    1a9c:	0f 93       	push	r16
    1a9e:	0e 94 91 15 	call	0x2b22	; 0x2b22 <sprintf>
	      lcd_goto(0x40);
    1aa2:	80 e4       	ldi	r24, 0x40	; 64
    1aa4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	      lcd_puts(buffer);
    1aa8:	c8 01       	movw	r24, r16
    1aaa:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
	    }
	    
	    err = updateVolumeSquelch(vol, squelch);
    1aba:	6b 2d       	mov	r22, r11
    1abc:	8a 2d       	mov	r24, r10
    1abe:	0e 94 bc 04 	call	0x978	; 0x978 <updateVolumeSquelch>
	    
	    if (err) {
    1ac2:	88 23       	and	r24, r24
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <__stack+0x9c9>
    1ac6:	46 c0       	rjmp	.+140    	; 0x1b54 <__stack+0xa55>
	      sprintf(buffer,"Err Vol %x         ",err);
    1ac8:	1f 92       	push	r1
    1aca:	8f 93       	push	r24
    1acc:	8d ed       	ldi	r24, 0xDD	; 221
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	2f c0       	rjmp	.+94     	; 0x1b30 <__stack+0xa31>
	      lcd_goto(0x40);
	      lcd_puts(buffer);	
	    }      
	  }
	  else {
	    if (vol_flag == 0x02) {
    1ad2:	80 91 2f 02 	lds	r24, 0x022F
    1ad6:	82 30       	cpi	r24, 0x02	; 2
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <__stack+0x9e5>
	      if(squelch<31)
    1ada:	ae e1       	ldi	r26, 0x1E	; 30
    1adc:	ab 15       	cp	r26, r11
    1ade:	40 f0       	brcs	.+16     	; 0x1af0 <__stack+0x9f1>
		squelch ++; 
    1ae0:	b3 94       	inc	r11
    1ae2:	06 c0       	rjmp	.+12     	; 0x1af0 <__stack+0x9f1>
	      sprintf(buffer,"Sq %d    ", squelch);
	      lcd_goto(0x40);
	      lcd_puts(buffer);
	    }
	    else if (vol_flag == 0x01) {
    1ae4:	80 91 2f 02 	lds	r24, 0x022F
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	c1 f4       	brne	.+48     	; 0x1b1c <__stack+0xa1d>
	      if(squelch>0)
    1aec:	b1 10       	cpse	r11, r1
		squelch --;
    1aee:	ba 94       	dec	r11
	      sprintf(buffer,"Sq %d    ", squelch);
    1af0:	1f 92       	push	r1
    1af2:	bf 92       	push	r11
    1af4:	81 ef       	ldi	r24, 0xF1	; 241
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	9f 93       	push	r25
    1afa:	8f 93       	push	r24
    1afc:	1f 93       	push	r17
    1afe:	0f 93       	push	r16
    1b00:	0e 94 91 15 	call	0x2b22	; 0x2b22 <sprintf>
	      lcd_goto(0x40);
    1b04:	80 e4       	ldi	r24, 0x40	; 64
    1b06:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	      lcd_puts(buffer);
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
	    }
	    
	    err = updateVolumeSquelch(vol, squelch);
    1b1c:	6b 2d       	mov	r22, r11
    1b1e:	8a 2d       	mov	r24, r10
    1b20:	0e 94 bc 04 	call	0x978	; 0x978 <updateVolumeSquelch>
	    
	    if (err) {
    1b24:	88 23       	and	r24, r24
    1b26:	b1 f0       	breq	.+44     	; 0x1b54 <__stack+0xa55>
	      sprintf(buffer,"Err Sq %x         ",err);
    1b28:	1f 92       	push	r1
    1b2a:	8f 93       	push	r24
    1b2c:	8b ef       	ldi	r24, 0xFB	; 251
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	9f 93       	push	r25
    1b32:	8f 93       	push	r24
    1b34:	1f 93       	push	r17
    1b36:	0f 93       	push	r16
    1b38:	0e 94 91 15 	call	0x2b22	; 0x2b22 <sprintf>
	      lcd_goto(0x40);
    1b3c:	80 e4       	ldi	r24, 0x40	; 64
    1b3e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <lcd_goto>
	      lcd_puts(buffer);	
    1b42:	c8 01       	movw	r24, r16
    1b44:	0e 94 68 07 	call	0xed0	; 0xed0 <lcd_puts>
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
	    }      
	  }
	vol_timer = 0;
    1b54:	10 92 00 01 	sts	0x0100, r1
      }
      vol_flag = 0x00;
    1b58:	10 92 2f 02 	sts	0x022F, r1
    1b5c:	ea ca       	rjmp	.-2604   	; 0x1132 <__stack+0x33>

00001b5e <vfprintf>:
    1b5e:	2f 92       	push	r2
    1b60:	3f 92       	push	r3
    1b62:	4f 92       	push	r4
    1b64:	5f 92       	push	r5
    1b66:	6f 92       	push	r6
    1b68:	7f 92       	push	r7
    1b6a:	8f 92       	push	r8
    1b6c:	9f 92       	push	r9
    1b6e:	af 92       	push	r10
    1b70:	bf 92       	push	r11
    1b72:	cf 92       	push	r12
    1b74:	df 92       	push	r13
    1b76:	ef 92       	push	r14
    1b78:	ff 92       	push	r15
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	63 97       	sbiw	r28, 0x13	; 19
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	6c 01       	movw	r12, r24
    1b94:	4b 01       	movw	r8, r22
    1b96:	2a 01       	movw	r4, r20
    1b98:	fc 01       	movw	r30, r24
    1b9a:	17 82       	std	Z+7, r1	; 0x07
    1b9c:	16 82       	std	Z+6, r1	; 0x06
    1b9e:	83 81       	ldd	r24, Z+3	; 0x03
    1ba0:	81 ff       	sbrs	r24, 1
    1ba2:	43 c3       	rjmp	.+1670   	; 0x222a <vfprintf+0x6cc>
    1ba4:	ae 01       	movw	r20, r28
    1ba6:	4f 5f       	subi	r20, 0xFF	; 255
    1ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    1baa:	3a 01       	movw	r6, r20
    1bac:	f6 01       	movw	r30, r12
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	f4 01       	movw	r30, r8
    1bb2:	93 fd       	sbrc	r25, 3
    1bb4:	85 91       	lpm	r24, Z+
    1bb6:	93 ff       	sbrs	r25, 3
    1bb8:	81 91       	ld	r24, Z+
    1bba:	4f 01       	movw	r8, r30
    1bbc:	88 23       	and	r24, r24
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <vfprintf+0x64>
    1bc0:	30 c3       	rjmp	.+1632   	; 0x2222 <vfprintf+0x6c4>
    1bc2:	85 32       	cpi	r24, 0x25	; 37
    1bc4:	39 f4       	brne	.+14     	; 0x1bd4 <vfprintf+0x76>
    1bc6:	93 fd       	sbrc	r25, 3
    1bc8:	85 91       	lpm	r24, Z+
    1bca:	93 ff       	sbrs	r25, 3
    1bcc:	81 91       	ld	r24, Z+
    1bce:	4f 01       	movw	r8, r30
    1bd0:	85 32       	cpi	r24, 0x25	; 37
    1bd2:	39 f4       	brne	.+14     	; 0x1be2 <vfprintf+0x84>
    1bd4:	b6 01       	movw	r22, r12
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1bdc:	52 01       	movw	r10, r4
    1bde:	25 01       	movw	r4, r10
    1be0:	e5 cf       	rjmp	.-54     	; 0x1bac <vfprintf+0x4e>
    1be2:	10 e0       	ldi	r17, 0x00	; 0
    1be4:	f1 2c       	mov	r15, r1
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	20 32       	cpi	r18, 0x20	; 32
    1bea:	a0 f4       	brcc	.+40     	; 0x1c14 <vfprintf+0xb6>
    1bec:	8b 32       	cpi	r24, 0x2B	; 43
    1bee:	69 f0       	breq	.+26     	; 0x1c0a <vfprintf+0xac>
    1bf0:	30 f4       	brcc	.+12     	; 0x1bfe <vfprintf+0xa0>
    1bf2:	80 32       	cpi	r24, 0x20	; 32
    1bf4:	59 f0       	breq	.+22     	; 0x1c0c <vfprintf+0xae>
    1bf6:	83 32       	cpi	r24, 0x23	; 35
    1bf8:	69 f4       	brne	.+26     	; 0x1c14 <vfprintf+0xb6>
    1bfa:	20 61       	ori	r18, 0x10	; 16
    1bfc:	2c c0       	rjmp	.+88     	; 0x1c56 <vfprintf+0xf8>
    1bfe:	8d 32       	cpi	r24, 0x2D	; 45
    1c00:	39 f0       	breq	.+14     	; 0x1c10 <vfprintf+0xb2>
    1c02:	80 33       	cpi	r24, 0x30	; 48
    1c04:	39 f4       	brne	.+14     	; 0x1c14 <vfprintf+0xb6>
    1c06:	21 60       	ori	r18, 0x01	; 1
    1c08:	26 c0       	rjmp	.+76     	; 0x1c56 <vfprintf+0xf8>
    1c0a:	22 60       	ori	r18, 0x02	; 2
    1c0c:	24 60       	ori	r18, 0x04	; 4
    1c0e:	23 c0       	rjmp	.+70     	; 0x1c56 <vfprintf+0xf8>
    1c10:	28 60       	ori	r18, 0x08	; 8
    1c12:	21 c0       	rjmp	.+66     	; 0x1c56 <vfprintf+0xf8>
    1c14:	27 fd       	sbrc	r18, 7
    1c16:	27 c0       	rjmp	.+78     	; 0x1c66 <vfprintf+0x108>
    1c18:	30 ed       	ldi	r19, 0xD0	; 208
    1c1a:	38 0f       	add	r19, r24
    1c1c:	3a 30       	cpi	r19, 0x0A	; 10
    1c1e:	78 f4       	brcc	.+30     	; 0x1c3e <vfprintf+0xe0>
    1c20:	26 ff       	sbrs	r18, 6
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <vfprintf+0xd2>
    1c24:	fa e0       	ldi	r31, 0x0A	; 10
    1c26:	1f 9f       	mul	r17, r31
    1c28:	30 0d       	add	r19, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	13 2f       	mov	r17, r19
    1c2e:	13 c0       	rjmp	.+38     	; 0x1c56 <vfprintf+0xf8>
    1c30:	4a e0       	ldi	r20, 0x0A	; 10
    1c32:	f4 9e       	mul	r15, r20
    1c34:	30 0d       	add	r19, r0
    1c36:	11 24       	eor	r1, r1
    1c38:	f3 2e       	mov	r15, r19
    1c3a:	20 62       	ori	r18, 0x20	; 32
    1c3c:	0c c0       	rjmp	.+24     	; 0x1c56 <vfprintf+0xf8>
    1c3e:	8e 32       	cpi	r24, 0x2E	; 46
    1c40:	21 f4       	brne	.+8      	; 0x1c4a <vfprintf+0xec>
    1c42:	26 fd       	sbrc	r18, 6
    1c44:	ee c2       	rjmp	.+1500   	; 0x2222 <vfprintf+0x6c4>
    1c46:	20 64       	ori	r18, 0x40	; 64
    1c48:	06 c0       	rjmp	.+12     	; 0x1c56 <vfprintf+0xf8>
    1c4a:	8c 36       	cpi	r24, 0x6C	; 108
    1c4c:	11 f4       	brne	.+4      	; 0x1c52 <vfprintf+0xf4>
    1c4e:	20 68       	ori	r18, 0x80	; 128
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <vfprintf+0xf8>
    1c52:	88 36       	cpi	r24, 0x68	; 104
    1c54:	41 f4       	brne	.+16     	; 0x1c66 <vfprintf+0x108>
    1c56:	f4 01       	movw	r30, r8
    1c58:	93 fd       	sbrc	r25, 3
    1c5a:	85 91       	lpm	r24, Z+
    1c5c:	93 ff       	sbrs	r25, 3
    1c5e:	81 91       	ld	r24, Z+
    1c60:	4f 01       	movw	r8, r30
    1c62:	81 11       	cpse	r24, r1
    1c64:	c1 cf       	rjmp	.-126    	; 0x1be8 <vfprintf+0x8a>
    1c66:	9b eb       	ldi	r25, 0xBB	; 187
    1c68:	98 0f       	add	r25, r24
    1c6a:	93 30       	cpi	r25, 0x03	; 3
    1c6c:	18 f4       	brcc	.+6      	; 0x1c74 <vfprintf+0x116>
    1c6e:	20 61       	ori	r18, 0x10	; 16
    1c70:	80 5e       	subi	r24, 0xE0	; 224
    1c72:	06 c0       	rjmp	.+12     	; 0x1c80 <vfprintf+0x122>
    1c74:	9b e9       	ldi	r25, 0x9B	; 155
    1c76:	98 0f       	add	r25, r24
    1c78:	93 30       	cpi	r25, 0x03	; 3
    1c7a:	08 f0       	brcs	.+2      	; 0x1c7e <vfprintf+0x120>
    1c7c:	71 c1       	rjmp	.+738    	; 0x1f60 <vfprintf+0x402>
    1c7e:	2f 7e       	andi	r18, 0xEF	; 239
    1c80:	26 ff       	sbrs	r18, 6
    1c82:	16 e0       	ldi	r17, 0x06	; 6
    1c84:	2f 73       	andi	r18, 0x3F	; 63
    1c86:	32 2e       	mov	r3, r18
    1c88:	85 36       	cpi	r24, 0x65	; 101
    1c8a:	19 f4       	brne	.+6      	; 0x1c92 <vfprintf+0x134>
    1c8c:	20 64       	ori	r18, 0x40	; 64
    1c8e:	32 2e       	mov	r3, r18
    1c90:	08 c0       	rjmp	.+16     	; 0x1ca2 <vfprintf+0x144>
    1c92:	86 36       	cpi	r24, 0x66	; 102
    1c94:	21 f4       	brne	.+8      	; 0x1c9e <vfprintf+0x140>
    1c96:	f2 2f       	mov	r31, r18
    1c98:	f0 68       	ori	r31, 0x80	; 128
    1c9a:	3f 2e       	mov	r3, r31
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <vfprintf+0x144>
    1c9e:	11 11       	cpse	r17, r1
    1ca0:	11 50       	subi	r17, 0x01	; 1
    1ca2:	37 fe       	sbrs	r3, 7
    1ca4:	07 c0       	rjmp	.+14     	; 0x1cb4 <vfprintf+0x156>
    1ca6:	1c 33       	cpi	r17, 0x3C	; 60
    1ca8:	50 f4       	brcc	.+20     	; 0x1cbe <vfprintf+0x160>
    1caa:	ee 24       	eor	r14, r14
    1cac:	e3 94       	inc	r14
    1cae:	e1 0e       	add	r14, r17
    1cb0:	27 e0       	ldi	r18, 0x07	; 7
    1cb2:	0b c0       	rjmp	.+22     	; 0x1cca <vfprintf+0x16c>
    1cb4:	18 30       	cpi	r17, 0x08	; 8
    1cb6:	38 f0       	brcs	.+14     	; 0x1cc6 <vfprintf+0x168>
    1cb8:	27 e0       	ldi	r18, 0x07	; 7
    1cba:	17 e0       	ldi	r17, 0x07	; 7
    1cbc:	05 c0       	rjmp	.+10     	; 0x1cc8 <vfprintf+0x16a>
    1cbe:	27 e0       	ldi	r18, 0x07	; 7
    1cc0:	4c e3       	ldi	r20, 0x3C	; 60
    1cc2:	e4 2e       	mov	r14, r20
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <vfprintf+0x16c>
    1cc6:	21 2f       	mov	r18, r17
    1cc8:	e1 2c       	mov	r14, r1
    1cca:	52 01       	movw	r10, r4
    1ccc:	44 e0       	ldi	r20, 0x04	; 4
    1cce:	a4 0e       	add	r10, r20
    1cd0:	b1 1c       	adc	r11, r1
    1cd2:	f2 01       	movw	r30, r4
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	0e 2d       	mov	r16, r14
    1cde:	a3 01       	movw	r20, r6
    1ce0:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__ftoa_engine>
    1ce4:	2c 01       	movw	r4, r24
    1ce6:	09 81       	ldd	r16, Y+1	; 0x01
    1ce8:	00 ff       	sbrs	r16, 0
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <vfprintf+0x192>
    1cec:	03 ff       	sbrs	r16, 3
    1cee:	07 c0       	rjmp	.+14     	; 0x1cfe <vfprintf+0x1a0>
    1cf0:	31 fc       	sbrc	r3, 1
    1cf2:	08 c0       	rjmp	.+16     	; 0x1d04 <vfprintf+0x1a6>
    1cf4:	32 fe       	sbrs	r3, 2
    1cf6:	09 c0       	rjmp	.+18     	; 0x1d0a <vfprintf+0x1ac>
    1cf8:	30 e2       	ldi	r19, 0x20	; 32
    1cfa:	23 2e       	mov	r2, r19
    1cfc:	07 c0       	rjmp	.+14     	; 0x1d0c <vfprintf+0x1ae>
    1cfe:	2d e2       	ldi	r18, 0x2D	; 45
    1d00:	22 2e       	mov	r2, r18
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <vfprintf+0x1ae>
    1d04:	9b e2       	ldi	r25, 0x2B	; 43
    1d06:	29 2e       	mov	r2, r25
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <vfprintf+0x1ae>
    1d0a:	21 2c       	mov	r2, r1
    1d0c:	80 2f       	mov	r24, r16
    1d0e:	8c 70       	andi	r24, 0x0C	; 12
    1d10:	19 f0       	breq	.+6      	; 0x1d18 <vfprintf+0x1ba>
    1d12:	21 10       	cpse	r2, r1
    1d14:	68 c2       	rjmp	.+1232   	; 0x21e6 <vfprintf+0x688>
    1d16:	a8 c2       	rjmp	.+1360   	; 0x2268 <vfprintf+0x70a>
    1d18:	37 fe       	sbrs	r3, 7
    1d1a:	0f c0       	rjmp	.+30     	; 0x1d3a <vfprintf+0x1dc>
    1d1c:	e4 0c       	add	r14, r4
    1d1e:	04 ff       	sbrs	r16, 4
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <vfprintf+0x1cc>
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	81 33       	cpi	r24, 0x31	; 49
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <vfprintf+0x1cc>
    1d28:	ea 94       	dec	r14
    1d2a:	1e 14       	cp	r1, r14
    1d2c:	74 f5       	brge	.+92     	; 0x1d8a <vfprintf+0x22c>
    1d2e:	f8 e0       	ldi	r31, 0x08	; 8
    1d30:	fe 15       	cp	r31, r14
    1d32:	78 f5       	brcc	.+94     	; 0x1d92 <vfprintf+0x234>
    1d34:	88 e0       	ldi	r24, 0x08	; 8
    1d36:	e8 2e       	mov	r14, r24
    1d38:	2c c0       	rjmp	.+88     	; 0x1d92 <vfprintf+0x234>
    1d3a:	36 fc       	sbrc	r3, 6
    1d3c:	2a c0       	rjmp	.+84     	; 0x1d92 <vfprintf+0x234>
    1d3e:	81 2f       	mov	r24, r17
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	84 15       	cp	r24, r4
    1d44:	95 05       	cpc	r25, r5
    1d46:	9c f0       	brlt	.+38     	; 0x1d6e <vfprintf+0x210>
    1d48:	2c ef       	ldi	r18, 0xFC	; 252
    1d4a:	42 16       	cp	r4, r18
    1d4c:	2f ef       	ldi	r18, 0xFF	; 255
    1d4e:	52 06       	cpc	r5, r18
    1d50:	74 f0       	brlt	.+28     	; 0x1d6e <vfprintf+0x210>
    1d52:	43 2d       	mov	r20, r3
    1d54:	40 68       	ori	r20, 0x80	; 128
    1d56:	34 2e       	mov	r3, r20
    1d58:	0a c0       	rjmp	.+20     	; 0x1d6e <vfprintf+0x210>
    1d5a:	e2 e0       	ldi	r30, 0x02	; 2
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	ec 0f       	add	r30, r28
    1d60:	fd 1f       	adc	r31, r29
    1d62:	e1 0f       	add	r30, r17
    1d64:	f1 1d       	adc	r31, r1
    1d66:	80 81       	ld	r24, Z
    1d68:	80 33       	cpi	r24, 0x30	; 48
    1d6a:	19 f4       	brne	.+6      	; 0x1d72 <vfprintf+0x214>
    1d6c:	11 50       	subi	r17, 0x01	; 1
    1d6e:	11 11       	cpse	r17, r1
    1d70:	f4 cf       	rjmp	.-24     	; 0x1d5a <vfprintf+0x1fc>
    1d72:	37 fe       	sbrs	r3, 7
    1d74:	0e c0       	rjmp	.+28     	; 0x1d92 <vfprintf+0x234>
    1d76:	ee 24       	eor	r14, r14
    1d78:	e3 94       	inc	r14
    1d7a:	e1 0e       	add	r14, r17
    1d7c:	81 2f       	mov	r24, r17
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	48 16       	cp	r4, r24
    1d82:	59 06       	cpc	r5, r25
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <vfprintf+0x232>
    1d86:	14 19       	sub	r17, r4
    1d88:	04 c0       	rjmp	.+8      	; 0x1d92 <vfprintf+0x234>
    1d8a:	ee 24       	eor	r14, r14
    1d8c:	e3 94       	inc	r14
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <vfprintf+0x234>
    1d90:	10 e0       	ldi	r17, 0x00	; 0
    1d92:	37 fe       	sbrs	r3, 7
    1d94:	06 c0       	rjmp	.+12     	; 0x1da2 <vfprintf+0x244>
    1d96:	14 14       	cp	r1, r4
    1d98:	15 04       	cpc	r1, r5
    1d9a:	34 f4       	brge	.+12     	; 0x1da8 <vfprintf+0x24a>
    1d9c:	c2 01       	movw	r24, r4
    1d9e:	01 96       	adiw	r24, 0x01	; 1
    1da0:	05 c0       	rjmp	.+10     	; 0x1dac <vfprintf+0x24e>
    1da2:	85 e0       	ldi	r24, 0x05	; 5
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <vfprintf+0x24e>
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	21 10       	cpse	r2, r1
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	11 23       	and	r17, r17
    1db2:	31 f0       	breq	.+12     	; 0x1dc0 <vfprintf+0x262>
    1db4:	21 2f       	mov	r18, r17
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	2f 5f       	subi	r18, 0xFF	; 255
    1dba:	3f 4f       	sbci	r19, 0xFF	; 255
    1dbc:	82 0f       	add	r24, r18
    1dbe:	93 1f       	adc	r25, r19
    1dc0:	2f 2d       	mov	r18, r15
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	82 17       	cp	r24, r18
    1dc6:	93 07       	cpc	r25, r19
    1dc8:	14 f4       	brge	.+4      	; 0x1dce <vfprintf+0x270>
    1dca:	f8 1a       	sub	r15, r24
    1dcc:	01 c0       	rjmp	.+2      	; 0x1dd0 <vfprintf+0x272>
    1dce:	f1 2c       	mov	r15, r1
    1dd0:	83 2d       	mov	r24, r3
    1dd2:	89 70       	andi	r24, 0x09	; 9
    1dd4:	49 f4       	brne	.+18     	; 0x1de8 <vfprintf+0x28a>
    1dd6:	ff 20       	and	r15, r15
    1dd8:	39 f0       	breq	.+14     	; 0x1de8 <vfprintf+0x28a>
    1dda:	b6 01       	movw	r22, r12
    1ddc:	80 e2       	ldi	r24, 0x20	; 32
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1de4:	fa 94       	dec	r15
    1de6:	f7 cf       	rjmp	.-18     	; 0x1dd6 <vfprintf+0x278>
    1de8:	22 20       	and	r2, r2
    1dea:	29 f0       	breq	.+10     	; 0x1df6 <vfprintf+0x298>
    1dec:	b6 01       	movw	r22, r12
    1dee:	82 2d       	mov	r24, r2
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1df6:	33 fc       	sbrc	r3, 3
    1df8:	09 c0       	rjmp	.+18     	; 0x1e0c <vfprintf+0x2ae>
    1dfa:	ff 20       	and	r15, r15
    1dfc:	39 f0       	breq	.+14     	; 0x1e0c <vfprintf+0x2ae>
    1dfe:	b6 01       	movw	r22, r12
    1e00:	80 e3       	ldi	r24, 0x30	; 48
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1e08:	fa 94       	dec	r15
    1e0a:	f7 cf       	rjmp	.-18     	; 0x1dfa <vfprintf+0x29c>
    1e0c:	37 fe       	sbrs	r3, 7
    1e0e:	5a c0       	rjmp	.+180    	; 0x1ec4 <vfprintf+0x366>
    1e10:	94 2d       	mov	r25, r4
    1e12:	85 2d       	mov	r24, r5
    1e14:	57 fe       	sbrs	r5, 7
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <vfprintf+0x2be>
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	29 2e       	mov	r2, r25
    1e1e:	38 2e       	mov	r3, r24
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	a2 01       	movw	r20, r4
    1e26:	4e 19       	sub	r20, r14
    1e28:	51 09       	sbc	r21, r1
    1e2a:	5d 87       	std	Y+13, r21	; 0x0d
    1e2c:	4c 87       	std	Y+12, r20	; 0x0c
    1e2e:	a2 01       	movw	r20, r4
    1e30:	42 19       	sub	r20, r2
    1e32:	53 09       	sbc	r21, r3
    1e34:	5f 87       	std	Y+15, r21	; 0x0f
    1e36:	4e 87       	std	Y+14, r20	; 0x0e
    1e38:	61 2f       	mov	r22, r17
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	44 27       	eor	r20, r20
    1e3e:	55 27       	eor	r21, r21
    1e40:	46 1b       	sub	r20, r22
    1e42:	57 0b       	sbc	r21, r23
    1e44:	59 8b       	std	Y+17, r21	; 0x11
    1e46:	48 8b       	std	Y+16, r20	; 0x10
    1e48:	5f ef       	ldi	r21, 0xFF	; 255
    1e4a:	25 16       	cp	r2, r21
    1e4c:	35 06       	cpc	r3, r21
    1e4e:	49 f4       	brne	.+18     	; 0x1e62 <vfprintf+0x304>
    1e50:	b6 01       	movw	r22, r12
    1e52:	8e e2       	ldi	r24, 0x2E	; 46
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	2a 8b       	std	Y+18, r18	; 0x12
    1e58:	3b 8b       	std	Y+19, r19	; 0x13
    1e5a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1e5e:	3b 89       	ldd	r19, Y+19	; 0x13
    1e60:	2a 89       	ldd	r18, Y+18	; 0x12
    1e62:	42 14       	cp	r4, r2
    1e64:	53 04       	cpc	r5, r3
    1e66:	6c f0       	brlt	.+26     	; 0x1e82 <vfprintf+0x324>
    1e68:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e6a:	5d 85       	ldd	r21, Y+13	; 0x0d
    1e6c:	42 15       	cp	r20, r2
    1e6e:	53 05       	cpc	r21, r3
    1e70:	44 f4       	brge	.+16     	; 0x1e82 <vfprintf+0x324>
    1e72:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e74:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e76:	e2 0f       	add	r30, r18
    1e78:	f3 1f       	adc	r31, r19
    1e7a:	e6 0d       	add	r30, r6
    1e7c:	f7 1d       	adc	r31, r7
    1e7e:	81 81       	ldd	r24, Z+1	; 0x01
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <vfprintf+0x326>
    1e82:	80 e3       	ldi	r24, 0x30	; 48
    1e84:	51 e0       	ldi	r21, 0x01	; 1
    1e86:	25 1a       	sub	r2, r21
    1e88:	31 08       	sbc	r3, r1
    1e8a:	2f 5f       	subi	r18, 0xFF	; 255
    1e8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8e:	48 89       	ldd	r20, Y+16	; 0x10
    1e90:	59 89       	ldd	r21, Y+17	; 0x11
    1e92:	24 16       	cp	r2, r20
    1e94:	35 06       	cpc	r3, r21
    1e96:	4c f0       	brlt	.+18     	; 0x1eaa <vfprintf+0x34c>
    1e98:	b6 01       	movw	r22, r12
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	2a 8b       	std	Y+18, r18	; 0x12
    1e9e:	3b 8b       	std	Y+19, r19	; 0x13
    1ea0:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1ea4:	2a 89       	ldd	r18, Y+18	; 0x12
    1ea6:	3b 89       	ldd	r19, Y+19	; 0x13
    1ea8:	cf cf       	rjmp	.-98     	; 0x1e48 <vfprintf+0x2ea>
    1eaa:	24 14       	cp	r2, r4
    1eac:	35 04       	cpc	r3, r5
    1eae:	39 f4       	brne	.+14     	; 0x1ebe <vfprintf+0x360>
    1eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb2:	96 33       	cpi	r25, 0x36	; 54
    1eb4:	18 f4       	brcc	.+6      	; 0x1ebc <vfprintf+0x35e>
    1eb6:	95 33       	cpi	r25, 0x35	; 53
    1eb8:	11 f4       	brne	.+4      	; 0x1ebe <vfprintf+0x360>
    1eba:	04 ff       	sbrs	r16, 4
    1ebc:	81 e3       	ldi	r24, 0x31	; 49
    1ebe:	b6 01       	movw	r22, r12
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	4b c0       	rjmp	.+150    	; 0x1f5a <vfprintf+0x3fc>
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	81 33       	cpi	r24, 0x31	; 49
    1ec8:	09 f0       	breq	.+2      	; 0x1ecc <vfprintf+0x36e>
    1eca:	0f 7e       	andi	r16, 0xEF	; 239
    1ecc:	b6 01       	movw	r22, r12
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1ed4:	11 11       	cpse	r17, r1
    1ed6:	05 c0       	rjmp	.+10     	; 0x1ee2 <vfprintf+0x384>
    1ed8:	34 fc       	sbrc	r3, 4
    1eda:	18 c0       	rjmp	.+48     	; 0x1f0c <vfprintf+0x3ae>
    1edc:	85 e6       	ldi	r24, 0x65	; 101
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	17 c0       	rjmp	.+46     	; 0x1f10 <vfprintf+0x3b2>
    1ee2:	b6 01       	movw	r22, r12
    1ee4:	8e e2       	ldi	r24, 0x2E	; 46
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1eec:	82 e0       	ldi	r24, 0x02	; 2
    1eee:	ee 24       	eor	r14, r14
    1ef0:	e3 94       	inc	r14
    1ef2:	e8 0e       	add	r14, r24
    1ef4:	f3 01       	movw	r30, r6
    1ef6:	e8 0f       	add	r30, r24
    1ef8:	f1 1d       	adc	r31, r1
    1efa:	80 81       	ld	r24, Z
    1efc:	b6 01       	movw	r22, r12
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1f04:	11 50       	subi	r17, 0x01	; 1
    1f06:	8e 2d       	mov	r24, r14
    1f08:	91 f7       	brne	.-28     	; 0x1eee <vfprintf+0x390>
    1f0a:	e6 cf       	rjmp	.-52     	; 0x1ed8 <vfprintf+0x37a>
    1f0c:	85 e4       	ldi	r24, 0x45	; 69
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	b6 01       	movw	r22, r12
    1f12:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1f16:	57 fc       	sbrc	r5, 7
    1f18:	05 c0       	rjmp	.+10     	; 0x1f24 <vfprintf+0x3c6>
    1f1a:	41 14       	cp	r4, r1
    1f1c:	51 04       	cpc	r5, r1
    1f1e:	39 f4       	brne	.+14     	; 0x1f2e <vfprintf+0x3d0>
    1f20:	04 ff       	sbrs	r16, 4
    1f22:	05 c0       	rjmp	.+10     	; 0x1f2e <vfprintf+0x3d0>
    1f24:	51 94       	neg	r5
    1f26:	41 94       	neg	r4
    1f28:	51 08       	sbc	r5, r1
    1f2a:	8d e2       	ldi	r24, 0x2D	; 45
    1f2c:	01 c0       	rjmp	.+2      	; 0x1f30 <vfprintf+0x3d2>
    1f2e:	8b e2       	ldi	r24, 0x2B	; 43
    1f30:	b6 01       	movw	r22, r12
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1f38:	80 e3       	ldi	r24, 0x30	; 48
    1f3a:	9a e0       	ldi	r25, 0x0A	; 10
    1f3c:	49 16       	cp	r4, r25
    1f3e:	51 04       	cpc	r5, r1
    1f40:	2c f0       	brlt	.+10     	; 0x1f4c <vfprintf+0x3ee>
    1f42:	8f 5f       	subi	r24, 0xFF	; 255
    1f44:	5a e0       	ldi	r21, 0x0A	; 10
    1f46:	45 1a       	sub	r4, r21
    1f48:	51 08       	sbc	r5, r1
    1f4a:	f7 cf       	rjmp	.-18     	; 0x1f3a <vfprintf+0x3dc>
    1f4c:	b6 01       	movw	r22, r12
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1f54:	b6 01       	movw	r22, r12
    1f56:	c2 01       	movw	r24, r4
    1f58:	c0 96       	adiw	r24, 0x30	; 48
    1f5a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1f5e:	57 c1       	rjmp	.+686    	; 0x220e <vfprintf+0x6b0>
    1f60:	83 36       	cpi	r24, 0x63	; 99
    1f62:	31 f0       	breq	.+12     	; 0x1f70 <vfprintf+0x412>
    1f64:	83 37       	cpi	r24, 0x73	; 115
    1f66:	79 f0       	breq	.+30     	; 0x1f86 <vfprintf+0x428>
    1f68:	83 35       	cpi	r24, 0x53	; 83
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <vfprintf+0x410>
    1f6c:	58 c0       	rjmp	.+176    	; 0x201e <vfprintf+0x4c0>
    1f6e:	21 c0       	rjmp	.+66     	; 0x1fb2 <vfprintf+0x454>
    1f70:	52 01       	movw	r10, r4
    1f72:	e2 e0       	ldi	r30, 0x02	; 2
    1f74:	ae 0e       	add	r10, r30
    1f76:	b1 1c       	adc	r11, r1
    1f78:	f2 01       	movw	r30, r4
    1f7a:	80 81       	ld	r24, Z
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	01 e0       	ldi	r16, 0x01	; 1
    1f80:	10 e0       	ldi	r17, 0x00	; 0
    1f82:	23 01       	movw	r4, r6
    1f84:	14 c0       	rjmp	.+40     	; 0x1fae <vfprintf+0x450>
    1f86:	52 01       	movw	r10, r4
    1f88:	f2 e0       	ldi	r31, 0x02	; 2
    1f8a:	af 0e       	add	r10, r31
    1f8c:	b1 1c       	adc	r11, r1
    1f8e:	f2 01       	movw	r30, r4
    1f90:	40 80       	ld	r4, Z
    1f92:	51 80       	ldd	r5, Z+1	; 0x01
    1f94:	26 ff       	sbrs	r18, 6
    1f96:	03 c0       	rjmp	.+6      	; 0x1f9e <vfprintf+0x440>
    1f98:	61 2f       	mov	r22, r17
    1f9a:	70 e0       	ldi	r23, 0x00	; 0
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <vfprintf+0x444>
    1f9e:	6f ef       	ldi	r22, 0xFF	; 255
    1fa0:	7f ef       	ldi	r23, 0xFF	; 255
    1fa2:	c2 01       	movw	r24, r4
    1fa4:	2a 8b       	std	Y+18, r18	; 0x12
    1fa6:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <strnlen>
    1faa:	8c 01       	movw	r16, r24
    1fac:	2a 89       	ldd	r18, Y+18	; 0x12
    1fae:	2f 77       	andi	r18, 0x7F	; 127
    1fb0:	15 c0       	rjmp	.+42     	; 0x1fdc <vfprintf+0x47e>
    1fb2:	52 01       	movw	r10, r4
    1fb4:	f2 e0       	ldi	r31, 0x02	; 2
    1fb6:	af 0e       	add	r10, r31
    1fb8:	b1 1c       	adc	r11, r1
    1fba:	f2 01       	movw	r30, r4
    1fbc:	40 80       	ld	r4, Z
    1fbe:	51 80       	ldd	r5, Z+1	; 0x01
    1fc0:	26 ff       	sbrs	r18, 6
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <vfprintf+0x46c>
    1fc4:	61 2f       	mov	r22, r17
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <vfprintf+0x470>
    1fca:	6f ef       	ldi	r22, 0xFF	; 255
    1fcc:	7f ef       	ldi	r23, 0xFF	; 255
    1fce:	c2 01       	movw	r24, r4
    1fd0:	2a 8b       	std	Y+18, r18	; 0x12
    1fd2:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <strnlen_P>
    1fd6:	8c 01       	movw	r16, r24
    1fd8:	2a 89       	ldd	r18, Y+18	; 0x12
    1fda:	20 68       	ori	r18, 0x80	; 128
    1fdc:	32 2e       	mov	r3, r18
    1fde:	23 fd       	sbrc	r18, 3
    1fe0:	1a c0       	rjmp	.+52     	; 0x2016 <vfprintf+0x4b8>
    1fe2:	8f 2d       	mov	r24, r15
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	08 17       	cp	r16, r24
    1fe8:	19 07       	cpc	r17, r25
    1fea:	a8 f4       	brcc	.+42     	; 0x2016 <vfprintf+0x4b8>
    1fec:	b6 01       	movw	r22, r12
    1fee:	80 e2       	ldi	r24, 0x20	; 32
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    1ff6:	fa 94       	dec	r15
    1ff8:	f4 cf       	rjmp	.-24     	; 0x1fe2 <vfprintf+0x484>
    1ffa:	f2 01       	movw	r30, r4
    1ffc:	37 fc       	sbrc	r3, 7
    1ffe:	85 91       	lpm	r24, Z+
    2000:	37 fe       	sbrs	r3, 7
    2002:	81 91       	ld	r24, Z+
    2004:	2f 01       	movw	r4, r30
    2006:	b6 01       	movw	r22, r12
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    200e:	f1 10       	cpse	r15, r1
    2010:	fa 94       	dec	r15
    2012:	01 50       	subi	r16, 0x01	; 1
    2014:	11 09       	sbc	r17, r1
    2016:	01 15       	cp	r16, r1
    2018:	11 05       	cpc	r17, r1
    201a:	79 f7       	brne	.-34     	; 0x1ffa <vfprintf+0x49c>
    201c:	f8 c0       	rjmp	.+496    	; 0x220e <vfprintf+0x6b0>
    201e:	84 36       	cpi	r24, 0x64	; 100
    2020:	11 f0       	breq	.+4      	; 0x2026 <vfprintf+0x4c8>
    2022:	89 36       	cpi	r24, 0x69	; 105
    2024:	59 f5       	brne	.+86     	; 0x207c <vfprintf+0x51e>
    2026:	52 01       	movw	r10, r4
    2028:	27 ff       	sbrs	r18, 7
    202a:	09 c0       	rjmp	.+18     	; 0x203e <vfprintf+0x4e0>
    202c:	f4 e0       	ldi	r31, 0x04	; 4
    202e:	af 0e       	add	r10, r31
    2030:	b1 1c       	adc	r11, r1
    2032:	f2 01       	movw	r30, r4
    2034:	60 81       	ld	r22, Z
    2036:	71 81       	ldd	r23, Z+1	; 0x01
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	0a c0       	rjmp	.+20     	; 0x2052 <vfprintf+0x4f4>
    203e:	f2 e0       	ldi	r31, 0x02	; 2
    2040:	af 0e       	add	r10, r31
    2042:	b1 1c       	adc	r11, r1
    2044:	f2 01       	movw	r30, r4
    2046:	60 81       	ld	r22, Z
    2048:	71 81       	ldd	r23, Z+1	; 0x01
    204a:	07 2e       	mov	r0, r23
    204c:	00 0c       	add	r0, r0
    204e:	88 0b       	sbc	r24, r24
    2050:	99 0b       	sbc	r25, r25
    2052:	2f 76       	andi	r18, 0x6F	; 111
    2054:	32 2e       	mov	r3, r18
    2056:	97 ff       	sbrs	r25, 7
    2058:	09 c0       	rjmp	.+18     	; 0x206c <vfprintf+0x50e>
    205a:	90 95       	com	r25
    205c:	80 95       	com	r24
    205e:	70 95       	com	r23
    2060:	61 95       	neg	r22
    2062:	7f 4f       	sbci	r23, 0xFF	; 255
    2064:	8f 4f       	sbci	r24, 0xFF	; 255
    2066:	9f 4f       	sbci	r25, 0xFF	; 255
    2068:	20 68       	ori	r18, 0x80	; 128
    206a:	32 2e       	mov	r3, r18
    206c:	2a e0       	ldi	r18, 0x0A	; 10
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	a3 01       	movw	r20, r6
    2072:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__ultoa_invert>
    2076:	e8 2e       	mov	r14, r24
    2078:	e6 18       	sub	r14, r6
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <vfprintf+0x59c>
    207c:	02 2f       	mov	r16, r18
    207e:	85 37       	cpi	r24, 0x75	; 117
    2080:	21 f4       	brne	.+8      	; 0x208a <vfprintf+0x52c>
    2082:	0f 7e       	andi	r16, 0xEF	; 239
    2084:	2a e0       	ldi	r18, 0x0A	; 10
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	1d c0       	rjmp	.+58     	; 0x20c4 <vfprintf+0x566>
    208a:	09 7f       	andi	r16, 0xF9	; 249
    208c:	8f 36       	cpi	r24, 0x6F	; 111
    208e:	91 f0       	breq	.+36     	; 0x20b4 <vfprintf+0x556>
    2090:	18 f4       	brcc	.+6      	; 0x2098 <vfprintf+0x53a>
    2092:	88 35       	cpi	r24, 0x58	; 88
    2094:	59 f0       	breq	.+22     	; 0x20ac <vfprintf+0x54e>
    2096:	c5 c0       	rjmp	.+394    	; 0x2222 <vfprintf+0x6c4>
    2098:	80 37       	cpi	r24, 0x70	; 112
    209a:	19 f0       	breq	.+6      	; 0x20a2 <vfprintf+0x544>
    209c:	88 37       	cpi	r24, 0x78	; 120
    209e:	11 f0       	breq	.+4      	; 0x20a4 <vfprintf+0x546>
    20a0:	c0 c0       	rjmp	.+384    	; 0x2222 <vfprintf+0x6c4>
    20a2:	00 61       	ori	r16, 0x10	; 16
    20a4:	04 ff       	sbrs	r16, 4
    20a6:	09 c0       	rjmp	.+18     	; 0x20ba <vfprintf+0x55c>
    20a8:	04 60       	ori	r16, 0x04	; 4
    20aa:	07 c0       	rjmp	.+14     	; 0x20ba <vfprintf+0x55c>
    20ac:	24 ff       	sbrs	r18, 4
    20ae:	08 c0       	rjmp	.+16     	; 0x20c0 <vfprintf+0x562>
    20b0:	06 60       	ori	r16, 0x06	; 6
    20b2:	06 c0       	rjmp	.+12     	; 0x20c0 <vfprintf+0x562>
    20b4:	28 e0       	ldi	r18, 0x08	; 8
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	05 c0       	rjmp	.+10     	; 0x20c4 <vfprintf+0x566>
    20ba:	20 e1       	ldi	r18, 0x10	; 16
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <vfprintf+0x566>
    20c0:	20 e1       	ldi	r18, 0x10	; 16
    20c2:	32 e0       	ldi	r19, 0x02	; 2
    20c4:	52 01       	movw	r10, r4
    20c6:	07 ff       	sbrs	r16, 7
    20c8:	09 c0       	rjmp	.+18     	; 0x20dc <vfprintf+0x57e>
    20ca:	f4 e0       	ldi	r31, 0x04	; 4
    20cc:	af 0e       	add	r10, r31
    20ce:	b1 1c       	adc	r11, r1
    20d0:	f2 01       	movw	r30, r4
    20d2:	60 81       	ld	r22, Z
    20d4:	71 81       	ldd	r23, Z+1	; 0x01
    20d6:	82 81       	ldd	r24, Z+2	; 0x02
    20d8:	93 81       	ldd	r25, Z+3	; 0x03
    20da:	08 c0       	rjmp	.+16     	; 0x20ec <vfprintf+0x58e>
    20dc:	f2 e0       	ldi	r31, 0x02	; 2
    20de:	af 0e       	add	r10, r31
    20e0:	b1 1c       	adc	r11, r1
    20e2:	f2 01       	movw	r30, r4
    20e4:	60 81       	ld	r22, Z
    20e6:	71 81       	ldd	r23, Z+1	; 0x01
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a3 01       	movw	r20, r6
    20ee:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__ultoa_invert>
    20f2:	e8 2e       	mov	r14, r24
    20f4:	e6 18       	sub	r14, r6
    20f6:	0f 77       	andi	r16, 0x7F	; 127
    20f8:	30 2e       	mov	r3, r16
    20fa:	36 fe       	sbrs	r3, 6
    20fc:	0b c0       	rjmp	.+22     	; 0x2114 <vfprintf+0x5b6>
    20fe:	33 2d       	mov	r19, r3
    2100:	3e 7f       	andi	r19, 0xFE	; 254
    2102:	e1 16       	cp	r14, r17
    2104:	50 f4       	brcc	.+20     	; 0x211a <vfprintf+0x5bc>
    2106:	34 fe       	sbrs	r3, 4
    2108:	0a c0       	rjmp	.+20     	; 0x211e <vfprintf+0x5c0>
    210a:	32 fc       	sbrc	r3, 2
    210c:	08 c0       	rjmp	.+16     	; 0x211e <vfprintf+0x5c0>
    210e:	33 2d       	mov	r19, r3
    2110:	3e 7e       	andi	r19, 0xEE	; 238
    2112:	05 c0       	rjmp	.+10     	; 0x211e <vfprintf+0x5c0>
    2114:	0e 2d       	mov	r16, r14
    2116:	33 2d       	mov	r19, r3
    2118:	03 c0       	rjmp	.+6      	; 0x2120 <vfprintf+0x5c2>
    211a:	0e 2d       	mov	r16, r14
    211c:	01 c0       	rjmp	.+2      	; 0x2120 <vfprintf+0x5c2>
    211e:	01 2f       	mov	r16, r17
    2120:	34 ff       	sbrs	r19, 4
    2122:	0c c0       	rjmp	.+24     	; 0x213c <vfprintf+0x5de>
    2124:	fe 01       	movw	r30, r28
    2126:	ee 0d       	add	r30, r14
    2128:	f1 1d       	adc	r31, r1
    212a:	80 81       	ld	r24, Z
    212c:	80 33       	cpi	r24, 0x30	; 48
    212e:	11 f4       	brne	.+4      	; 0x2134 <vfprintf+0x5d6>
    2130:	39 7e       	andi	r19, 0xE9	; 233
    2132:	08 c0       	rjmp	.+16     	; 0x2144 <vfprintf+0x5e6>
    2134:	32 ff       	sbrs	r19, 2
    2136:	05 c0       	rjmp	.+10     	; 0x2142 <vfprintf+0x5e4>
    2138:	0e 5f       	subi	r16, 0xFE	; 254
    213a:	04 c0       	rjmp	.+8      	; 0x2144 <vfprintf+0x5e6>
    213c:	83 2f       	mov	r24, r19
    213e:	86 78       	andi	r24, 0x86	; 134
    2140:	09 f0       	breq	.+2      	; 0x2144 <vfprintf+0x5e6>
    2142:	0f 5f       	subi	r16, 0xFF	; 255
    2144:	33 fd       	sbrc	r19, 3
    2146:	13 c0       	rjmp	.+38     	; 0x216e <vfprintf+0x610>
    2148:	30 ff       	sbrs	r19, 0
    214a:	06 c0       	rjmp	.+12     	; 0x2158 <vfprintf+0x5fa>
    214c:	1e 2d       	mov	r17, r14
    214e:	0f 15       	cp	r16, r15
    2150:	18 f4       	brcc	.+6      	; 0x2158 <vfprintf+0x5fa>
    2152:	1f 0d       	add	r17, r15
    2154:	10 1b       	sub	r17, r16
    2156:	0f 2d       	mov	r16, r15
    2158:	0f 15       	cp	r16, r15
    215a:	68 f4       	brcc	.+26     	; 0x2176 <vfprintf+0x618>
    215c:	b6 01       	movw	r22, r12
    215e:	80 e2       	ldi	r24, 0x20	; 32
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	3b 8b       	std	Y+19, r19	; 0x13
    2164:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    2168:	0f 5f       	subi	r16, 0xFF	; 255
    216a:	3b 89       	ldd	r19, Y+19	; 0x13
    216c:	f5 cf       	rjmp	.-22     	; 0x2158 <vfprintf+0x5fa>
    216e:	0f 15       	cp	r16, r15
    2170:	10 f4       	brcc	.+4      	; 0x2176 <vfprintf+0x618>
    2172:	f0 1a       	sub	r15, r16
    2174:	01 c0       	rjmp	.+2      	; 0x2178 <vfprintf+0x61a>
    2176:	f1 2c       	mov	r15, r1
    2178:	34 ff       	sbrs	r19, 4
    217a:	12 c0       	rjmp	.+36     	; 0x21a0 <vfprintf+0x642>
    217c:	b6 01       	movw	r22, r12
    217e:	80 e3       	ldi	r24, 0x30	; 48
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	3b 8b       	std	Y+19, r19	; 0x13
    2184:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    2188:	3b 89       	ldd	r19, Y+19	; 0x13
    218a:	32 ff       	sbrs	r19, 2
    218c:	17 c0       	rjmp	.+46     	; 0x21bc <vfprintf+0x65e>
    218e:	31 fd       	sbrc	r19, 1
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <vfprintf+0x63a>
    2192:	88 e7       	ldi	r24, 0x78	; 120
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	02 c0       	rjmp	.+4      	; 0x219c <vfprintf+0x63e>
    2198:	88 e5       	ldi	r24, 0x58	; 88
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	b6 01       	movw	r22, r12
    219e:	0c c0       	rjmp	.+24     	; 0x21b8 <vfprintf+0x65a>
    21a0:	83 2f       	mov	r24, r19
    21a2:	86 78       	andi	r24, 0x86	; 134
    21a4:	59 f0       	breq	.+22     	; 0x21bc <vfprintf+0x65e>
    21a6:	31 ff       	sbrs	r19, 1
    21a8:	02 c0       	rjmp	.+4      	; 0x21ae <vfprintf+0x650>
    21aa:	8b e2       	ldi	r24, 0x2B	; 43
    21ac:	01 c0       	rjmp	.+2      	; 0x21b0 <vfprintf+0x652>
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	37 fd       	sbrc	r19, 7
    21b2:	8d e2       	ldi	r24, 0x2D	; 45
    21b4:	b6 01       	movw	r22, r12
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    21bc:	e1 16       	cp	r14, r17
    21be:	38 f4       	brcc	.+14     	; 0x21ce <vfprintf+0x670>
    21c0:	b6 01       	movw	r22, r12
    21c2:	80 e3       	ldi	r24, 0x30	; 48
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    21ca:	11 50       	subi	r17, 0x01	; 1
    21cc:	f7 cf       	rjmp	.-18     	; 0x21bc <vfprintf+0x65e>
    21ce:	ea 94       	dec	r14
    21d0:	f3 01       	movw	r30, r6
    21d2:	ee 0d       	add	r30, r14
    21d4:	f1 1d       	adc	r31, r1
    21d6:	80 81       	ld	r24, Z
    21d8:	b6 01       	movw	r22, r12
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    21e0:	e1 10       	cpse	r14, r1
    21e2:	f5 cf       	rjmp	.-22     	; 0x21ce <vfprintf+0x670>
    21e4:	14 c0       	rjmp	.+40     	; 0x220e <vfprintf+0x6b0>
    21e6:	f4 e0       	ldi	r31, 0x04	; 4
    21e8:	ff 15       	cp	r31, r15
    21ea:	58 f5       	brcc	.+86     	; 0x2242 <vfprintf+0x6e4>
    21ec:	84 e0       	ldi	r24, 0x04	; 4
    21ee:	f8 1a       	sub	r15, r24
    21f0:	33 fe       	sbrs	r3, 3
    21f2:	1e c0       	rjmp	.+60     	; 0x2230 <vfprintf+0x6d2>
    21f4:	21 10       	cpse	r2, r1
    21f6:	26 c0       	rjmp	.+76     	; 0x2244 <vfprintf+0x6e6>
    21f8:	03 ff       	sbrs	r16, 3
    21fa:	2a c0       	rjmp	.+84     	; 0x2250 <vfprintf+0x6f2>
    21fc:	06 ea       	ldi	r16, 0xA6	; 166
    21fe:	10 e0       	ldi	r17, 0x00	; 0
    2200:	f3 2d       	mov	r31, r3
    2202:	f0 71       	andi	r31, 0x10	; 16
    2204:	3f 2e       	mov	r3, r31
    2206:	f8 01       	movw	r30, r16
    2208:	84 91       	lpm	r24, Z
    220a:	81 11       	cpse	r24, r1
    220c:	24 c0       	rjmp	.+72     	; 0x2256 <vfprintf+0x6f8>
    220e:	ff 20       	and	r15, r15
    2210:	09 f4       	brne	.+2      	; 0x2214 <vfprintf+0x6b6>
    2212:	e5 cc       	rjmp	.-1590   	; 0x1bde <vfprintf+0x80>
    2214:	b6 01       	movw	r22, r12
    2216:	80 e2       	ldi	r24, 0x20	; 32
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    221e:	fa 94       	dec	r15
    2220:	f6 cf       	rjmp	.-20     	; 0x220e <vfprintf+0x6b0>
    2222:	f6 01       	movw	r30, r12
    2224:	86 81       	ldd	r24, Z+6	; 0x06
    2226:	97 81       	ldd	r25, Z+7	; 0x07
    2228:	26 c0       	rjmp	.+76     	; 0x2276 <vfprintf+0x718>
    222a:	8f ef       	ldi	r24, 0xFF	; 255
    222c:	9f ef       	ldi	r25, 0xFF	; 255
    222e:	23 c0       	rjmp	.+70     	; 0x2276 <vfprintf+0x718>
    2230:	b6 01       	movw	r22, r12
    2232:	80 e2       	ldi	r24, 0x20	; 32
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    223a:	fa 94       	dec	r15
    223c:	f1 10       	cpse	r15, r1
    223e:	f8 cf       	rjmp	.-16     	; 0x2230 <vfprintf+0x6d2>
    2240:	d9 cf       	rjmp	.-78     	; 0x21f4 <vfprintf+0x696>
    2242:	f1 2c       	mov	r15, r1
    2244:	b6 01       	movw	r22, r12
    2246:	82 2d       	mov	r24, r2
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    224e:	d4 cf       	rjmp	.-88     	; 0x21f8 <vfprintf+0x69a>
    2250:	0a ea       	ldi	r16, 0xAA	; 170
    2252:	10 e0       	ldi	r17, 0x00	; 0
    2254:	d5 cf       	rjmp	.-86     	; 0x2200 <vfprintf+0x6a2>
    2256:	31 10       	cpse	r3, r1
    2258:	80 52       	subi	r24, 0x20	; 32
    225a:	b6 01       	movw	r22, r12
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <fputc>
    2262:	0f 5f       	subi	r16, 0xFF	; 255
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	cf cf       	rjmp	.-98     	; 0x2206 <vfprintf+0x6a8>
    2268:	23 e0       	ldi	r18, 0x03	; 3
    226a:	2f 15       	cp	r18, r15
    226c:	10 f4       	brcc	.+4      	; 0x2272 <vfprintf+0x714>
    226e:	83 e0       	ldi	r24, 0x03	; 3
    2270:	be cf       	rjmp	.-132    	; 0x21ee <vfprintf+0x690>
    2272:	f1 2c       	mov	r15, r1
    2274:	c1 cf       	rjmp	.-126    	; 0x21f8 <vfprintf+0x69a>
    2276:	63 96       	adiw	r28, 0x13	; 19
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	df 90       	pop	r13
    2290:	cf 90       	pop	r12
    2292:	bf 90       	pop	r11
    2294:	af 90       	pop	r10
    2296:	9f 90       	pop	r9
    2298:	8f 90       	pop	r8
    229a:	7f 90       	pop	r7
    229c:	6f 90       	pop	r6
    229e:	5f 90       	pop	r5
    22a0:	4f 90       	pop	r4
    22a2:	3f 90       	pop	r3
    22a4:	2f 90       	pop	r2
    22a6:	08 95       	ret

000022a8 <__subsf3>:
    22a8:	50 58       	subi	r21, 0x80	; 128

000022aa <__addsf3>:
    22aa:	bb 27       	eor	r27, r27
    22ac:	aa 27       	eor	r26, r26
    22ae:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__addsf3x>
    22b2:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__fp_round>
    22b6:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__fp_pscA>
    22ba:	38 f0       	brcs	.+14     	; 0x22ca <__addsf3+0x20>
    22bc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__fp_pscB>
    22c0:	20 f0       	brcs	.+8      	; 0x22ca <__addsf3+0x20>
    22c2:	39 f4       	brne	.+14     	; 0x22d2 <__addsf3+0x28>
    22c4:	9f 3f       	cpi	r25, 0xFF	; 255
    22c6:	19 f4       	brne	.+6      	; 0x22ce <__addsf3+0x24>
    22c8:	26 f4       	brtc	.+8      	; 0x22d2 <__addsf3+0x28>
    22ca:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__fp_nan>
    22ce:	0e f4       	brtc	.+2      	; 0x22d2 <__addsf3+0x28>
    22d0:	e0 95       	com	r30
    22d2:	e7 fb       	bst	r30, 7
    22d4:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__fp_inf>

000022d8 <__addsf3x>:
    22d8:	e9 2f       	mov	r30, r25
    22da:	0e 94 8b 13 	call	0x2716	; 0x2716 <__fp_split3>
    22de:	58 f3       	brcs	.-42     	; 0x22b6 <__addsf3+0xc>
    22e0:	ba 17       	cp	r27, r26
    22e2:	62 07       	cpc	r22, r18
    22e4:	73 07       	cpc	r23, r19
    22e6:	84 07       	cpc	r24, r20
    22e8:	95 07       	cpc	r25, r21
    22ea:	20 f0       	brcs	.+8      	; 0x22f4 <__addsf3x+0x1c>
    22ec:	79 f4       	brne	.+30     	; 0x230c <__addsf3x+0x34>
    22ee:	a6 f5       	brtc	.+104    	; 0x2358 <__addsf3x+0x80>
    22f0:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__fp_zero>
    22f4:	0e f4       	brtc	.+2      	; 0x22f8 <__addsf3x+0x20>
    22f6:	e0 95       	com	r30
    22f8:	0b 2e       	mov	r0, r27
    22fa:	ba 2f       	mov	r27, r26
    22fc:	a0 2d       	mov	r26, r0
    22fe:	0b 01       	movw	r0, r22
    2300:	b9 01       	movw	r22, r18
    2302:	90 01       	movw	r18, r0
    2304:	0c 01       	movw	r0, r24
    2306:	ca 01       	movw	r24, r20
    2308:	a0 01       	movw	r20, r0
    230a:	11 24       	eor	r1, r1
    230c:	ff 27       	eor	r31, r31
    230e:	59 1b       	sub	r21, r25
    2310:	99 f0       	breq	.+38     	; 0x2338 <__addsf3x+0x60>
    2312:	59 3f       	cpi	r21, 0xF9	; 249
    2314:	50 f4       	brcc	.+20     	; 0x232a <__addsf3x+0x52>
    2316:	50 3e       	cpi	r21, 0xE0	; 224
    2318:	68 f1       	brcs	.+90     	; 0x2374 <__addsf3x+0x9c>
    231a:	1a 16       	cp	r1, r26
    231c:	f0 40       	sbci	r31, 0x00	; 0
    231e:	a2 2f       	mov	r26, r18
    2320:	23 2f       	mov	r18, r19
    2322:	34 2f       	mov	r19, r20
    2324:	44 27       	eor	r20, r20
    2326:	58 5f       	subi	r21, 0xF8	; 248
    2328:	f3 cf       	rjmp	.-26     	; 0x2310 <__addsf3x+0x38>
    232a:	46 95       	lsr	r20
    232c:	37 95       	ror	r19
    232e:	27 95       	ror	r18
    2330:	a7 95       	ror	r26
    2332:	f0 40       	sbci	r31, 0x00	; 0
    2334:	53 95       	inc	r21
    2336:	c9 f7       	brne	.-14     	; 0x232a <__addsf3x+0x52>
    2338:	7e f4       	brtc	.+30     	; 0x2358 <__addsf3x+0x80>
    233a:	1f 16       	cp	r1, r31
    233c:	ba 0b       	sbc	r27, r26
    233e:	62 0b       	sbc	r22, r18
    2340:	73 0b       	sbc	r23, r19
    2342:	84 0b       	sbc	r24, r20
    2344:	ba f0       	brmi	.+46     	; 0x2374 <__addsf3x+0x9c>
    2346:	91 50       	subi	r25, 0x01	; 1
    2348:	a1 f0       	breq	.+40     	; 0x2372 <__addsf3x+0x9a>
    234a:	ff 0f       	add	r31, r31
    234c:	bb 1f       	adc	r27, r27
    234e:	66 1f       	adc	r22, r22
    2350:	77 1f       	adc	r23, r23
    2352:	88 1f       	adc	r24, r24
    2354:	c2 f7       	brpl	.-16     	; 0x2346 <__addsf3x+0x6e>
    2356:	0e c0       	rjmp	.+28     	; 0x2374 <__addsf3x+0x9c>
    2358:	ba 0f       	add	r27, r26
    235a:	62 1f       	adc	r22, r18
    235c:	73 1f       	adc	r23, r19
    235e:	84 1f       	adc	r24, r20
    2360:	48 f4       	brcc	.+18     	; 0x2374 <__addsf3x+0x9c>
    2362:	87 95       	ror	r24
    2364:	77 95       	ror	r23
    2366:	67 95       	ror	r22
    2368:	b7 95       	ror	r27
    236a:	f7 95       	ror	r31
    236c:	9e 3f       	cpi	r25, 0xFE	; 254
    236e:	08 f0       	brcs	.+2      	; 0x2372 <__addsf3x+0x9a>
    2370:	b0 cf       	rjmp	.-160    	; 0x22d2 <__addsf3+0x28>
    2372:	93 95       	inc	r25
    2374:	88 0f       	add	r24, r24
    2376:	08 f0       	brcs	.+2      	; 0x237a <__addsf3x+0xa2>
    2378:	99 27       	eor	r25, r25
    237a:	ee 0f       	add	r30, r30
    237c:	97 95       	ror	r25
    237e:	87 95       	ror	r24
    2380:	08 95       	ret

00002382 <__cmpsf2>:
    2382:	0e 94 16 13 	call	0x262c	; 0x262c <__fp_cmp>
    2386:	08 f4       	brcc	.+2      	; 0x238a <__cmpsf2+0x8>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	08 95       	ret

0000238c <__divsf3>:
    238c:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__divsf3x>
    2390:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__fp_round>
    2394:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__fp_pscB>
    2398:	58 f0       	brcs	.+22     	; 0x23b0 <__divsf3+0x24>
    239a:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__fp_pscA>
    239e:	40 f0       	brcs	.+16     	; 0x23b0 <__divsf3+0x24>
    23a0:	29 f4       	brne	.+10     	; 0x23ac <__divsf3+0x20>
    23a2:	5f 3f       	cpi	r21, 0xFF	; 255
    23a4:	29 f0       	breq	.+10     	; 0x23b0 <__divsf3+0x24>
    23a6:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__fp_inf>
    23aa:	51 11       	cpse	r21, r1
    23ac:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__fp_szero>
    23b0:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__fp_nan>

000023b4 <__divsf3x>:
    23b4:	0e 94 8b 13 	call	0x2716	; 0x2716 <__fp_split3>
    23b8:	68 f3       	brcs	.-38     	; 0x2394 <__divsf3+0x8>

000023ba <__divsf3_pse>:
    23ba:	99 23       	and	r25, r25
    23bc:	b1 f3       	breq	.-20     	; 0x23aa <__divsf3+0x1e>
    23be:	55 23       	and	r21, r21
    23c0:	91 f3       	breq	.-28     	; 0x23a6 <__divsf3+0x1a>
    23c2:	95 1b       	sub	r25, r21
    23c4:	55 0b       	sbc	r21, r21
    23c6:	bb 27       	eor	r27, r27
    23c8:	aa 27       	eor	r26, r26
    23ca:	62 17       	cp	r22, r18
    23cc:	73 07       	cpc	r23, r19
    23ce:	84 07       	cpc	r24, r20
    23d0:	38 f0       	brcs	.+14     	; 0x23e0 <__divsf3_pse+0x26>
    23d2:	9f 5f       	subi	r25, 0xFF	; 255
    23d4:	5f 4f       	sbci	r21, 0xFF	; 255
    23d6:	22 0f       	add	r18, r18
    23d8:	33 1f       	adc	r19, r19
    23da:	44 1f       	adc	r20, r20
    23dc:	aa 1f       	adc	r26, r26
    23de:	a9 f3       	breq	.-22     	; 0x23ca <__divsf3_pse+0x10>
    23e0:	35 d0       	rcall	.+106    	; 0x244c <__divsf3_pse+0x92>
    23e2:	0e 2e       	mov	r0, r30
    23e4:	3a f0       	brmi	.+14     	; 0x23f4 <__divsf3_pse+0x3a>
    23e6:	e0 e8       	ldi	r30, 0x80	; 128
    23e8:	32 d0       	rcall	.+100    	; 0x244e <__divsf3_pse+0x94>
    23ea:	91 50       	subi	r25, 0x01	; 1
    23ec:	50 40       	sbci	r21, 0x00	; 0
    23ee:	e6 95       	lsr	r30
    23f0:	00 1c       	adc	r0, r0
    23f2:	ca f7       	brpl	.-14     	; 0x23e6 <__divsf3_pse+0x2c>
    23f4:	2b d0       	rcall	.+86     	; 0x244c <__divsf3_pse+0x92>
    23f6:	fe 2f       	mov	r31, r30
    23f8:	29 d0       	rcall	.+82     	; 0x244c <__divsf3_pse+0x92>
    23fa:	66 0f       	add	r22, r22
    23fc:	77 1f       	adc	r23, r23
    23fe:	88 1f       	adc	r24, r24
    2400:	bb 1f       	adc	r27, r27
    2402:	26 17       	cp	r18, r22
    2404:	37 07       	cpc	r19, r23
    2406:	48 07       	cpc	r20, r24
    2408:	ab 07       	cpc	r26, r27
    240a:	b0 e8       	ldi	r27, 0x80	; 128
    240c:	09 f0       	breq	.+2      	; 0x2410 <__divsf3_pse+0x56>
    240e:	bb 0b       	sbc	r27, r27
    2410:	80 2d       	mov	r24, r0
    2412:	bf 01       	movw	r22, r30
    2414:	ff 27       	eor	r31, r31
    2416:	93 58       	subi	r25, 0x83	; 131
    2418:	5f 4f       	sbci	r21, 0xFF	; 255
    241a:	3a f0       	brmi	.+14     	; 0x242a <__divsf3_pse+0x70>
    241c:	9e 3f       	cpi	r25, 0xFE	; 254
    241e:	51 05       	cpc	r21, r1
    2420:	78 f0       	brcs	.+30     	; 0x2440 <__divsf3_pse+0x86>
    2422:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__fp_inf>
    2426:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__fp_szero>
    242a:	5f 3f       	cpi	r21, 0xFF	; 255
    242c:	e4 f3       	brlt	.-8      	; 0x2426 <__divsf3_pse+0x6c>
    242e:	98 3e       	cpi	r25, 0xE8	; 232
    2430:	d4 f3       	brlt	.-12     	; 0x2426 <__divsf3_pse+0x6c>
    2432:	86 95       	lsr	r24
    2434:	77 95       	ror	r23
    2436:	67 95       	ror	r22
    2438:	b7 95       	ror	r27
    243a:	f7 95       	ror	r31
    243c:	9f 5f       	subi	r25, 0xFF	; 255
    243e:	c9 f7       	brne	.-14     	; 0x2432 <__divsf3_pse+0x78>
    2440:	88 0f       	add	r24, r24
    2442:	91 1d       	adc	r25, r1
    2444:	96 95       	lsr	r25
    2446:	87 95       	ror	r24
    2448:	97 f9       	bld	r25, 7
    244a:	08 95       	ret
    244c:	e1 e0       	ldi	r30, 0x01	; 1
    244e:	66 0f       	add	r22, r22
    2450:	77 1f       	adc	r23, r23
    2452:	88 1f       	adc	r24, r24
    2454:	bb 1f       	adc	r27, r27
    2456:	62 17       	cp	r22, r18
    2458:	73 07       	cpc	r23, r19
    245a:	84 07       	cpc	r24, r20
    245c:	ba 07       	cpc	r27, r26
    245e:	20 f0       	brcs	.+8      	; 0x2468 <__divsf3_pse+0xae>
    2460:	62 1b       	sub	r22, r18
    2462:	73 0b       	sbc	r23, r19
    2464:	84 0b       	sbc	r24, r20
    2466:	ba 0b       	sbc	r27, r26
    2468:	ee 1f       	adc	r30, r30
    246a:	88 f7       	brcc	.-30     	; 0x244e <__divsf3_pse+0x94>
    246c:	e0 95       	com	r30
    246e:	08 95       	ret

00002470 <__fixsfsi>:
    2470:	0e 94 3f 12 	call	0x247e	; 0x247e <__fixunssfsi>
    2474:	68 94       	set
    2476:	b1 11       	cpse	r27, r1
    2478:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__fp_szero>
    247c:	08 95       	ret

0000247e <__fixunssfsi>:
    247e:	0e 94 93 13 	call	0x2726	; 0x2726 <__fp_splitA>
    2482:	88 f0       	brcs	.+34     	; 0x24a6 <__fixunssfsi+0x28>
    2484:	9f 57       	subi	r25, 0x7F	; 127
    2486:	98 f0       	brcs	.+38     	; 0x24ae <__fixunssfsi+0x30>
    2488:	b9 2f       	mov	r27, r25
    248a:	99 27       	eor	r25, r25
    248c:	b7 51       	subi	r27, 0x17	; 23
    248e:	b0 f0       	brcs	.+44     	; 0x24bc <__fixunssfsi+0x3e>
    2490:	e1 f0       	breq	.+56     	; 0x24ca <__fixunssfsi+0x4c>
    2492:	66 0f       	add	r22, r22
    2494:	77 1f       	adc	r23, r23
    2496:	88 1f       	adc	r24, r24
    2498:	99 1f       	adc	r25, r25
    249a:	1a f0       	brmi	.+6      	; 0x24a2 <__fixunssfsi+0x24>
    249c:	ba 95       	dec	r27
    249e:	c9 f7       	brne	.-14     	; 0x2492 <__fixunssfsi+0x14>
    24a0:	14 c0       	rjmp	.+40     	; 0x24ca <__fixunssfsi+0x4c>
    24a2:	b1 30       	cpi	r27, 0x01	; 1
    24a4:	91 f0       	breq	.+36     	; 0x24ca <__fixunssfsi+0x4c>
    24a6:	0e 94 c5 13 	call	0x278a	; 0x278a <__fp_zero>
    24aa:	b1 e0       	ldi	r27, 0x01	; 1
    24ac:	08 95       	ret
    24ae:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__fp_zero>
    24b2:	67 2f       	mov	r22, r23
    24b4:	78 2f       	mov	r23, r24
    24b6:	88 27       	eor	r24, r24
    24b8:	b8 5f       	subi	r27, 0xF8	; 248
    24ba:	39 f0       	breq	.+14     	; 0x24ca <__fixunssfsi+0x4c>
    24bc:	b9 3f       	cpi	r27, 0xF9	; 249
    24be:	cc f3       	brlt	.-14     	; 0x24b2 <__fixunssfsi+0x34>
    24c0:	86 95       	lsr	r24
    24c2:	77 95       	ror	r23
    24c4:	67 95       	ror	r22
    24c6:	b3 95       	inc	r27
    24c8:	d9 f7       	brne	.-10     	; 0x24c0 <__fixunssfsi+0x42>
    24ca:	3e f4       	brtc	.+14     	; 0x24da <__fixunssfsi+0x5c>
    24cc:	90 95       	com	r25
    24ce:	80 95       	com	r24
    24d0:	70 95       	com	r23
    24d2:	61 95       	neg	r22
    24d4:	7f 4f       	sbci	r23, 0xFF	; 255
    24d6:	8f 4f       	sbci	r24, 0xFF	; 255
    24d8:	9f 4f       	sbci	r25, 0xFF	; 255
    24da:	08 95       	ret

000024dc <__floatunsisf>:
    24dc:	e8 94       	clt
    24de:	09 c0       	rjmp	.+18     	; 0x24f2 <__floatsisf+0x12>

000024e0 <__floatsisf>:
    24e0:	97 fb       	bst	r25, 7
    24e2:	3e f4       	brtc	.+14     	; 0x24f2 <__floatsisf+0x12>
    24e4:	90 95       	com	r25
    24e6:	80 95       	com	r24
    24e8:	70 95       	com	r23
    24ea:	61 95       	neg	r22
    24ec:	7f 4f       	sbci	r23, 0xFF	; 255
    24ee:	8f 4f       	sbci	r24, 0xFF	; 255
    24f0:	9f 4f       	sbci	r25, 0xFF	; 255
    24f2:	99 23       	and	r25, r25
    24f4:	a9 f0       	breq	.+42     	; 0x2520 <__floatsisf+0x40>
    24f6:	f9 2f       	mov	r31, r25
    24f8:	96 e9       	ldi	r25, 0x96	; 150
    24fa:	bb 27       	eor	r27, r27
    24fc:	93 95       	inc	r25
    24fe:	f6 95       	lsr	r31
    2500:	87 95       	ror	r24
    2502:	77 95       	ror	r23
    2504:	67 95       	ror	r22
    2506:	b7 95       	ror	r27
    2508:	f1 11       	cpse	r31, r1
    250a:	f8 cf       	rjmp	.-16     	; 0x24fc <__floatsisf+0x1c>
    250c:	fa f4       	brpl	.+62     	; 0x254c <__floatsisf+0x6c>
    250e:	bb 0f       	add	r27, r27
    2510:	11 f4       	brne	.+4      	; 0x2516 <__floatsisf+0x36>
    2512:	60 ff       	sbrs	r22, 0
    2514:	1b c0       	rjmp	.+54     	; 0x254c <__floatsisf+0x6c>
    2516:	6f 5f       	subi	r22, 0xFF	; 255
    2518:	7f 4f       	sbci	r23, 0xFF	; 255
    251a:	8f 4f       	sbci	r24, 0xFF	; 255
    251c:	9f 4f       	sbci	r25, 0xFF	; 255
    251e:	16 c0       	rjmp	.+44     	; 0x254c <__floatsisf+0x6c>
    2520:	88 23       	and	r24, r24
    2522:	11 f0       	breq	.+4      	; 0x2528 <__floatsisf+0x48>
    2524:	96 e9       	ldi	r25, 0x96	; 150
    2526:	11 c0       	rjmp	.+34     	; 0x254a <__floatsisf+0x6a>
    2528:	77 23       	and	r23, r23
    252a:	21 f0       	breq	.+8      	; 0x2534 <__floatsisf+0x54>
    252c:	9e e8       	ldi	r25, 0x8E	; 142
    252e:	87 2f       	mov	r24, r23
    2530:	76 2f       	mov	r23, r22
    2532:	05 c0       	rjmp	.+10     	; 0x253e <__floatsisf+0x5e>
    2534:	66 23       	and	r22, r22
    2536:	71 f0       	breq	.+28     	; 0x2554 <__floatsisf+0x74>
    2538:	96 e8       	ldi	r25, 0x86	; 134
    253a:	86 2f       	mov	r24, r22
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	2a f0       	brmi	.+10     	; 0x254c <__floatsisf+0x6c>
    2542:	9a 95       	dec	r25
    2544:	66 0f       	add	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	88 1f       	adc	r24, r24
    254a:	da f7       	brpl	.-10     	; 0x2542 <__floatsisf+0x62>
    254c:	88 0f       	add	r24, r24
    254e:	96 95       	lsr	r25
    2550:	87 95       	ror	r24
    2552:	97 f9       	bld	r25, 7
    2554:	08 95       	ret

00002556 <floor>:
    2556:	0e 94 ad 13 	call	0x275a	; 0x275a <__fp_trunc>
    255a:	90 f0       	brcs	.+36     	; 0x2580 <floor+0x2a>
    255c:	9f 37       	cpi	r25, 0x7F	; 127
    255e:	48 f4       	brcc	.+18     	; 0x2572 <floor+0x1c>
    2560:	91 11       	cpse	r25, r1
    2562:	16 f0       	brts	.+4      	; 0x2568 <floor+0x12>
    2564:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__fp_szero>
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	80 e8       	ldi	r24, 0x80	; 128
    256e:	9f eb       	ldi	r25, 0xBF	; 191
    2570:	08 95       	ret
    2572:	26 f4       	brtc	.+8      	; 0x257c <floor+0x26>
    2574:	1b 16       	cp	r1, r27
    2576:	61 1d       	adc	r22, r1
    2578:	71 1d       	adc	r23, r1
    257a:	81 1d       	adc	r24, r1
    257c:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__fp_mintl>
    2580:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__fp_mpack>
    2584:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__fp_pscA>
    2588:	20 f0       	brcs	.+8      	; 0x2592 <floor+0x3c>
    258a:	19 f0       	breq	.+6      	; 0x2592 <floor+0x3c>
    258c:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__fp_pscB>
    2590:	50 f4       	brcc	.+20     	; 0x25a6 <fmod+0xc>
    2592:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__fp_nan>
    2596:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__fp_szero>

0000259a <fmod>:
    259a:	e9 2f       	mov	r30, r25
    259c:	0e 94 8b 13 	call	0x2716	; 0x2716 <__fp_split3>
    25a0:	88 f3       	brcs	.-30     	; 0x2584 <floor+0x2e>
    25a2:	55 23       	and	r21, r21
    25a4:	b1 f3       	breq	.-20     	; 0x2592 <floor+0x3c>
    25a6:	e7 fb       	bst	r30, 7
    25a8:	62 17       	cp	r22, r18
    25aa:	73 07       	cpc	r23, r19
    25ac:	84 07       	cpc	r24, r20
    25ae:	95 07       	cpc	r25, r21
    25b0:	a8 f1       	brcs	.+106    	; 0x261c <fmod+0x82>
    25b2:	89 f3       	breq	.-30     	; 0x2596 <floor+0x40>
    25b4:	e9 2f       	mov	r30, r25
    25b6:	ff 27       	eor	r31, r31
    25b8:	88 23       	and	r24, r24
    25ba:	2a f0       	brmi	.+10     	; 0x25c6 <fmod+0x2c>
    25bc:	31 97       	sbiw	r30, 0x01	; 1
    25be:	66 0f       	add	r22, r22
    25c0:	77 1f       	adc	r23, r23
    25c2:	88 1f       	adc	r24, r24
    25c4:	da f7       	brpl	.-10     	; 0x25bc <fmod+0x22>
    25c6:	95 2f       	mov	r25, r21
    25c8:	55 27       	eor	r21, r21
    25ca:	44 23       	and	r20, r20
    25cc:	32 f0       	brmi	.+12     	; 0x25da <fmod+0x40>
    25ce:	91 50       	subi	r25, 0x01	; 1
    25d0:	50 40       	sbci	r21, 0x00	; 0
    25d2:	22 0f       	add	r18, r18
    25d4:	33 1f       	adc	r19, r19
    25d6:	44 1f       	adc	r20, r20
    25d8:	d2 f7       	brpl	.-12     	; 0x25ce <fmod+0x34>
    25da:	bb 27       	eor	r27, r27
    25dc:	e9 1b       	sub	r30, r25
    25de:	f5 0b       	sbc	r31, r21
    25e0:	62 1b       	sub	r22, r18
    25e2:	73 0b       	sbc	r23, r19
    25e4:	84 0b       	sbc	r24, r20
    25e6:	b1 09       	sbc	r27, r1
    25e8:	b1 f2       	breq	.-84     	; 0x2596 <floor+0x40>
    25ea:	22 f4       	brpl	.+8      	; 0x25f4 <fmod+0x5a>
    25ec:	62 0f       	add	r22, r18
    25ee:	73 1f       	adc	r23, r19
    25f0:	84 1f       	adc	r24, r20
    25f2:	b1 1d       	adc	r27, r1
    25f4:	31 97       	sbiw	r30, 0x01	; 1
    25f6:	2a f0       	brmi	.+10     	; 0x2602 <fmod+0x68>
    25f8:	66 0f       	add	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	88 1f       	adc	r24, r24
    25fe:	bb 1f       	adc	r27, r27
    2600:	ef cf       	rjmp	.-34     	; 0x25e0 <fmod+0x46>
    2602:	91 50       	subi	r25, 0x01	; 1
    2604:	50 40       	sbci	r21, 0x00	; 0
    2606:	62 f0       	brmi	.+24     	; 0x2620 <fmod+0x86>
    2608:	41 f0       	breq	.+16     	; 0x261a <fmod+0x80>
    260a:	88 23       	and	r24, r24
    260c:	32 f0       	brmi	.+12     	; 0x261a <fmod+0x80>
    260e:	66 0f       	add	r22, r22
    2610:	77 1f       	adc	r23, r23
    2612:	88 1f       	adc	r24, r24
    2614:	91 50       	subi	r25, 0x01	; 1
    2616:	50 40       	sbci	r21, 0x00	; 0
    2618:	c1 f7       	brne	.-16     	; 0x260a <fmod+0x70>
    261a:	93 95       	inc	r25
    261c:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__fp_mpack>
    2620:	86 95       	lsr	r24
    2622:	77 95       	ror	r23
    2624:	67 95       	ror	r22
    2626:	9f 5f       	subi	r25, 0xFF	; 255
    2628:	d9 f7       	brne	.-10     	; 0x2620 <fmod+0x86>
    262a:	f7 cf       	rjmp	.-18     	; 0x261a <fmod+0x80>

0000262c <__fp_cmp>:
    262c:	99 0f       	add	r25, r25
    262e:	00 08       	sbc	r0, r0
    2630:	55 0f       	add	r21, r21
    2632:	aa 0b       	sbc	r26, r26
    2634:	e0 e8       	ldi	r30, 0x80	; 128
    2636:	fe ef       	ldi	r31, 0xFE	; 254
    2638:	16 16       	cp	r1, r22
    263a:	17 06       	cpc	r1, r23
    263c:	e8 07       	cpc	r30, r24
    263e:	f9 07       	cpc	r31, r25
    2640:	c0 f0       	brcs	.+48     	; 0x2672 <__fp_cmp+0x46>
    2642:	12 16       	cp	r1, r18
    2644:	13 06       	cpc	r1, r19
    2646:	e4 07       	cpc	r30, r20
    2648:	f5 07       	cpc	r31, r21
    264a:	98 f0       	brcs	.+38     	; 0x2672 <__fp_cmp+0x46>
    264c:	62 1b       	sub	r22, r18
    264e:	73 0b       	sbc	r23, r19
    2650:	84 0b       	sbc	r24, r20
    2652:	95 0b       	sbc	r25, r21
    2654:	39 f4       	brne	.+14     	; 0x2664 <__fp_cmp+0x38>
    2656:	0a 26       	eor	r0, r26
    2658:	61 f0       	breq	.+24     	; 0x2672 <__fp_cmp+0x46>
    265a:	23 2b       	or	r18, r19
    265c:	24 2b       	or	r18, r20
    265e:	25 2b       	or	r18, r21
    2660:	21 f4       	brne	.+8      	; 0x266a <__fp_cmp+0x3e>
    2662:	08 95       	ret
    2664:	0a 26       	eor	r0, r26
    2666:	09 f4       	brne	.+2      	; 0x266a <__fp_cmp+0x3e>
    2668:	a1 40       	sbci	r26, 0x01	; 1
    266a:	a6 95       	lsr	r26
    266c:	8f ef       	ldi	r24, 0xFF	; 255
    266e:	81 1d       	adc	r24, r1
    2670:	81 1d       	adc	r24, r1
    2672:	08 95       	ret

00002674 <__fp_inf>:
    2674:	97 f9       	bld	r25, 7
    2676:	9f 67       	ori	r25, 0x7F	; 127
    2678:	80 e8       	ldi	r24, 0x80	; 128
    267a:	70 e0       	ldi	r23, 0x00	; 0
    267c:	60 e0       	ldi	r22, 0x00	; 0
    267e:	08 95       	ret

00002680 <__fp_mintl>:
    2680:	88 23       	and	r24, r24
    2682:	71 f4       	brne	.+28     	; 0x26a0 <__fp_mintl+0x20>
    2684:	77 23       	and	r23, r23
    2686:	21 f0       	breq	.+8      	; 0x2690 <__fp_mintl+0x10>
    2688:	98 50       	subi	r25, 0x08	; 8
    268a:	87 2b       	or	r24, r23
    268c:	76 2f       	mov	r23, r22
    268e:	07 c0       	rjmp	.+14     	; 0x269e <__fp_mintl+0x1e>
    2690:	66 23       	and	r22, r22
    2692:	11 f4       	brne	.+4      	; 0x2698 <__fp_mintl+0x18>
    2694:	99 27       	eor	r25, r25
    2696:	0d c0       	rjmp	.+26     	; 0x26b2 <__fp_mintl+0x32>
    2698:	90 51       	subi	r25, 0x10	; 16
    269a:	86 2b       	or	r24, r22
    269c:	70 e0       	ldi	r23, 0x00	; 0
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	2a f0       	brmi	.+10     	; 0x26ac <__fp_mintl+0x2c>
    26a2:	9a 95       	dec	r25
    26a4:	66 0f       	add	r22, r22
    26a6:	77 1f       	adc	r23, r23
    26a8:	88 1f       	adc	r24, r24
    26aa:	da f7       	brpl	.-10     	; 0x26a2 <__fp_mintl+0x22>
    26ac:	88 0f       	add	r24, r24
    26ae:	96 95       	lsr	r25
    26b0:	87 95       	ror	r24
    26b2:	97 f9       	bld	r25, 7
    26b4:	08 95       	ret

000026b6 <__fp_mpack>:
    26b6:	9f 3f       	cpi	r25, 0xFF	; 255
    26b8:	31 f0       	breq	.+12     	; 0x26c6 <__fp_mpack_finite+0xc>

000026ba <__fp_mpack_finite>:
    26ba:	91 50       	subi	r25, 0x01	; 1
    26bc:	20 f4       	brcc	.+8      	; 0x26c6 <__fp_mpack_finite+0xc>
    26be:	87 95       	ror	r24
    26c0:	77 95       	ror	r23
    26c2:	67 95       	ror	r22
    26c4:	b7 95       	ror	r27
    26c6:	88 0f       	add	r24, r24
    26c8:	91 1d       	adc	r25, r1
    26ca:	96 95       	lsr	r25
    26cc:	87 95       	ror	r24
    26ce:	97 f9       	bld	r25, 7
    26d0:	08 95       	ret

000026d2 <__fp_nan>:
    26d2:	9f ef       	ldi	r25, 0xFF	; 255
    26d4:	80 ec       	ldi	r24, 0xC0	; 192
    26d6:	08 95       	ret

000026d8 <__fp_pscA>:
    26d8:	00 24       	eor	r0, r0
    26da:	0a 94       	dec	r0
    26dc:	16 16       	cp	r1, r22
    26de:	17 06       	cpc	r1, r23
    26e0:	18 06       	cpc	r1, r24
    26e2:	09 06       	cpc	r0, r25
    26e4:	08 95       	ret

000026e6 <__fp_pscB>:
    26e6:	00 24       	eor	r0, r0
    26e8:	0a 94       	dec	r0
    26ea:	12 16       	cp	r1, r18
    26ec:	13 06       	cpc	r1, r19
    26ee:	14 06       	cpc	r1, r20
    26f0:	05 06       	cpc	r0, r21
    26f2:	08 95       	ret

000026f4 <__fp_round>:
    26f4:	09 2e       	mov	r0, r25
    26f6:	03 94       	inc	r0
    26f8:	00 0c       	add	r0, r0
    26fa:	11 f4       	brne	.+4      	; 0x2700 <__fp_round+0xc>
    26fc:	88 23       	and	r24, r24
    26fe:	52 f0       	brmi	.+20     	; 0x2714 <__fp_round+0x20>
    2700:	bb 0f       	add	r27, r27
    2702:	40 f4       	brcc	.+16     	; 0x2714 <__fp_round+0x20>
    2704:	bf 2b       	or	r27, r31
    2706:	11 f4       	brne	.+4      	; 0x270c <__fp_round+0x18>
    2708:	60 ff       	sbrs	r22, 0
    270a:	04 c0       	rjmp	.+8      	; 0x2714 <__fp_round+0x20>
    270c:	6f 5f       	subi	r22, 0xFF	; 255
    270e:	7f 4f       	sbci	r23, 0xFF	; 255
    2710:	8f 4f       	sbci	r24, 0xFF	; 255
    2712:	9f 4f       	sbci	r25, 0xFF	; 255
    2714:	08 95       	ret

00002716 <__fp_split3>:
    2716:	57 fd       	sbrc	r21, 7
    2718:	90 58       	subi	r25, 0x80	; 128
    271a:	44 0f       	add	r20, r20
    271c:	55 1f       	adc	r21, r21
    271e:	59 f0       	breq	.+22     	; 0x2736 <__fp_splitA+0x10>
    2720:	5f 3f       	cpi	r21, 0xFF	; 255
    2722:	71 f0       	breq	.+28     	; 0x2740 <__fp_splitA+0x1a>
    2724:	47 95       	ror	r20

00002726 <__fp_splitA>:
    2726:	88 0f       	add	r24, r24
    2728:	97 fb       	bst	r25, 7
    272a:	99 1f       	adc	r25, r25
    272c:	61 f0       	breq	.+24     	; 0x2746 <__fp_splitA+0x20>
    272e:	9f 3f       	cpi	r25, 0xFF	; 255
    2730:	79 f0       	breq	.+30     	; 0x2750 <__fp_splitA+0x2a>
    2732:	87 95       	ror	r24
    2734:	08 95       	ret
    2736:	12 16       	cp	r1, r18
    2738:	13 06       	cpc	r1, r19
    273a:	14 06       	cpc	r1, r20
    273c:	55 1f       	adc	r21, r21
    273e:	f2 cf       	rjmp	.-28     	; 0x2724 <__fp_split3+0xe>
    2740:	46 95       	lsr	r20
    2742:	f1 df       	rcall	.-30     	; 0x2726 <__fp_splitA>
    2744:	08 c0       	rjmp	.+16     	; 0x2756 <__fp_splitA+0x30>
    2746:	16 16       	cp	r1, r22
    2748:	17 06       	cpc	r1, r23
    274a:	18 06       	cpc	r1, r24
    274c:	99 1f       	adc	r25, r25
    274e:	f1 cf       	rjmp	.-30     	; 0x2732 <__fp_splitA+0xc>
    2750:	86 95       	lsr	r24
    2752:	71 05       	cpc	r23, r1
    2754:	61 05       	cpc	r22, r1
    2756:	08 94       	sec
    2758:	08 95       	ret

0000275a <__fp_trunc>:
    275a:	0e 94 93 13 	call	0x2726	; 0x2726 <__fp_splitA>
    275e:	a0 f0       	brcs	.+40     	; 0x2788 <__fp_trunc+0x2e>
    2760:	be e7       	ldi	r27, 0x7E	; 126
    2762:	b9 17       	cp	r27, r25
    2764:	88 f4       	brcc	.+34     	; 0x2788 <__fp_trunc+0x2e>
    2766:	bb 27       	eor	r27, r27
    2768:	9f 38       	cpi	r25, 0x8F	; 143
    276a:	60 f4       	brcc	.+24     	; 0x2784 <__fp_trunc+0x2a>
    276c:	16 16       	cp	r1, r22
    276e:	b1 1d       	adc	r27, r1
    2770:	67 2f       	mov	r22, r23
    2772:	78 2f       	mov	r23, r24
    2774:	88 27       	eor	r24, r24
    2776:	98 5f       	subi	r25, 0xF8	; 248
    2778:	f7 cf       	rjmp	.-18     	; 0x2768 <__fp_trunc+0xe>
    277a:	86 95       	lsr	r24
    277c:	77 95       	ror	r23
    277e:	67 95       	ror	r22
    2780:	b1 1d       	adc	r27, r1
    2782:	93 95       	inc	r25
    2784:	96 39       	cpi	r25, 0x96	; 150
    2786:	c8 f3       	brcs	.-14     	; 0x277a <__fp_trunc+0x20>
    2788:	08 95       	ret

0000278a <__fp_zero>:
    278a:	e8 94       	clt

0000278c <__fp_szero>:
    278c:	bb 27       	eor	r27, r27
    278e:	66 27       	eor	r22, r22
    2790:	77 27       	eor	r23, r23
    2792:	cb 01       	movw	r24, r22
    2794:	97 f9       	bld	r25, 7
    2796:	08 95       	ret

00002798 <__mulsf3>:
    2798:	0e 94 df 13 	call	0x27be	; 0x27be <__mulsf3x>
    279c:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__fp_round>
    27a0:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__fp_pscA>
    27a4:	38 f0       	brcs	.+14     	; 0x27b4 <__mulsf3+0x1c>
    27a6:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__fp_pscB>
    27aa:	20 f0       	brcs	.+8      	; 0x27b4 <__mulsf3+0x1c>
    27ac:	95 23       	and	r25, r21
    27ae:	11 f0       	breq	.+4      	; 0x27b4 <__mulsf3+0x1c>
    27b0:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__fp_inf>
    27b4:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__fp_nan>
    27b8:	11 24       	eor	r1, r1
    27ba:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__fp_szero>

000027be <__mulsf3x>:
    27be:	0e 94 8b 13 	call	0x2716	; 0x2716 <__fp_split3>
    27c2:	70 f3       	brcs	.-36     	; 0x27a0 <__mulsf3+0x8>

000027c4 <__mulsf3_pse>:
    27c4:	95 9f       	mul	r25, r21
    27c6:	c1 f3       	breq	.-16     	; 0x27b8 <__mulsf3+0x20>
    27c8:	95 0f       	add	r25, r21
    27ca:	50 e0       	ldi	r21, 0x00	; 0
    27cc:	55 1f       	adc	r21, r21
    27ce:	62 9f       	mul	r22, r18
    27d0:	f0 01       	movw	r30, r0
    27d2:	72 9f       	mul	r23, r18
    27d4:	bb 27       	eor	r27, r27
    27d6:	f0 0d       	add	r31, r0
    27d8:	b1 1d       	adc	r27, r1
    27da:	63 9f       	mul	r22, r19
    27dc:	aa 27       	eor	r26, r26
    27de:	f0 0d       	add	r31, r0
    27e0:	b1 1d       	adc	r27, r1
    27e2:	aa 1f       	adc	r26, r26
    27e4:	64 9f       	mul	r22, r20
    27e6:	66 27       	eor	r22, r22
    27e8:	b0 0d       	add	r27, r0
    27ea:	a1 1d       	adc	r26, r1
    27ec:	66 1f       	adc	r22, r22
    27ee:	82 9f       	mul	r24, r18
    27f0:	22 27       	eor	r18, r18
    27f2:	b0 0d       	add	r27, r0
    27f4:	a1 1d       	adc	r26, r1
    27f6:	62 1f       	adc	r22, r18
    27f8:	73 9f       	mul	r23, r19
    27fa:	b0 0d       	add	r27, r0
    27fc:	a1 1d       	adc	r26, r1
    27fe:	62 1f       	adc	r22, r18
    2800:	83 9f       	mul	r24, r19
    2802:	a0 0d       	add	r26, r0
    2804:	61 1d       	adc	r22, r1
    2806:	22 1f       	adc	r18, r18
    2808:	74 9f       	mul	r23, r20
    280a:	33 27       	eor	r19, r19
    280c:	a0 0d       	add	r26, r0
    280e:	61 1d       	adc	r22, r1
    2810:	23 1f       	adc	r18, r19
    2812:	84 9f       	mul	r24, r20
    2814:	60 0d       	add	r22, r0
    2816:	21 1d       	adc	r18, r1
    2818:	82 2f       	mov	r24, r18
    281a:	76 2f       	mov	r23, r22
    281c:	6a 2f       	mov	r22, r26
    281e:	11 24       	eor	r1, r1
    2820:	9f 57       	subi	r25, 0x7F	; 127
    2822:	50 40       	sbci	r21, 0x00	; 0
    2824:	9a f0       	brmi	.+38     	; 0x284c <__mulsf3_pse+0x88>
    2826:	f1 f0       	breq	.+60     	; 0x2864 <__mulsf3_pse+0xa0>
    2828:	88 23       	and	r24, r24
    282a:	4a f0       	brmi	.+18     	; 0x283e <__mulsf3_pse+0x7a>
    282c:	ee 0f       	add	r30, r30
    282e:	ff 1f       	adc	r31, r31
    2830:	bb 1f       	adc	r27, r27
    2832:	66 1f       	adc	r22, r22
    2834:	77 1f       	adc	r23, r23
    2836:	88 1f       	adc	r24, r24
    2838:	91 50       	subi	r25, 0x01	; 1
    283a:	50 40       	sbci	r21, 0x00	; 0
    283c:	a9 f7       	brne	.-22     	; 0x2828 <__mulsf3_pse+0x64>
    283e:	9e 3f       	cpi	r25, 0xFE	; 254
    2840:	51 05       	cpc	r21, r1
    2842:	80 f0       	brcs	.+32     	; 0x2864 <__mulsf3_pse+0xa0>
    2844:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__fp_inf>
    2848:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__fp_szero>
    284c:	5f 3f       	cpi	r21, 0xFF	; 255
    284e:	e4 f3       	brlt	.-8      	; 0x2848 <__mulsf3_pse+0x84>
    2850:	98 3e       	cpi	r25, 0xE8	; 232
    2852:	d4 f3       	brlt	.-12     	; 0x2848 <__mulsf3_pse+0x84>
    2854:	86 95       	lsr	r24
    2856:	77 95       	ror	r23
    2858:	67 95       	ror	r22
    285a:	b7 95       	ror	r27
    285c:	f7 95       	ror	r31
    285e:	e7 95       	ror	r30
    2860:	9f 5f       	subi	r25, 0xFF	; 255
    2862:	c1 f7       	brne	.-16     	; 0x2854 <__mulsf3_pse+0x90>
    2864:	fe 2b       	or	r31, r30
    2866:	88 0f       	add	r24, r24
    2868:	91 1d       	adc	r25, r1
    286a:	96 95       	lsr	r25
    286c:	87 95       	ror	r24
    286e:	97 f9       	bld	r25, 7
    2870:	08 95       	ret

00002872 <round>:
    2872:	0e 94 93 13 	call	0x2726	; 0x2726 <__fp_splitA>
    2876:	e8 f0       	brcs	.+58     	; 0x28b2 <round+0x40>
    2878:	9e 37       	cpi	r25, 0x7E	; 126
    287a:	e8 f0       	brcs	.+58     	; 0x28b6 <round+0x44>
    287c:	96 39       	cpi	r25, 0x96	; 150
    287e:	b8 f4       	brcc	.+46     	; 0x28ae <round+0x3c>
    2880:	9e 38       	cpi	r25, 0x8E	; 142
    2882:	48 f4       	brcc	.+18     	; 0x2896 <round+0x24>
    2884:	67 2f       	mov	r22, r23
    2886:	78 2f       	mov	r23, r24
    2888:	88 27       	eor	r24, r24
    288a:	98 5f       	subi	r25, 0xF8	; 248
    288c:	f9 cf       	rjmp	.-14     	; 0x2880 <round+0xe>
    288e:	86 95       	lsr	r24
    2890:	77 95       	ror	r23
    2892:	67 95       	ror	r22
    2894:	93 95       	inc	r25
    2896:	95 39       	cpi	r25, 0x95	; 149
    2898:	d0 f3       	brcs	.-12     	; 0x288e <round+0x1c>
    289a:	b6 2f       	mov	r27, r22
    289c:	b1 70       	andi	r27, 0x01	; 1
    289e:	6b 0f       	add	r22, r27
    28a0:	71 1d       	adc	r23, r1
    28a2:	81 1d       	adc	r24, r1
    28a4:	20 f4       	brcc	.+8      	; 0x28ae <round+0x3c>
    28a6:	87 95       	ror	r24
    28a8:	77 95       	ror	r23
    28aa:	67 95       	ror	r22
    28ac:	93 95       	inc	r25
    28ae:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__fp_mintl>
    28b2:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__fp_mpack>
    28b6:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__fp_szero>

000028ba <__ftoa_engine>:
    28ba:	28 30       	cpi	r18, 0x08	; 8
    28bc:	08 f0       	brcs	.+2      	; 0x28c0 <__ftoa_engine+0x6>
    28be:	27 e0       	ldi	r18, 0x07	; 7
    28c0:	33 27       	eor	r19, r19
    28c2:	da 01       	movw	r26, r20
    28c4:	99 0f       	add	r25, r25
    28c6:	31 1d       	adc	r19, r1
    28c8:	87 fd       	sbrc	r24, 7
    28ca:	91 60       	ori	r25, 0x01	; 1
    28cc:	00 96       	adiw	r24, 0x00	; 0
    28ce:	61 05       	cpc	r22, r1
    28d0:	71 05       	cpc	r23, r1
    28d2:	39 f4       	brne	.+14     	; 0x28e2 <__ftoa_engine+0x28>
    28d4:	32 60       	ori	r19, 0x02	; 2
    28d6:	2e 5f       	subi	r18, 0xFE	; 254
    28d8:	3d 93       	st	X+, r19
    28da:	30 e3       	ldi	r19, 0x30	; 48
    28dc:	2a 95       	dec	r18
    28de:	e1 f7       	brne	.-8      	; 0x28d8 <__ftoa_engine+0x1e>
    28e0:	08 95       	ret
    28e2:	9f 3f       	cpi	r25, 0xFF	; 255
    28e4:	30 f0       	brcs	.+12     	; 0x28f2 <__ftoa_engine+0x38>
    28e6:	80 38       	cpi	r24, 0x80	; 128
    28e8:	71 05       	cpc	r23, r1
    28ea:	61 05       	cpc	r22, r1
    28ec:	09 f0       	breq	.+2      	; 0x28f0 <__ftoa_engine+0x36>
    28ee:	3c 5f       	subi	r19, 0xFC	; 252
    28f0:	3c 5f       	subi	r19, 0xFC	; 252
    28f2:	3d 93       	st	X+, r19
    28f4:	91 30       	cpi	r25, 0x01	; 1
    28f6:	08 f0       	brcs	.+2      	; 0x28fa <__ftoa_engine+0x40>
    28f8:	80 68       	ori	r24, 0x80	; 128
    28fa:	91 1d       	adc	r25, r1
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	1f 93       	push	r17
    2902:	0f 93       	push	r16
    2904:	ff 92       	push	r15
    2906:	ef 92       	push	r14
    2908:	19 2f       	mov	r17, r25
    290a:	98 7f       	andi	r25, 0xF8	; 248
    290c:	96 95       	lsr	r25
    290e:	e9 2f       	mov	r30, r25
    2910:	96 95       	lsr	r25
    2912:	96 95       	lsr	r25
    2914:	e9 0f       	add	r30, r25
    2916:	ff 27       	eor	r31, r31
    2918:	e8 5f       	subi	r30, 0xF8	; 248
    291a:	fe 4f       	sbci	r31, 0xFE	; 254
    291c:	99 27       	eor	r25, r25
    291e:	33 27       	eor	r19, r19
    2920:	ee 24       	eor	r14, r14
    2922:	ff 24       	eor	r15, r15
    2924:	a7 01       	movw	r20, r14
    2926:	e7 01       	movw	r28, r14
    2928:	05 90       	lpm	r0, Z+
    292a:	08 94       	sec
    292c:	07 94       	ror	r0
    292e:	28 f4       	brcc	.+10     	; 0x293a <__ftoa_engine+0x80>
    2930:	36 0f       	add	r19, r22
    2932:	e7 1e       	adc	r14, r23
    2934:	f8 1e       	adc	r15, r24
    2936:	49 1f       	adc	r20, r25
    2938:	51 1d       	adc	r21, r1
    293a:	66 0f       	add	r22, r22
    293c:	77 1f       	adc	r23, r23
    293e:	88 1f       	adc	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	06 94       	lsr	r0
    2944:	a1 f7       	brne	.-24     	; 0x292e <__ftoa_engine+0x74>
    2946:	05 90       	lpm	r0, Z+
    2948:	07 94       	ror	r0
    294a:	28 f4       	brcc	.+10     	; 0x2956 <__ftoa_engine+0x9c>
    294c:	e7 0e       	add	r14, r23
    294e:	f8 1e       	adc	r15, r24
    2950:	49 1f       	adc	r20, r25
    2952:	56 1f       	adc	r21, r22
    2954:	c1 1d       	adc	r28, r1
    2956:	77 0f       	add	r23, r23
    2958:	88 1f       	adc	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	66 1f       	adc	r22, r22
    295e:	06 94       	lsr	r0
    2960:	a1 f7       	brne	.-24     	; 0x294a <__ftoa_engine+0x90>
    2962:	05 90       	lpm	r0, Z+
    2964:	07 94       	ror	r0
    2966:	28 f4       	brcc	.+10     	; 0x2972 <__ftoa_engine+0xb8>
    2968:	f8 0e       	add	r15, r24
    296a:	49 1f       	adc	r20, r25
    296c:	56 1f       	adc	r21, r22
    296e:	c7 1f       	adc	r28, r23
    2970:	d1 1d       	adc	r29, r1
    2972:	88 0f       	add	r24, r24
    2974:	99 1f       	adc	r25, r25
    2976:	66 1f       	adc	r22, r22
    2978:	77 1f       	adc	r23, r23
    297a:	06 94       	lsr	r0
    297c:	a1 f7       	brne	.-24     	; 0x2966 <__ftoa_engine+0xac>
    297e:	05 90       	lpm	r0, Z+
    2980:	07 94       	ror	r0
    2982:	20 f4       	brcc	.+8      	; 0x298c <__ftoa_engine+0xd2>
    2984:	49 0f       	add	r20, r25
    2986:	56 1f       	adc	r21, r22
    2988:	c7 1f       	adc	r28, r23
    298a:	d8 1f       	adc	r29, r24
    298c:	99 0f       	add	r25, r25
    298e:	66 1f       	adc	r22, r22
    2990:	77 1f       	adc	r23, r23
    2992:	88 1f       	adc	r24, r24
    2994:	06 94       	lsr	r0
    2996:	a9 f7       	brne	.-22     	; 0x2982 <__ftoa_engine+0xc8>
    2998:	84 91       	lpm	r24, Z
    299a:	10 95       	com	r17
    299c:	17 70       	andi	r17, 0x07	; 7
    299e:	41 f0       	breq	.+16     	; 0x29b0 <__ftoa_engine+0xf6>
    29a0:	d6 95       	lsr	r29
    29a2:	c7 95       	ror	r28
    29a4:	57 95       	ror	r21
    29a6:	47 95       	ror	r20
    29a8:	f7 94       	ror	r15
    29aa:	e7 94       	ror	r14
    29ac:	1a 95       	dec	r17
    29ae:	c1 f7       	brne	.-16     	; 0x29a0 <__ftoa_engine+0xe6>
    29b0:	ee ea       	ldi	r30, 0xAE	; 174
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	68 94       	set
    29b6:	15 90       	lpm	r1, Z+
    29b8:	15 91       	lpm	r17, Z+
    29ba:	35 91       	lpm	r19, Z+
    29bc:	65 91       	lpm	r22, Z+
    29be:	95 91       	lpm	r25, Z+
    29c0:	05 90       	lpm	r0, Z+
    29c2:	7f e2       	ldi	r23, 0x2F	; 47
    29c4:	73 95       	inc	r23
    29c6:	e1 18       	sub	r14, r1
    29c8:	f1 0a       	sbc	r15, r17
    29ca:	43 0b       	sbc	r20, r19
    29cc:	56 0b       	sbc	r21, r22
    29ce:	c9 0b       	sbc	r28, r25
    29d0:	d0 09       	sbc	r29, r0
    29d2:	c0 f7       	brcc	.-16     	; 0x29c4 <__ftoa_engine+0x10a>
    29d4:	e1 0c       	add	r14, r1
    29d6:	f1 1e       	adc	r15, r17
    29d8:	43 1f       	adc	r20, r19
    29da:	56 1f       	adc	r21, r22
    29dc:	c9 1f       	adc	r28, r25
    29de:	d0 1d       	adc	r29, r0
    29e0:	7e f4       	brtc	.+30     	; 0x2a00 <__ftoa_engine+0x146>
    29e2:	70 33       	cpi	r23, 0x30	; 48
    29e4:	11 f4       	brne	.+4      	; 0x29ea <__ftoa_engine+0x130>
    29e6:	8a 95       	dec	r24
    29e8:	e6 cf       	rjmp	.-52     	; 0x29b6 <__ftoa_engine+0xfc>
    29ea:	e8 94       	clt
    29ec:	01 50       	subi	r16, 0x01	; 1
    29ee:	30 f0       	brcs	.+12     	; 0x29fc <__ftoa_engine+0x142>
    29f0:	08 0f       	add	r16, r24
    29f2:	0a f4       	brpl	.+2      	; 0x29f6 <__ftoa_engine+0x13c>
    29f4:	00 27       	eor	r16, r16
    29f6:	02 17       	cp	r16, r18
    29f8:	08 f4       	brcc	.+2      	; 0x29fc <__ftoa_engine+0x142>
    29fa:	20 2f       	mov	r18, r16
    29fc:	23 95       	inc	r18
    29fe:	02 2f       	mov	r16, r18
    2a00:	7a 33       	cpi	r23, 0x3A	; 58
    2a02:	28 f0       	brcs	.+10     	; 0x2a0e <__ftoa_engine+0x154>
    2a04:	79 e3       	ldi	r23, 0x39	; 57
    2a06:	7d 93       	st	X+, r23
    2a08:	2a 95       	dec	r18
    2a0a:	e9 f7       	brne	.-6      	; 0x2a06 <__ftoa_engine+0x14c>
    2a0c:	10 c0       	rjmp	.+32     	; 0x2a2e <__ftoa_engine+0x174>
    2a0e:	7d 93       	st	X+, r23
    2a10:	2a 95       	dec	r18
    2a12:	89 f6       	brne	.-94     	; 0x29b6 <__ftoa_engine+0xfc>
    2a14:	06 94       	lsr	r0
    2a16:	97 95       	ror	r25
    2a18:	67 95       	ror	r22
    2a1a:	37 95       	ror	r19
    2a1c:	17 95       	ror	r17
    2a1e:	17 94       	ror	r1
    2a20:	e1 18       	sub	r14, r1
    2a22:	f1 0a       	sbc	r15, r17
    2a24:	43 0b       	sbc	r20, r19
    2a26:	56 0b       	sbc	r21, r22
    2a28:	c9 0b       	sbc	r28, r25
    2a2a:	d0 09       	sbc	r29, r0
    2a2c:	98 f0       	brcs	.+38     	; 0x2a54 <__ftoa_engine+0x19a>
    2a2e:	23 95       	inc	r18
    2a30:	7e 91       	ld	r23, -X
    2a32:	73 95       	inc	r23
    2a34:	7a 33       	cpi	r23, 0x3A	; 58
    2a36:	08 f0       	brcs	.+2      	; 0x2a3a <__ftoa_engine+0x180>
    2a38:	70 e3       	ldi	r23, 0x30	; 48
    2a3a:	7c 93       	st	X, r23
    2a3c:	20 13       	cpse	r18, r16
    2a3e:	b8 f7       	brcc	.-18     	; 0x2a2e <__ftoa_engine+0x174>
    2a40:	7e 91       	ld	r23, -X
    2a42:	70 61       	ori	r23, 0x10	; 16
    2a44:	7d 93       	st	X+, r23
    2a46:	30 f0       	brcs	.+12     	; 0x2a54 <__ftoa_engine+0x19a>
    2a48:	83 95       	inc	r24
    2a4a:	71 e3       	ldi	r23, 0x31	; 49
    2a4c:	7d 93       	st	X+, r23
    2a4e:	70 e3       	ldi	r23, 0x30	; 48
    2a50:	2a 95       	dec	r18
    2a52:	e1 f7       	brne	.-8      	; 0x2a4c <__ftoa_engine+0x192>
    2a54:	11 24       	eor	r1, r1
    2a56:	ef 90       	pop	r14
    2a58:	ff 90       	pop	r15
    2a5a:	0f 91       	pop	r16
    2a5c:	1f 91       	pop	r17
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	99 27       	eor	r25, r25
    2a64:	87 fd       	sbrc	r24, 7
    2a66:	90 95       	com	r25
    2a68:	08 95       	ret

00002a6a <strcpy_P>:
    2a6a:	fb 01       	movw	r30, r22
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	05 90       	lpm	r0, Z+
    2a70:	0d 92       	st	X+, r0
    2a72:	00 20       	and	r0, r0
    2a74:	e1 f7       	brne	.-8      	; 0x2a6e <strcpy_P+0x4>
    2a76:	08 95       	ret

00002a78 <strnlen_P>:
    2a78:	fc 01       	movw	r30, r24
    2a7a:	05 90       	lpm	r0, Z+
    2a7c:	61 50       	subi	r22, 0x01	; 1
    2a7e:	70 40       	sbci	r23, 0x00	; 0
    2a80:	01 10       	cpse	r0, r1
    2a82:	d8 f7       	brcc	.-10     	; 0x2a7a <strnlen_P+0x2>
    2a84:	80 95       	com	r24
    2a86:	90 95       	com	r25
    2a88:	8e 0f       	add	r24, r30
    2a8a:	9f 1f       	adc	r25, r31
    2a8c:	08 95       	ret

00002a8e <strcpy>:
    2a8e:	fb 01       	movw	r30, r22
    2a90:	dc 01       	movw	r26, r24
    2a92:	01 90       	ld	r0, Z+
    2a94:	0d 92       	st	X+, r0
    2a96:	00 20       	and	r0, r0
    2a98:	e1 f7       	brne	.-8      	; 0x2a92 <strcpy+0x4>
    2a9a:	08 95       	ret

00002a9c <strnlen>:
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	61 50       	subi	r22, 0x01	; 1
    2aa0:	70 40       	sbci	r23, 0x00	; 0
    2aa2:	01 90       	ld	r0, Z+
    2aa4:	01 10       	cpse	r0, r1
    2aa6:	d8 f7       	brcc	.-10     	; 0x2a9e <strnlen+0x2>
    2aa8:	80 95       	com	r24
    2aaa:	90 95       	com	r25
    2aac:	8e 0f       	add	r24, r30
    2aae:	9f 1f       	adc	r25, r31
    2ab0:	08 95       	ret

00002ab2 <fputc>:
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
    2aba:	fb 01       	movw	r30, r22
    2abc:	23 81       	ldd	r18, Z+3	; 0x03
    2abe:	21 fd       	sbrc	r18, 1
    2ac0:	03 c0       	rjmp	.+6      	; 0x2ac8 <fputc+0x16>
    2ac2:	8f ef       	ldi	r24, 0xFF	; 255
    2ac4:	9f ef       	ldi	r25, 0xFF	; 255
    2ac6:	28 c0       	rjmp	.+80     	; 0x2b18 <fputc+0x66>
    2ac8:	22 ff       	sbrs	r18, 2
    2aca:	16 c0       	rjmp	.+44     	; 0x2af8 <fputc+0x46>
    2acc:	46 81       	ldd	r20, Z+6	; 0x06
    2ace:	57 81       	ldd	r21, Z+7	; 0x07
    2ad0:	24 81       	ldd	r18, Z+4	; 0x04
    2ad2:	35 81       	ldd	r19, Z+5	; 0x05
    2ad4:	42 17       	cp	r20, r18
    2ad6:	53 07       	cpc	r21, r19
    2ad8:	44 f4       	brge	.+16     	; 0x2aea <fputc+0x38>
    2ada:	a0 81       	ld	r26, Z
    2adc:	b1 81       	ldd	r27, Z+1	; 0x01
    2ade:	9d 01       	movw	r18, r26
    2ae0:	2f 5f       	subi	r18, 0xFF	; 255
    2ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae4:	31 83       	std	Z+1, r19	; 0x01
    2ae6:	20 83       	st	Z, r18
    2ae8:	8c 93       	st	X, r24
    2aea:	26 81       	ldd	r18, Z+6	; 0x06
    2aec:	37 81       	ldd	r19, Z+7	; 0x07
    2aee:	2f 5f       	subi	r18, 0xFF	; 255
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	37 83       	std	Z+7, r19	; 0x07
    2af4:	26 83       	std	Z+6, r18	; 0x06
    2af6:	10 c0       	rjmp	.+32     	; 0x2b18 <fputc+0x66>
    2af8:	eb 01       	movw	r28, r22
    2afa:	09 2f       	mov	r16, r25
    2afc:	18 2f       	mov	r17, r24
    2afe:	00 84       	ldd	r0, Z+8	; 0x08
    2b00:	f1 85       	ldd	r31, Z+9	; 0x09
    2b02:	e0 2d       	mov	r30, r0
    2b04:	09 95       	icall
    2b06:	89 2b       	or	r24, r25
    2b08:	e1 f6       	brne	.-72     	; 0x2ac2 <fputc+0x10>
    2b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b0e:	01 96       	adiw	r24, 0x01	; 1
    2b10:	9f 83       	std	Y+7, r25	; 0x07
    2b12:	8e 83       	std	Y+6, r24	; 0x06
    2b14:	81 2f       	mov	r24, r17
    2b16:	90 2f       	mov	r25, r16
    2b18:	df 91       	pop	r29
    2b1a:	cf 91       	pop	r28
    2b1c:	1f 91       	pop	r17
    2b1e:	0f 91       	pop	r16
    2b20:	08 95       	ret

00002b22 <sprintf>:
    2b22:	0f 93       	push	r16
    2b24:	1f 93       	push	r17
    2b26:	cf 93       	push	r28
    2b28:	df 93       	push	r29
    2b2a:	cd b7       	in	r28, 0x3d	; 61
    2b2c:	de b7       	in	r29, 0x3e	; 62
    2b2e:	2e 97       	sbiw	r28, 0x0e	; 14
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	0d 89       	ldd	r16, Y+21	; 0x15
    2b3c:	1e 89       	ldd	r17, Y+22	; 0x16
    2b3e:	86 e0       	ldi	r24, 0x06	; 6
    2b40:	8c 83       	std	Y+4, r24	; 0x04
    2b42:	1a 83       	std	Y+2, r17	; 0x02
    2b44:	09 83       	std	Y+1, r16	; 0x01
    2b46:	8f ef       	ldi	r24, 0xFF	; 255
    2b48:	9f e7       	ldi	r25, 0x7F	; 127
    2b4a:	9e 83       	std	Y+6, r25	; 0x06
    2b4c:	8d 83       	std	Y+5, r24	; 0x05
    2b4e:	ae 01       	movw	r20, r28
    2b50:	47 5e       	subi	r20, 0xE7	; 231
    2b52:	5f 4f       	sbci	r21, 0xFF	; 255
    2b54:	6f 89       	ldd	r22, Y+23	; 0x17
    2b56:	78 8d       	ldd	r23, Y+24	; 0x18
    2b58:	ce 01       	movw	r24, r28
    2b5a:	01 96       	adiw	r24, 0x01	; 1
    2b5c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <vfprintf>
    2b60:	2f 81       	ldd	r18, Y+7	; 0x07
    2b62:	38 85       	ldd	r19, Y+8	; 0x08
    2b64:	f8 01       	movw	r30, r16
    2b66:	e2 0f       	add	r30, r18
    2b68:	f3 1f       	adc	r31, r19
    2b6a:	10 82       	st	Z, r1
    2b6c:	2e 96       	adiw	r28, 0x0e	; 14
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	de bf       	out	0x3e, r29	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	cd bf       	out	0x3d, r28	; 61
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	1f 91       	pop	r17
    2b7e:	0f 91       	pop	r16
    2b80:	08 95       	ret

00002b82 <__ultoa_invert>:
    2b82:	fa 01       	movw	r30, r20
    2b84:	aa 27       	eor	r26, r26
    2b86:	28 30       	cpi	r18, 0x08	; 8
    2b88:	51 f1       	breq	.+84     	; 0x2bde <__ultoa_invert+0x5c>
    2b8a:	20 31       	cpi	r18, 0x10	; 16
    2b8c:	81 f1       	breq	.+96     	; 0x2bee <__ultoa_invert+0x6c>
    2b8e:	e8 94       	clt
    2b90:	6f 93       	push	r22
    2b92:	6e 7f       	andi	r22, 0xFE	; 254
    2b94:	6e 5f       	subi	r22, 0xFE	; 254
    2b96:	7f 4f       	sbci	r23, 0xFF	; 255
    2b98:	8f 4f       	sbci	r24, 0xFF	; 255
    2b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9c:	af 4f       	sbci	r26, 0xFF	; 255
    2b9e:	b1 e0       	ldi	r27, 0x01	; 1
    2ba0:	3e d0       	rcall	.+124    	; 0x2c1e <__ultoa_invert+0x9c>
    2ba2:	b4 e0       	ldi	r27, 0x04	; 4
    2ba4:	3c d0       	rcall	.+120    	; 0x2c1e <__ultoa_invert+0x9c>
    2ba6:	67 0f       	add	r22, r23
    2ba8:	78 1f       	adc	r23, r24
    2baa:	89 1f       	adc	r24, r25
    2bac:	9a 1f       	adc	r25, r26
    2bae:	a1 1d       	adc	r26, r1
    2bb0:	68 0f       	add	r22, r24
    2bb2:	79 1f       	adc	r23, r25
    2bb4:	8a 1f       	adc	r24, r26
    2bb6:	91 1d       	adc	r25, r1
    2bb8:	a1 1d       	adc	r26, r1
    2bba:	6a 0f       	add	r22, r26
    2bbc:	71 1d       	adc	r23, r1
    2bbe:	81 1d       	adc	r24, r1
    2bc0:	91 1d       	adc	r25, r1
    2bc2:	a1 1d       	adc	r26, r1
    2bc4:	20 d0       	rcall	.+64     	; 0x2c06 <__ultoa_invert+0x84>
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <__ultoa_invert+0x48>
    2bc8:	68 94       	set
    2bca:	3f 91       	pop	r19
    2bcc:	2a e0       	ldi	r18, 0x0A	; 10
    2bce:	26 9f       	mul	r18, r22
    2bd0:	11 24       	eor	r1, r1
    2bd2:	30 19       	sub	r19, r0
    2bd4:	30 5d       	subi	r19, 0xD0	; 208
    2bd6:	31 93       	st	Z+, r19
    2bd8:	de f6       	brtc	.-74     	; 0x2b90 <__ultoa_invert+0xe>
    2bda:	cf 01       	movw	r24, r30
    2bdc:	08 95       	ret
    2bde:	46 2f       	mov	r20, r22
    2be0:	47 70       	andi	r20, 0x07	; 7
    2be2:	40 5d       	subi	r20, 0xD0	; 208
    2be4:	41 93       	st	Z+, r20
    2be6:	b3 e0       	ldi	r27, 0x03	; 3
    2be8:	0f d0       	rcall	.+30     	; 0x2c08 <__ultoa_invert+0x86>
    2bea:	c9 f7       	brne	.-14     	; 0x2bde <__ultoa_invert+0x5c>
    2bec:	f6 cf       	rjmp	.-20     	; 0x2bda <__ultoa_invert+0x58>
    2bee:	46 2f       	mov	r20, r22
    2bf0:	4f 70       	andi	r20, 0x0F	; 15
    2bf2:	40 5d       	subi	r20, 0xD0	; 208
    2bf4:	4a 33       	cpi	r20, 0x3A	; 58
    2bf6:	18 f0       	brcs	.+6      	; 0x2bfe <__ultoa_invert+0x7c>
    2bf8:	49 5d       	subi	r20, 0xD9	; 217
    2bfa:	31 fd       	sbrc	r19, 1
    2bfc:	40 52       	subi	r20, 0x20	; 32
    2bfe:	41 93       	st	Z+, r20
    2c00:	02 d0       	rcall	.+4      	; 0x2c06 <__ultoa_invert+0x84>
    2c02:	a9 f7       	brne	.-22     	; 0x2bee <__ultoa_invert+0x6c>
    2c04:	ea cf       	rjmp	.-44     	; 0x2bda <__ultoa_invert+0x58>
    2c06:	b4 e0       	ldi	r27, 0x04	; 4
    2c08:	a6 95       	lsr	r26
    2c0a:	97 95       	ror	r25
    2c0c:	87 95       	ror	r24
    2c0e:	77 95       	ror	r23
    2c10:	67 95       	ror	r22
    2c12:	ba 95       	dec	r27
    2c14:	c9 f7       	brne	.-14     	; 0x2c08 <__ultoa_invert+0x86>
    2c16:	00 97       	sbiw	r24, 0x00	; 0
    2c18:	61 05       	cpc	r22, r1
    2c1a:	71 05       	cpc	r23, r1
    2c1c:	08 95       	ret
    2c1e:	9b 01       	movw	r18, r22
    2c20:	ac 01       	movw	r20, r24
    2c22:	0a 2e       	mov	r0, r26
    2c24:	06 94       	lsr	r0
    2c26:	57 95       	ror	r21
    2c28:	47 95       	ror	r20
    2c2a:	37 95       	ror	r19
    2c2c:	27 95       	ror	r18
    2c2e:	ba 95       	dec	r27
    2c30:	c9 f7       	brne	.-14     	; 0x2c24 <__ultoa_invert+0xa2>
    2c32:	62 0f       	add	r22, r18
    2c34:	73 1f       	adc	r23, r19
    2c36:	84 1f       	adc	r24, r20
    2c38:	95 1f       	adc	r25, r21
    2c3a:	a0 1d       	adc	r26, r0
    2c3c:	08 95       	ret

00002c3e <_exit>:
    2c3e:	f8 94       	cli

00002c40 <__stop_program>:
    2c40:	ff cf       	rjmp	.-2      	; 0x2c40 <__stop_program>
