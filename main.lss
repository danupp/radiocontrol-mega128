
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00002aac  00002b40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002aac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  0080020e  0080020e  00002c4e  2**0
                  ALLOC
  3 .stab         000035dc  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001528  00000000  00000000  0000622c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007754  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00007768  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__ctors_end>
       4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_3>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_4>
      14:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_5>
      18:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_6>
      1c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_7>
      20:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_8>
      24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      28:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      2c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_12>
      34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_15>
      40:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      44:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      48:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      4c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      58:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      5c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      68:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      6c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      70:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      7c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      80:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      84:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	53 74       	andi	r21, 0x43	; 67
      8e:	61 72       	andi	r22, 0x21	; 33
      90:	74 69       	ori	r23, 0x94	; 148
      92:	6e 67       	ori	r22, 0x7E	; 126
      94:	20 72       	andi	r18, 0x20	; 32
      96:	61 64       	ori	r22, 0x41	; 65
      98:	69 6f       	ori	r22, 0xF9	; 249
	...

0000009b <string_intro_row1.2452>:
      9b:	2a 2a 2a 20 53 4d 36 56 46 5a 00                    *** SM6VFZ.

000000a6 <__c.2179>:
      a6:	6e 61 6e 00                                         nan.

000000aa <__c.2177>:
      aa:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ba:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ca:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      da:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ea:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      fa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     10a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     11a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     12a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     13a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     14a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     15a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     16a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     17a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     18a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     19a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf ef       	ldi	r28, 0xFF	; 255
     1ae:	d0 e1       	ldi	r29, 0x10	; 16
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	12 e0       	ldi	r17, 0x02	; 2
     1b6:	a0 e0       	ldi	r26, 0x00	; 0
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	ec ea       	ldi	r30, 0xAC	; 172
     1bc:	fa e2       	ldi	r31, 0x2A	; 42
     1be:	00 e0       	ldi	r16, 0x00	; 0
     1c0:	0b bf       	out	0x3b, r16	; 59
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x14>
     1c4:	07 90       	elpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	ae 30       	cpi	r26, 0x0E	; 14
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0x10>

000001ce <__do_clear_bss>:
     1ce:	22 e0       	ldi	r18, 0x02	; 2
     1d0:	ae e0       	ldi	r26, 0x0E	; 14
     1d2:	b2 e0       	ldi	r27, 0x02	; 2
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	a1 33       	cpi	r26, 0x31	; 49
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	0e 94 29 07 	call	0xe52	; 0xe52 <main>
     1e2:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <_exit>

000001e6 <__bad_interrupt>:
     1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <__vector_15>:
volatile uint8_t band_timer = 255, vol_timer = 255;
volatile uint16_t bandf, tx, pll_n = 0;
volatile uint8_t rx_att;
volatile bool rffe_rx_att;

ISR(TIMER0_COMP_vect) {
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	2f 93       	push	r18
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
  if (step_timer < 500)
     1fa:	80 91 2d 02 	lds	r24, 0x022D
     1fe:	90 91 2e 02 	lds	r25, 0x022E
     202:	84 3f       	cpi	r24, 0xF4	; 244
     204:	91 40       	sbci	r25, 0x01	; 1
     206:	48 f4       	brcc	.+18     	; 0x21a <__vector_15+0x30>
    step_timer ++;
     208:	80 91 2d 02 	lds	r24, 0x022D
     20c:	90 91 2e 02 	lds	r25, 0x022E
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	90 93 2e 02 	sts	0x022E, r25
     216:	80 93 2d 02 	sts	0x022D, r24
}
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	2f 91       	pop	r18
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <__vector_12>:

ISR(TIMER1_COMPA_vect) {
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	8f 93       	push	r24
  timer_flag = 1;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	80 93 2f 02 	sts	0x022F, r24
  
}
     23c:	8f 91       	pop	r24
     23e:	0f 90       	pop	r0
     240:	0f be       	out	0x3f, r0	; 63
     242:	0f 90       	pop	r0
     244:	1f 90       	pop	r1
     246:	18 95       	reti

00000248 <__vector_3>:


ISR(INT2_vect) {  // falling level on INT2
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	11 24       	eor	r1, r1
     252:	8f 93       	push	r24
  if(!(PIND & (1 << ROT2_A))) {
     254:	82 99       	sbic	0x10, 2	; 16
     256:	15 c0       	rjmp	.+42     	; 0x282 <__vector_3+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	86 e0       	ldi	r24, 0x06	; 6
     25a:	8a 95       	dec	r24
     25c:	f1 f7       	brne	.-4      	; 0x25a <__vector_3+0x12>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <__vector_3+0x18>
    _delay_us(20);
    if ((PIND & (1 << ROT2_B))) {
     260:	83 9b       	sbis	0x10, 3	; 16
     262:	0f c0       	rjmp	.+30     	; 0x282 <__vector_3+0x3a>
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	8a 95       	dec	r24
     268:	f1 f7       	brne	.-4      	; 0x266 <__vector_3+0x1e>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <__vector_3+0x24>
      _delay_us(20);
      if (!(PIND & (1 << ROT2_A)) && (PIND & (1 << ROT2_B))) {
     26c:	82 99       	sbic	0x10, 2	; 16
     26e:	09 c0       	rjmp	.+18     	; 0x282 <__vector_3+0x3a>
     270:	83 9b       	sbis	0x10, 3	; 16
     272:	07 c0       	rjmp	.+14     	; 0x282 <__vector_3+0x3a>
     274:	81 e2       	ldi	r24, 0x21	; 33
     276:	8a 95       	dec	r24
     278:	f1 f7       	brne	.-4      	; 0x276 <__vector_3+0x2e>
     27a:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x01;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	80 93 27 02 	sts	0x0227, r24
      }
    }
  }
}
     282:	8f 91       	pop	r24
     284:	0f 90       	pop	r0
     286:	0f be       	out	0x3f, r0	; 63
     288:	0f 90       	pop	r0
     28a:	1f 90       	pop	r1
     28c:	18 95       	reti

0000028e <__vector_4>:

ISR(INT3_vect) {  // falling level on INT3
     28e:	1f 92       	push	r1
     290:	0f 92       	push	r0
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	8f 93       	push	r24
  if (!(PIND & (1 << ROT2_B))) {
     29a:	83 99       	sbic	0x10, 3	; 16
     29c:	15 c0       	rjmp	.+42     	; 0x2c8 <__vector_4+0x3a>
     29e:	86 e0       	ldi	r24, 0x06	; 6
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <__vector_4+0x12>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <__vector_4+0x18>
   _delay_us(20);
    if ((PIND & (1 << ROT2_A))) {
     2a6:	82 9b       	sbis	0x10, 2	; 16
     2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <__vector_4+0x3a>
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	8a 95       	dec	r24
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <__vector_4+0x1e>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <__vector_4+0x24>
      _delay_us(20);
      if ((PIND & (1 << ROT2_A)) && !(PIND & (1 << ROT2_B))) {
     2b2:	82 9b       	sbis	0x10, 2	; 16
     2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <__vector_4+0x3a>
     2b6:	83 99       	sbic	0x10, 3	; 16
     2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <__vector_4+0x3a>
     2ba:	81 e2       	ldi	r24, 0x21	; 33
     2bc:	8a 95       	dec	r24
     2be:	f1 f7       	brne	.-4      	; 0x2bc <__vector_4+0x2e>
     2c0:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x02;
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	80 93 27 02 	sts	0x0227, r24
      }
    }
  }
}
     2c8:	8f 91       	pop	r24
     2ca:	0f 90       	pop	r0
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	0f 90       	pop	r0
     2d0:	1f 90       	pop	r1
     2d2:	18 95       	reti

000002d4 <__vector_5>:

ISR(INT4_vect) {  // falling level on INT4
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	8f 93       	push	r24
     2e0:	9f 93       	push	r25
  if(!(PINE & (1 << ROT1_A))) {
     2e2:	0c 99       	sbic	0x01, 4	; 1
     2e4:	19 c0       	rjmp	.+50     	; 0x318 <__vector_5+0x44>
     2e6:	83 ef       	ldi	r24, 0xF3	; 243
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <__vector_5+0x16>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <__vector_5+0x1c>
     2f0:	00 00       	nop
    _delay_us(2000);
    if ((PINE & (1 << ROT1_B))) {
     2f2:	0d 9b       	sbis	0x01, 5	; 1
     2f4:	11 c0       	rjmp	.+34     	; 0x318 <__vector_5+0x44>
     2f6:	83 ef       	ldi	r24, 0xF3	; 243
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <__vector_5+0x26>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <__vector_5+0x2c>
     300:	00 00       	nop
      _delay_us(2000);
      if (!(PINE & (1 << ROT1_A)) && (PINE & (1 << ROT1_B))) {
     302:	0c 99       	sbic	0x01, 4	; 1
     304:	09 c0       	rjmp	.+18     	; 0x318 <__vector_5+0x44>
     306:	0d 9b       	sbis	0x01, 5	; 1
     308:	07 c0       	rjmp	.+14     	; 0x318 <__vector_5+0x44>
     30a:	91 e2       	ldi	r25, 0x21	; 33
     30c:	9a 95       	dec	r25
     30e:	f1 f7       	brne	.-4      	; 0x30c <__vector_5+0x38>
     310:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x01;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 93 27 02 	sts	0x0227, r24
      }
    }
  }
}
     318:	9f 91       	pop	r25
     31a:	8f 91       	pop	r24
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <__vector_6>:

ISR(INT5_vect) {  // falling level on INT5
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	8f 93       	push	r24
     332:	9f 93       	push	r25
  if (!(PINE & (1 << ROT1_B))) {
     334:	0d 99       	sbic	0x01, 5	; 1
     336:	19 c0       	rjmp	.+50     	; 0x36a <__vector_6+0x44>
     338:	83 ef       	ldi	r24, 0xF3	; 243
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <__vector_6+0x16>
     340:	00 c0       	rjmp	.+0      	; 0x342 <__vector_6+0x1c>
     342:	00 00       	nop
   _delay_us(2000);
    if ((PINE & (1 << ROT1_A))) {
     344:	0c 9b       	sbis	0x01, 4	; 1
     346:	11 c0       	rjmp	.+34     	; 0x36a <__vector_6+0x44>
     348:	83 ef       	ldi	r24, 0xF3	; 243
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <__vector_6+0x26>
     350:	00 c0       	rjmp	.+0      	; 0x352 <__vector_6+0x2c>
     352:	00 00       	nop
      _delay_us(2000);
      if ((PINE & (1 << ROT1_A)) && !(PINE & (1 << ROT1_B))) {
     354:	0c 9b       	sbis	0x01, 4	; 1
     356:	09 c0       	rjmp	.+18     	; 0x36a <__vector_6+0x44>
     358:	0d 99       	sbic	0x01, 5	; 1
     35a:	07 c0       	rjmp	.+14     	; 0x36a <__vector_6+0x44>
     35c:	91 e2       	ldi	r25, 0x21	; 33
     35e:	9a 95       	dec	r25
     360:	f1 f7       	brne	.-4      	; 0x35e <__vector_6+0x38>
     362:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x02;
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	80 93 27 02 	sts	0x0227, r24
      }
    }
  }
}
     36a:	9f 91       	pop	r25
     36c:	8f 91       	pop	r24
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <__vector_7>:

ISR(INT6_vect) {  // falling level on INT6
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
  if(!(PINE & (1 << VOLROT_A))) {
     386:	0e 99       	sbic	0x01, 6	; 1
     388:	19 c0       	rjmp	.+50     	; 0x3bc <__vector_7+0x44>
     38a:	83 ef       	ldi	r24, 0xF3	; 243
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <__vector_7+0x16>
     392:	00 c0       	rjmp	.+0      	; 0x394 <__vector_7+0x1c>
     394:	00 00       	nop
    _delay_us(2000);
    if ((PINE & (1 << VOLROT_B))) {
     396:	0f 9b       	sbis	0x01, 7	; 1
     398:	11 c0       	rjmp	.+34     	; 0x3bc <__vector_7+0x44>
     39a:	83 ef       	ldi	r24, 0xF3	; 243
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <__vector_7+0x26>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <__vector_7+0x2c>
     3a4:	00 00       	nop
      _delay_us(2000);
      if (!(PINE & (1 << VOLROT_A)) && (PINE & (1 << VOLROT_B))) {
     3a6:	0e 99       	sbic	0x01, 6	; 1
     3a8:	09 c0       	rjmp	.+18     	; 0x3bc <__vector_7+0x44>
     3aa:	0f 9b       	sbis	0x01, 7	; 1
     3ac:	07 c0       	rjmp	.+14     	; 0x3bc <__vector_7+0x44>
     3ae:	91 e2       	ldi	r25, 0x21	; 33
     3b0:	9a 95       	dec	r25
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <__vector_7+0x38>
     3b4:	00 00       	nop
	_delay_us(100);
	vol_flag = 0x02;
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	80 93 28 02 	sts	0x0228, r24
      }
    }
  }
}
     3bc:	9f 91       	pop	r25
     3be:	8f 91       	pop	r24
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <__vector_8>:

ISR(INT7_vect) {  // falling level on INT7
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	8f 93       	push	r24
     3d6:	9f 93       	push	r25
  if (!(PINE & (1 << VOLROT_B))) {
     3d8:	0f 99       	sbic	0x01, 7	; 1
     3da:	19 c0       	rjmp	.+50     	; 0x40e <__vector_8+0x44>
     3dc:	83 ef       	ldi	r24, 0xF3	; 243
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <__vector_8+0x16>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <__vector_8+0x1c>
     3e6:	00 00       	nop
    _delay_us(2000);
    if ((PINE & (1 << VOLROT_A))) {
     3e8:	0e 9b       	sbis	0x01, 6	; 1
     3ea:	11 c0       	rjmp	.+34     	; 0x40e <__vector_8+0x44>
     3ec:	83 ef       	ldi	r24, 0xF3	; 243
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <__vector_8+0x26>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <__vector_8+0x2c>
     3f6:	00 00       	nop
      _delay_us(2000);
      if ((PINE & (1 << VOLROT_A)) && !(PINE & (1 << VOLROT_B))) {
     3f8:	0e 9b       	sbis	0x01, 6	; 1
     3fa:	09 c0       	rjmp	.+18     	; 0x40e <__vector_8+0x44>
     3fc:	0f 99       	sbic	0x01, 7	; 1
     3fe:	07 c0       	rjmp	.+14     	; 0x40e <__vector_8+0x44>
     400:	91 e2       	ldi	r25, 0x21	; 33
     402:	9a 95       	dec	r25
     404:	f1 f7       	brne	.-4      	; 0x402 <__vector_8+0x38>
     406:	00 00       	nop
	_delay_us(100);
	vol_flag = 0x01;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 28 02 	sts	0x0228, r24
      }
    }
  }
}
     40e:	9f 91       	pop	r25
     410:	8f 91       	pop	r24
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <TWIinit>:

void TWIinit(void) {
  TWBR = 0x45;
     41c:	85 e4       	ldi	r24, 0x45	; 69
     41e:	80 93 70 00 	sts	0x0070, r24
  TWCR = (1 << TWEN);
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	80 93 74 00 	sts	0x0074, r24
     428:	08 95       	ret

0000042a <TWIStart>:
}

void TWIStart(void) {
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     42a:	84 ea       	ldi	r24, 0xA4	; 164
     42c:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     430:	80 91 74 00 	lds	r24, 0x0074
     434:	87 ff       	sbrs	r24, 7
     436:	fc cf       	rjmp	.-8      	; 0x430 <TWIStart+0x6>
}
     438:	08 95       	ret

0000043a <TWIStop>:

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     43a:	84 e9       	ldi	r24, 0x94	; 148
     43c:	80 93 74 00 	sts	0x0074, r24
     440:	08 95       	ret

00000442 <TWIWrite>:
}

void TWIWrite(uint8_t u8data) {
  TWDR = u8data;
     442:	80 93 73 00 	sts	0x0073, r24
  TWCR = (1<<TWINT)|(1<<TWEN);
     446:	84 e8       	ldi	r24, 0x84	; 132
     448:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     44c:	80 91 74 00 	lds	r24, 0x0074
     450:	87 ff       	sbrs	r24, 7
     452:	fc cf       	rjmp	.-8      	; 0x44c <TWIWrite+0xa>
}
     454:	08 95       	ret

00000456 <TWIReadACK>:

uint8_t TWIReadACK(void) {
  TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     456:	84 ec       	ldi	r24, 0xC4	; 196
     458:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     45c:	80 91 74 00 	lds	r24, 0x0074
     460:	87 ff       	sbrs	r24, 7
     462:	fc cf       	rjmp	.-8      	; 0x45c <TWIReadACK+0x6>
  return TWDR;
     464:	80 91 73 00 	lds	r24, 0x0073
}
     468:	08 95       	ret

0000046a <TWIReadNACK>:

//read byte with NACK
uint8_t TWIReadNACK(void) {
  TWCR = (1<<TWINT)|(1<<TWEN);
     46a:	84 e8       	ldi	r24, 0x84	; 132
     46c:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     470:	80 91 74 00 	lds	r24, 0x0074
     474:	87 ff       	sbrs	r24, 7
     476:	fc cf       	rjmp	.-8      	; 0x470 <TWIReadNACK+0x6>
  return TWDR;
     478:	80 91 73 00 	lds	r24, 0x0073
}
     47c:	08 95       	ret

0000047e <TWIGetStatus>:

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     47e:	80 91 71 00 	lds	r24, 0x0071
  return status;
}
     482:	88 7f       	andi	r24, 0xF8	; 248
     484:	08 95       	ret

00000486 <TWI_write_byte>:

uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	1f 92       	push	r1
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	16 2f       	mov	r17, r22

  TWIStart();
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     49a:	90 91 71 00 	lds	r25, 0x0071
     49e:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	98 30       	cpi	r25, 0x08	; 8
     4a4:	29 f0       	breq	.+10     	; 0x4b0 <TWI_write_byte+0x2a>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4a6:	84 e9       	ldi	r24, 0x94	; 148
     4a8:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	1e c0       	rjmp	.+60     	; 0x4ec <TWI_write_byte+0x66>
  }
  TWIWrite(addr << 1);
     4b0:	88 0f       	add	r24, r24
     4b2:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     4b6:	90 91 71 00 	lds	r25, 0x0071
     4ba:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     4bc:	98 31       	cpi	r25, 0x18	; 24
     4be:	29 f0       	breq	.+10     	; 0x4ca <TWI_write_byte+0x44>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4c0:	84 e9       	ldi	r24, 0x94	; 148
     4c2:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	11 c0       	rjmp	.+34     	; 0x4ec <TWI_write_byte+0x66>
  }  
  TWIWrite(data);
     4ca:	81 2f       	mov	r24, r17
     4cc:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     4d0:	80 91 71 00 	lds	r24, 0x0071
     4d4:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;
  }  
  TWIWrite(data);
  if (TWIGetStatus() != 0x28) {
     4d6:	88 32       	cpi	r24, 0x28	; 40
     4d8:	29 f0       	breq	.+10     	; 0x4e4 <TWI_write_byte+0x5e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4da:	84 e9       	ldi	r24, 0x94	; 148
     4dc:	80 93 74 00 	sts	0x0074, r24
    return 0x02;
  }  
  TWIWrite(data);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	04 c0       	rjmp	.+8      	; 0x4ec <TWI_write_byte+0x66>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4e4:	84 e9       	ldi	r24, 0x94	; 148
     4e6:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIStop();
  return 0x00;
     4ea:	80 e0       	ldi	r24, 0x00	; 0
}
     4ec:	0f 90       	pop	r0
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	08 95       	ret

000004f6 <TWI_read_byte>:

uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	8b 01       	movw	r16, r22

  TWIStart();
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     50c:	90 91 71 00 	lds	r25, 0x0071
     510:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	98 30       	cpi	r25, 0x08	; 8
     516:	29 f0       	breq	.+10     	; 0x522 <TWI_read_byte+0x2c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     518:	84 e9       	ldi	r24, 0x94	; 148
     51a:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	16 c0       	rjmp	.+44     	; 0x54e <TWI_read_byte+0x58>
  }
  TWIWrite((addr << 1) | 0x01);
     522:	88 0f       	add	r24, r24
     524:	81 60       	ori	r24, 0x01	; 1
     526:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     52a:	80 91 71 00 	lds	r24, 0x0071
     52e:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite((addr << 1) | 0x01);
  if (TWIGetStatus() != 0x40) {
     530:	80 34       	cpi	r24, 0x40	; 64
     532:	29 f0       	breq	.+10     	; 0x53e <TWI_read_byte+0x48>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     534:	84 e9       	ldi	r24, 0x94	; 148
     536:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite((addr << 1) | 0x01);
  if (TWIGetStatus() != 0x40) {
    TWIStop();
    return 0x02;
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	08 c0       	rjmp	.+16     	; 0x54e <TWI_read_byte+0x58>
  }
  *data = TWIReadNACK();
     53e:	0e 94 35 02 	call	0x46a	; 0x46a <TWIReadNACK>
     542:	f8 01       	movw	r30, r16
     544:	80 83       	st	Z, r24
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     546:	84 e9       	ldi	r24, 0x94	; 148
     548:	80 93 74 00 	sts	0x0074, r24
     54c:	80 e0       	ldi	r24, 0x00	; 0
    return 0x02;
  }
  *data = TWIReadNACK();
  TWIStop();
  return 0x00;
}
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	08 95       	ret

0000055a <TWI_write_word>:

uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	1f 92       	push	r1
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	16 2f       	mov	r17, r22
     56a:	07 2f       	mov	r16, r23

  TWIStart();
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     572:	90 91 71 00 	lds	r25, 0x0071
     576:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	98 30       	cpi	r25, 0x08	; 8
     57c:	29 f0       	breq	.+10     	; 0x588 <TWI_write_word+0x2e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     57e:	84 e9       	ldi	r24, 0x94	; 148
     580:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	2b c0       	rjmp	.+86     	; 0x5de <TWI_write_word+0x84>
  }
  TWIWrite(addr << 1);
     588:	88 0f       	add	r24, r24
     58a:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     58e:	90 91 71 00 	lds	r25, 0x0071
     592:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     594:	98 31       	cpi	r25, 0x18	; 24
     596:	29 f0       	breq	.+10     	; 0x5a2 <TWI_write_word+0x48>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     598:	84 e9       	ldi	r24, 0x94	; 148
     59a:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	1e c0       	rjmp	.+60     	; 0x5de <TWI_write_word+0x84>
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
     5a2:	80 2f       	mov	r24, r16
     5a4:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     5a8:	90 91 71 00 	lds	r25, 0x0071
     5ac:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
  if (TWIGetStatus() != 0x28) {
     5ae:	98 32       	cpi	r25, 0x28	; 40
     5b0:	29 f0       	breq	.+10     	; 0x5bc <TWI_write_word+0x62>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5b2:	84 e9       	ldi	r24, 0x94	; 148
     5b4:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	11 c0       	rjmp	.+34     	; 0x5de <TWI_write_word+0x84>
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     5c2:	80 91 71 00 	lds	r24, 0x0071
     5c6:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
  if (TWIGetStatus() != 0x28) {
     5c8:	88 32       	cpi	r24, 0x28	; 40
     5ca:	29 f0       	breq	.+10     	; 0x5d6 <TWI_write_word+0x7c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5cc:	84 e9       	ldi	r24, 0x94	; 148
     5ce:	80 93 74 00 	sts	0x0074, r24
    return 0x03;
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     5d2:	84 e0       	ldi	r24, 0x04	; 4
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <TWI_write_word+0x84>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5d6:	84 e9       	ldi	r24, 0x94	; 148
     5d8:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
}
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	08 95       	ret

000005ea <TWI_write_3bytes>:

uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	1f 92       	push	r1
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	16 2f       	mov	r17, r22
     5fc:	04 2f       	mov	r16, r20
     5fe:	f2 2e       	mov	r15, r18

  TWIStart();
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     606:	90 91 71 00 	lds	r25, 0x0071
     60a:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	98 30       	cpi	r25, 0x08	; 8
     610:	29 f0       	breq	.+10     	; 0x61c <TWI_write_3bytes+0x32>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     612:	84 e9       	ldi	r24, 0x94	; 148
     614:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	33 c0       	rjmp	.+102    	; 0x682 <TWI_write_3bytes+0x98>
  }
  TWIWrite(addr << 1);
     61c:	88 0f       	add	r24, r24
     61e:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     622:	90 91 71 00 	lds	r25, 0x0071
     626:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     628:	98 31       	cpi	r25, 0x18	; 24
     62a:	29 f0       	breq	.+10     	; 0x636 <TWI_write_3bytes+0x4c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     62c:	84 e9       	ldi	r24, 0x94	; 148
     62e:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	26 c0       	rjmp	.+76     	; 0x682 <TWI_write_3bytes+0x98>
  }
  TWIWrite(byte1);
     636:	81 2f       	mov	r24, r17
     638:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     63c:	90 91 71 00 	lds	r25, 0x0071
     640:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     642:	98 32       	cpi	r25, 0x28	; 40
     644:	29 f0       	breq	.+10     	; 0x650 <TWI_write_3bytes+0x66>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     646:	84 e9       	ldi	r24, 0x94	; 148
     648:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	19 c0       	rjmp	.+50     	; 0x682 <TWI_write_3bytes+0x98>
  }
  TWIWrite(byte2);
     650:	80 2f       	mov	r24, r16
     652:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     656:	90 91 71 00 	lds	r25, 0x0071
     65a:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     65c:	98 32       	cpi	r25, 0x28	; 40
     65e:	41 f4       	brne	.+16     	; 0x670 <TWI_write_3bytes+0x86>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     660:	8f 2d       	mov	r24, r15
     662:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     666:	80 91 71 00 	lds	r24, 0x0071
     66a:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     66c:	88 32       	cpi	r24, 0x28	; 40
     66e:	29 f0       	breq	.+10     	; 0x67a <TWI_write_3bytes+0x90>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     670:	84 e9       	ldi	r24, 0x94	; 148
     672:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	04 c0       	rjmp	.+8      	; 0x682 <TWI_write_3bytes+0x98>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     67a:	84 e9       	ldi	r24, 0x94	; 148
     67c:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     680:	80 e0       	ldi	r24, 0x00	; 0
}
     682:	0f 90       	pop	r0
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	08 95       	ret

00000690 <TWI_write_4bytes>:

uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	1f 92       	push	r1
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	16 2f       	mov	r17, r22
     6a4:	f4 2e       	mov	r15, r20
     6a6:	e2 2e       	mov	r14, r18

  TWIStart();
     6a8:	89 83       	std	Y+1, r24	; 0x01
     6aa:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6ae:	90 91 71 00 	lds	r25, 0x0071
     6b2:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	98 30       	cpi	r25, 0x08	; 8
     6b8:	29 f0       	breq	.+10     	; 0x6c4 <TWI_write_4bytes+0x34>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6ba:	84 e9       	ldi	r24, 0x94	; 148
     6bc:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	3b c0       	rjmp	.+118    	; 0x73a <TWI_write_4bytes+0xaa>
  }
  TWIWrite(addr << 1);
     6c4:	88 0f       	add	r24, r24
     6c6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6ca:	90 91 71 00 	lds	r25, 0x0071
     6ce:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     6d0:	98 31       	cpi	r25, 0x18	; 24
     6d2:	29 f0       	breq	.+10     	; 0x6de <TWI_write_4bytes+0x4e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6d4:	84 e9       	ldi	r24, 0x94	; 148
     6d6:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	2e c0       	rjmp	.+92     	; 0x73a <TWI_write_4bytes+0xaa>
  }
  TWIWrite(byte1);
     6de:	81 2f       	mov	r24, r17
     6e0:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6e4:	90 91 71 00 	lds	r25, 0x0071
     6e8:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     6ea:	98 32       	cpi	r25, 0x28	; 40
     6ec:	29 f0       	breq	.+10     	; 0x6f8 <TWI_write_4bytes+0x68>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6ee:	84 e9       	ldi	r24, 0x94	; 148
     6f0:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	21 c0       	rjmp	.+66     	; 0x73a <TWI_write_4bytes+0xaa>
  }
  TWIWrite(byte2);
     6f8:	8f 2d       	mov	r24, r15
     6fa:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6fe:	90 91 71 00 	lds	r25, 0x0071
     702:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     704:	98 32       	cpi	r25, 0x28	; 40
     706:	81 f4       	brne	.+32     	; 0x728 <TWI_write_4bytes+0x98>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     708:	8e 2d       	mov	r24, r14
     70a:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     70e:	90 91 71 00 	lds	r25, 0x0071
     712:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     714:	98 32       	cpi	r25, 0x28	; 40
     716:	41 f4       	brne	.+16     	; 0x728 <TWI_write_4bytes+0x98>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
     718:	80 2f       	mov	r24, r16
     71a:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     71e:	80 91 71 00 	lds	r24, 0x0071
     722:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
     724:	88 32       	cpi	r24, 0x28	; 40
     726:	29 f0       	breq	.+10     	; 0x732 <TWI_write_4bytes+0xa2>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     728:	84 e9       	ldi	r24, 0x94	; 148
     72a:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	04 c0       	rjmp	.+8      	; 0x73a <TWI_write_4bytes+0xaa>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     732:	84 e9       	ldi	r24, 0x94	; 148
     734:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     738:	80 e0       	ldi	r24, 0x00	; 0
}
     73a:	0f 90       	pop	r0
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	08 95       	ret

0000074a <TWI_write_5bytes>:

uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	16 2f       	mov	r17, r22
     760:	f4 2e       	mov	r15, r20
     762:	d2 2e       	mov	r13, r18

  TWIStart();
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     76a:	90 91 71 00 	lds	r25, 0x0071
     76e:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	98 30       	cpi	r25, 0x08	; 8
     774:	29 f0       	breq	.+10     	; 0x780 <TWI_write_5bytes+0x36>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     776:	84 e9       	ldi	r24, 0x94	; 148
     778:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	43 c0       	rjmp	.+134    	; 0x806 <TWI_write_5bytes+0xbc>
  }
  TWIWrite(addr << 1);
     780:	88 0f       	add	r24, r24
     782:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     786:	90 91 71 00 	lds	r25, 0x0071
     78a:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     78c:	98 31       	cpi	r25, 0x18	; 24
     78e:	29 f0       	breq	.+10     	; 0x79a <TWI_write_5bytes+0x50>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     790:	84 e9       	ldi	r24, 0x94	; 148
     792:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	36 c0       	rjmp	.+108    	; 0x806 <TWI_write_5bytes+0xbc>
  }
  TWIWrite(byte1);
     79a:	81 2f       	mov	r24, r17
     79c:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7a0:	90 91 71 00 	lds	r25, 0x0071
     7a4:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     7a6:	98 32       	cpi	r25, 0x28	; 40
     7a8:	29 f0       	breq	.+10     	; 0x7b4 <TWI_write_5bytes+0x6a>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     7aa:	84 e9       	ldi	r24, 0x94	; 148
     7ac:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	29 c0       	rjmp	.+82     	; 0x806 <TWI_write_5bytes+0xbc>
  }
  TWIWrite(byte2);
     7b4:	8f 2d       	mov	r24, r15
     7b6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7ba:	90 91 71 00 	lds	r25, 0x0071
     7be:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     7c0:	98 32       	cpi	r25, 0x28	; 40
     7c2:	c1 f4       	brne	.+48     	; 0x7f4 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     7c4:	8d 2d       	mov	r24, r13
     7c6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7ca:	90 91 71 00 	lds	r25, 0x0071
     7ce:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     7d0:	98 32       	cpi	r25, 0x28	; 40
     7d2:	81 f4       	brne	.+32     	; 0x7f4 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
     7d4:	80 2f       	mov	r24, r16
     7d6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7da:	90 91 71 00 	lds	r25, 0x0071
     7de:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
     7e0:	98 32       	cpi	r25, 0x28	; 40
     7e2:	41 f4       	brne	.+16     	; 0x7f4 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte5);
     7e4:	8e 2d       	mov	r24, r14
     7e6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7ea:	80 91 71 00 	lds	r24, 0x0071
     7ee:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte5);
  if (TWIGetStatus() != 0x28) {
     7f0:	88 32       	cpi	r24, 0x28	; 40
     7f2:	29 f0       	breq	.+10     	; 0x7fe <TWI_write_5bytes+0xb4>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     7f4:	84 e9       	ldi	r24, 0x94	; 148
     7f6:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte5);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     7fa:	84 e0       	ldi	r24, 0x04	; 4
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <TWI_write_5bytes+0xbc>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     7fe:	84 e9       	ldi	r24, 0x94	; 148
     800:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     804:	80 e0       	ldi	r24, 0x00	; 0
}
     806:	0f 90       	pop	r0
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	08 95       	ret

00000818 <updateVolumeSquelch>:

uint8_t updateVolumeSquelch(uint8_t vol, uint8_t sq) {
     818:	ef 92       	push	r14
     81a:	0f 93       	push	r16
  
  uint8_t addr, err;

  addr = 0x80; // Address for audio conf

  err = TWI_write_5bytes(fpga_addr, addr, 0x00, 0x00, sq, vol);
     81c:	e8 2e       	mov	r14, r24
     81e:	06 2f       	mov	r16, r22
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	60 e8       	ldi	r22, 0x80	; 128
     826:	83 e2       	ldi	r24, 0x23	; 35
     828:	0e 94 a5 03 	call	0x74a	; 0x74a <TWI_write_5bytes>
  if(err)
    return err;
  return 0x00;
}
     82c:	0f 91       	pop	r16
     82e:	ef 90       	pop	r14
     830:	08 95       	ret

00000832 <readClar>:

uint16_t readClar(void) {
  return (ADC);
     832:	84 b1       	in	r24, 0x04	; 4
     834:	95 b1       	in	r25, 0x05	; 5
}
     836:	08 95       	ret

00000838 <updateRFFE>:

uint8_t updateRFFE(void) {
  uint8_t err;
  uint16_t rxatt;

  if (rx_att)
     838:	40 91 25 02 	lds	r20, 0x0225
    rxatt = 0x0001;
  else
    rxatt = 0x0000;

  err = TWI_write_word(pll_addr,(pll_n & 0x0fff) | (tx << 15) | (bandf << 14) | (rxatt << 13));
     83c:	80 91 0e 02 	lds	r24, 0x020E
     840:	90 91 0f 02 	lds	r25, 0x020F
     844:	60 91 2a 02 	lds	r22, 0x022A
     848:	70 91 2b 02 	lds	r23, 0x022B
     84c:	20 91 22 02 	lds	r18, 0x0222
     850:	30 91 23 02 	lds	r19, 0x0223
     854:	77 27       	eor	r23, r23
     856:	66 95       	lsr	r22
     858:	77 95       	ror	r23
     85a:	66 27       	eor	r22, r22
     85c:	9f 70       	andi	r25, 0x0F	; 15
     85e:	68 2b       	or	r22, r24
     860:	79 2b       	or	r23, r25
     862:	30 e4       	ldi	r19, 0x40	; 64
     864:	23 9f       	mul	r18, r19
     866:	30 2d       	mov	r19, r0
     868:	22 27       	eor	r18, r18
     86a:	11 24       	eor	r1, r1
     86c:	62 2b       	or	r22, r18
     86e:	73 2b       	or	r23, r19

uint8_t updateRFFE(void) {
  uint8_t err;
  uint16_t rxatt;

  if (rx_att)
     870:	21 e0       	ldi	r18, 0x01	; 1
     872:	41 11       	cpse	r20, r1
     874:	01 c0       	rjmp	.+2      	; 0x878 <updateRFFE+0x40>
     876:	20 e0       	ldi	r18, 0x00	; 0
    rxatt = 0x0001;
  else
    rxatt = 0x0000;

  err = TWI_write_word(pll_addr,(pll_n & 0x0fff) | (tx << 15) | (bandf << 14) | (rxatt << 13));
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	92 2f       	mov	r25, r18
     87e:	92 95       	swap	r25
     880:	99 0f       	add	r25, r25
     882:	90 7e       	andi	r25, 0xE0	; 224
     884:	68 2b       	or	r22, r24
     886:	79 2b       	or	r23, r25
     888:	82 e2       	ldi	r24, 0x22	; 34
     88a:	0e 94 ad 02 	call	0x55a	; 0x55a <TWI_write_word>
  if (err)
     88e:	88 23       	and	r24, r24
     890:	11 f0       	breq	.+4      	; 0x896 <updateRFFE+0x5e>
    return err+5;
     892:	8b 5f       	subi	r24, 0xFB	; 251
     894:	08 95       	ret
  return 0x00;
     896:	80 e0       	ldi	r24, 0x00	; 0
} 
     898:	08 95       	ret

0000089a <updateFreq>:
  
uint8_t updateFreq(double freq, int8_t clar, uint8_t all_update) {
     89a:	8f 92       	push	r8
     89c:	9f 92       	push	r9
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	cf 92       	push	r12
     8a4:	df 92       	push	r13
     8a6:	ef 92       	push	r14
     8a8:	ff 92       	push	r15
     8aa:	0f 93       	push	r16
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	1f 92       	push	r1
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	14 2f       	mov	r17, r20
  //   char buffer[60];
  uint8_t byte1, byte2, byte3, byte4, byte5, err;
  uint16_t pll_n_ = pll_n;
     8ba:	40 91 0e 02 	lds	r20, 0x020E
     8be:	50 91 0f 02 	lds	r21, 0x020F
    else
      freq_lo = (double)((freq_MHz - 1152)*1000 + 21400 + freq_kHz);
    bandf = 1;
    }*/

  if (all_update) {
     8c2:	22 23       	and	r18, r18
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <updateFreq+0x2e>
     8c6:	92 c0       	rjmp	.+292    	; 0x9ec <updateFreq+0x152>
#endif
#ifdef LO_IF_PLUS_FREQ
    freq_lo = if_freq + freq;
#endif
#ifdef LO_IF_MINUS_FREQ
    freq_lo = if_freq - freq;
     8c8:	9b 01       	movw	r18, r22
     8ca:	ac 01       	movw	r20, r24
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	78 ec       	ldi	r23, 0xC8	; 200
     8d0:	8f e2       	ldi	r24, 0x2F	; 47
     8d2:	97 e4       	ldi	r25, 0x47	; 71
     8d4:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__subsf3>
#endif

    bandf = 1;
     8d8:	21 e0       	ldi	r18, 0x01	; 1
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	30 93 23 02 	sts	0x0223, r19
     8e0:	20 93 22 02 	sts	0x0222, r18

    if (mode == USB) {
     8e4:	20 91 29 02 	lds	r18, 0x0229
     8e8:	23 30       	cpi	r18, 0x03	; 3
     8ea:	29 f4       	brne	.+10     	; 0x8f6 <updateFreq+0x5c>
      freq_lo += (double)1.8;
     8ec:	26 e6       	ldi	r18, 0x66	; 102
     8ee:	36 e6       	ldi	r19, 0x66	; 102
     8f0:	46 ee       	ldi	r20, 0xE6	; 230
     8f2:	5f e3       	ldi	r21, 0x3F	; 63
     8f4:	08 c0       	rjmp	.+16     	; 0x906 <updateFreq+0x6c>
    }
    else if (mode == CW) {
     8f6:	20 91 29 02 	lds	r18, 0x0229
     8fa:	25 30       	cpi	r18, 0x05	; 5
     8fc:	39 f4       	brne	.+14     	; 0x90c <updateFreq+0x72>
      freq_lo += (double)0.9;
     8fe:	26 e6       	ldi	r18, 0x66	; 102
     900:	36 e6       	ldi	r19, 0x66	; 102
     902:	46 e6       	ldi	r20, 0x66	; 102
     904:	5f e3       	ldi	r21, 0x3F	; 63
     906:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__addsf3>
     90a:	0e c0       	rjmp	.+28     	; 0x928 <updateFreq+0x8e>
    }
    else if (mode == CWN) {
     90c:	20 91 29 02 	lds	r18, 0x0229
     910:	26 30       	cpi	r18, 0x06	; 6
     912:	51 f0       	breq	.+20     	; 0x928 <updateFreq+0x8e>
      //freq_lo += (double)0.9;
    }
    else if (mode == LSB ) {
     914:	20 91 29 02 	lds	r18, 0x0229
     918:	21 30       	cpi	r18, 0x01	; 1
     91a:	31 f4       	brne	.+12     	; 0x928 <updateFreq+0x8e>
      freq_lo -= (double)1.8;
     91c:	26 e6       	ldi	r18, 0x66	; 102
     91e:	36 e6       	ldi	r19, 0x66	; 102
     920:	46 ee       	ldi	r20, 0xE6	; 230
     922:	5f e3       	ldi	r21, 0x3F	; 63
     924:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__subsf3>
    ftw_topbot = floor((ftw-ftw_toptop*(double)16777216)/(double)65536);
    ftw_bottop = floor((ftw-ftw_toptop*(double)16777216-ftw_topbot*(double)65536)/(double)256);
    ftw_botbot = fmod(ftw,256);
#endif
#ifdef DIRECT_FREQ
    ftw = freq_lo*(double)279.62026666667; // 20MHz,25bit: 279.620266667 19.2MHz,22bit: 36.4088889
     928:	25 e6       	ldi	r18, 0x65	; 101
     92a:	3f ec       	ldi	r19, 0xCF	; 207
     92c:	4b e8       	ldi	r20, 0x8B	; 139
     92e:	53 e4       	ldi	r21, 0x43	; 67
     930:	0e 94 25 13 	call	0x264a	; 0x264a <__mulsf3>
     934:	6b 01       	movw	r12, r22
     936:	7c 01       	movw	r14, r24
    ftw_toptop = floor(ftw/(double)16777216);
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	40 e8       	ldi	r20, 0x80	; 128
     93e:	53 e3       	ldi	r21, 0x33	; 51
     940:	0e 94 25 13 	call	0x264a	; 0x264a <__mulsf3>
     944:	0e 94 04 12 	call	0x2408	; 0x2408 <floor>
     948:	60 93 1c 02 	sts	0x021C, r22
     94c:	70 93 1d 02 	sts	0x021D, r23
     950:	80 93 1e 02 	sts	0x021E, r24
     954:	90 93 1f 02 	sts	0x021F, r25
    ftw_topbot = floor((ftw-ftw_toptop*(double)16777216)/(double)65536);
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	40 e8       	ldi	r20, 0x80	; 128
     95e:	5b e4       	ldi	r21, 0x4B	; 75
     960:	0e 94 25 13 	call	0x264a	; 0x264a <__mulsf3>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	c7 01       	movw	r24, r14
     96a:	b6 01       	movw	r22, r12
     96c:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__subsf3>
     970:	4b 01       	movw	r8, r22
     972:	5c 01       	movw	r10, r24
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	40 e8       	ldi	r20, 0x80	; 128
     97a:	57 e3       	ldi	r21, 0x37	; 55
     97c:	0e 94 25 13 	call	0x264a	; 0x264a <__mulsf3>
     980:	0e 94 04 12 	call	0x2408	; 0x2408 <floor>
     984:	60 93 18 02 	sts	0x0218, r22
     988:	70 93 19 02 	sts	0x0219, r23
     98c:	80 93 1a 02 	sts	0x021A, r24
     990:	90 93 1b 02 	sts	0x021B, r25
    ftw_bottop = floor((ftw-ftw_toptop*(double)16777216-ftw_topbot*(double)65536)/(double)256);
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	40 e8       	ldi	r20, 0x80	; 128
     99a:	57 e4       	ldi	r21, 0x47	; 71
     99c:	0e 94 25 13 	call	0x264a	; 0x264a <__mulsf3>
     9a0:	9b 01       	movw	r18, r22
     9a2:	ac 01       	movw	r20, r24
     9a4:	c5 01       	movw	r24, r10
     9a6:	b4 01       	movw	r22, r8
     9a8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__subsf3>
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	40 e8       	ldi	r20, 0x80	; 128
     9b2:	5b e3       	ldi	r21, 0x3B	; 59
     9b4:	0e 94 25 13 	call	0x264a	; 0x264a <__mulsf3>
     9b8:	0e 94 04 12 	call	0x2408	; 0x2408 <floor>
     9bc:	60 93 14 02 	sts	0x0214, r22
     9c0:	70 93 15 02 	sts	0x0215, r23
     9c4:	80 93 16 02 	sts	0x0216, r24
     9c8:	90 93 17 02 	sts	0x0217, r25
    ftw_botbot = fmod(ftw,256);
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	40 e8       	ldi	r20, 0x80	; 128
     9d2:	53 e4       	ldi	r21, 0x43	; 67
     9d4:	c7 01       	movw	r24, r14
     9d6:	b6 01       	movw	r22, r12
     9d8:	0e 94 26 12 	call	0x244c	; 0x244c <fmod>
     9dc:	60 93 10 02 	sts	0x0210, r22
     9e0:	70 93 11 02 	sts	0x0211, r23
     9e4:	80 93 12 02 	sts	0x0212, r24
     9e8:	90 93 13 02 	sts	0x0213, r25
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
  byte5 = (uint8_t)ftw_botbot;
     9ec:	60 91 10 02 	lds	r22, 0x0210
     9f0:	70 91 11 02 	lds	r23, 0x0211
     9f4:	80 91 12 02 	lds	r24, 0x0212
     9f8:	90 91 13 02 	lds	r25, 0x0213
     9fc:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__fixunssfsi>
     a00:	e6 2e       	mov	r14, r22
  clar = -(clar+1);  // For arch with LO above RF freq
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
     a02:	60 91 14 02 	lds	r22, 0x0214
     a06:	70 91 15 02 	lds	r23, 0x0215
     a0a:	80 91 16 02 	lds	r24, 0x0216
     a0e:	90 91 17 02 	lds	r25, 0x0217
     a12:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__fixunssfsi>
     a16:	06 2f       	mov	r16, r22
#if defined(LO_FREQ_PLUS_IF) || defined(LO_IF_PLUS_FREQ)
  clar = -(clar+1);  // For arch with LO above RF freq
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
  byte3 = (uint8_t)ftw_topbot;
     a18:	60 91 18 02 	lds	r22, 0x0218
     a1c:	70 91 19 02 	lds	r23, 0x0219
     a20:	80 91 1a 02 	lds	r24, 0x021A
     a24:	90 91 1b 02 	lds	r25, 0x021B
     a28:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__fixunssfsi>
     a2c:	26 2f       	mov	r18, r22

#if defined(LO_FREQ_PLUS_IF) || defined(LO_IF_PLUS_FREQ)
  clar = -(clar+1);  // For arch with LO above RF freq
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
     a2e:	1e 7f       	andi	r17, 0xFE	; 254
     a30:	60 91 1c 02 	lds	r22, 0x021C
     a34:	70 91 1d 02 	lds	r23, 0x021D
     a38:	80 91 1e 02 	lds	r24, 0x021E
     a3c:	90 91 1f 02 	lds	r25, 0x021F
     a40:	29 83       	std	Y+1, r18	; 0x01
     a42:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__fixunssfsi>
     a46:	41 2f       	mov	r20, r17
     a48:	46 2b       	or	r20, r22
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
  byte5 = (uint8_t)ftw_botbot;

  err = TWI_write_5bytes(fpga_addr, byte1, byte2, byte3, byte4, byte5);
     a4a:	29 81       	ldd	r18, Y+1	; 0x01
     a4c:	60 ec       	ldi	r22, 0xC0	; 192
     a4e:	83 e2       	ldi	r24, 0x23	; 35
     a50:	0e 94 a5 03 	call	0x74a	; 0x74a <TWI_write_5bytes>
    if (err)
      return err+5;
  }
#endif
  return 0x00;
}
     a54:	0f 90       	pop	r0
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	cf 90       	pop	r12
     a66:	bf 90       	pop	r11
     a68:	af 90       	pop	r10
     a6a:	9f 90       	pop	r9
     a6c:	8f 90       	pop	r8
     a6e:	08 95       	ret

00000a70 <updateSettings>:

uint8_t updateSettings (void) {
     a70:	ef 92       	push	r14
     a72:	0f 93       	push	r16

  uint8_t err;
  uint8_t byte0, byte1, byte2, byte3, byte4;

  switch (mode) {  
     a74:	90 91 29 02 	lds	r25, 0x0229
     a78:	95 30       	cpi	r25, 0x05	; 5
     a7a:	51 f1       	breq	.+84     	; 0xad0 <updateSettings+0x60>
     a7c:	a0 f4       	brcc	.+40     	; 0xaa6 <updateSettings+0x36>
     a7e:	91 30       	cpi	r25, 0x01	; 1
     a80:	39 f1       	breq	.+78     	; 0xad0 <updateSettings+0x60>
     a82:	93 30       	cpi	r25, 0x03	; 3
     a84:	09 f0       	breq	.+2      	; 0xa88 <updateSettings+0x18>
     a86:	50 c0       	rjmp	.+160    	; 0xb28 <updateSettings+0xb8>
#endif
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     a88:	90 91 2c 02 	lds	r25, 0x022C
     a8c:	80 91 25 02 	lds	r24, 0x0225
     a90:	28 e0       	ldi	r18, 0x08	; 8
     a92:	82 9f       	mul	r24, r18
     a94:	a0 01       	movw	r20, r0
     a96:	11 24       	eor	r1, r1
     a98:	20 e4       	ldi	r18, 0x40	; 64
     a9a:	92 9f       	mul	r25, r18
     a9c:	c0 01       	movw	r24, r0
     a9e:	11 24       	eor	r1, r1
     aa0:	48 2b       	or	r20, r24

  case USB:
#if defined(LO_FREQ_PLUS_IF)||defined(LO_IF_PLUS_FREQ)
    byte0 = 0b01110000; // Set LSB
#else
    byte0 = 0b01111000; // Set USB
     aa2:	68 e7       	ldi	r22, 0x78	; 120
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     aa4:	41 c0       	rjmp	.+130    	; 0xb28 <updateSettings+0xb8>
uint8_t updateSettings (void) {

  uint8_t err;
  uint8_t byte0, byte1, byte2, byte3, byte4;

  switch (mode) {  
     aa6:	98 30       	cpi	r25, 0x08	; 8
     aa8:	11 f1       	breq	.+68     	; 0xaee <updateSettings+0x7e>
     aaa:	9a 30       	cpi	r25, 0x0A	; 10
     aac:	79 f1       	breq	.+94     	; 0xb0c <updateSettings+0x9c>
     aae:	96 30       	cpi	r25, 0x06	; 6
     ab0:	d9 f5       	brne	.+118    	; 0xb28 <updateSettings+0xb8>
#endif
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     ab2:	90 91 2c 02 	lds	r25, 0x022C
     ab6:	80 91 25 02 	lds	r24, 0x0225
     aba:	28 e0       	ldi	r18, 0x08	; 8
     abc:	82 9f       	mul	r24, r18
     abe:	a0 01       	movw	r20, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	20 e4       	ldi	r18, 0x40	; 64
     ac4:	92 9f       	mul	r25, r18
     ac6:	c0 01       	movw	r24, r0
     ac8:	11 24       	eor	r1, r1
     aca:	48 2b       	or	r20, r24

  case CWN:
#if defined(LO_FREQ_PLUS_IF)||defined(LO_IF_PLUS_FREQ)
    byte0 = 0b01101000; // Set narrow USB
#else
    byte0 = 0b01100000; // Set narrow LSB
     acc:	60 e6       	ldi	r22, 0x60	; 96
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     ace:	2c c0       	rjmp	.+88     	; 0xb28 <updateSettings+0xb8>
#endif
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     ad0:	90 91 2c 02 	lds	r25, 0x022C
     ad4:	80 91 25 02 	lds	r24, 0x0225
     ad8:	28 e0       	ldi	r18, 0x08	; 8
     ada:	82 9f       	mul	r24, r18
     adc:	a0 01       	movw	r20, r0
     ade:	11 24       	eor	r1, r1
     ae0:	20 e4       	ldi	r18, 0x40	; 64
     ae2:	92 9f       	mul	r25, r18
     ae4:	c0 01       	movw	r24, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	48 2b       	or	r20, r24

  case CW:
#if defined(LO_FREQ_PLUS_IF)||defined(LO_IF_PLUS_FREQ)
    byte0 = 0b01111000; // Set USB
#else
    byte0 = 0b01110000; // Set LSB
     aea:	60 e7       	ldi	r22, 0x70	; 112
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     aec:	1d c0       	rjmp	.+58     	; 0xb28 <updateSettings+0xb8>
    byte0 = 0b01000000;
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     aee:	90 91 2c 02 	lds	r25, 0x022C
     af2:	80 91 25 02 	lds	r24, 0x0225
     af6:	28 e0       	ldi	r18, 0x08	; 8
     af8:	82 9f       	mul	r24, r18
     afa:	a0 01       	movw	r20, r0
     afc:	11 24       	eor	r1, r1
     afe:	20 e4       	ldi	r18, 0x40	; 64
     b00:	92 9f       	mul	r25, r18
     b02:	c0 01       	movw	r24, r0
     b04:	11 24       	eor	r1, r1
     b06:	48 2b       	or	r20, r24
    byte3 = 0x00;
    byte4 = 0x00;
    break;

  case AM:
    byte0 = 0b01000000;
     b08:	60 e4       	ldi	r22, 0x40	; 64
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     b0a:	0e c0       	rjmp	.+28     	; 0xb28 <updateSettings+0xb8>
    byte0 = 0b01000001;
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     b0c:	90 91 2c 02 	lds	r25, 0x022C
     b10:	80 91 25 02 	lds	r24, 0x0225
     b14:	28 e0       	ldi	r18, 0x08	; 8
     b16:	82 9f       	mul	r24, r18
     b18:	a0 01       	movw	r20, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	20 e4       	ldi	r18, 0x40	; 64
     b1e:	92 9f       	mul	r25, r18
     b20:	c0 01       	movw	r24, r0
     b22:	11 24       	eor	r1, r1
     b24:	48 2b       	or	r20, r24
    byte3 = 0x00;
    byte4 = 0x00;
    break;

  case FM:
    byte0 = 0b01000001;
     b26:	61 e4       	ldi	r22, 0x41	; 65
#endif
    byte3 = 0x00;
    byte4 = 0x00;
  }
  
  err = TWI_write_5bytes(fpga_addr, byte0, byte1, byte2, byte3, byte4);
     b28:	e1 2c       	mov	r14, r1
     b2a:	00 e0       	ldi	r16, 0x00	; 0
     b2c:	28 e8       	ldi	r18, 0x88	; 136
     b2e:	83 e2       	ldi	r24, 0x23	; 35
     b30:	0e 94 a5 03 	call	0x74a	; 0x74a <TWI_write_5bytes>
  if (err)
    return err;

  return 0x00;

}
     b34:	0f 91       	pop	r16
     b36:	ef 90       	pop	r14
     b38:	08 95       	ret

00000b3a <adcInit>:

void adcInit(void) {
  ADCSRA = (1 << ADEN) | (1 << ADFR) | (1 << ADPS2) | (1 << ADPS1); // Free run, /64 -> 77 kHz
     b3a:	86 ea       	ldi	r24, 0xA6	; 166
     b3c:	86 b9       	out	0x06, r24	; 6
  ADMUX = 0x43; // ADC3, AVCC ref
     b3e:	83 e4       	ldi	r24, 0x43	; 67
     b40:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= (1 << ADSC); // Start conversion
     b42:	36 9a       	sbi	0x06, 6	; 6
     b44:	08 95       	ret

00000b46 <Timer0Init>:

}

void Timer0Init(void) {

  TCCR0 = 0x0f; // CTC mode, 1024 prescaler
     b46:	8f e0       	ldi	r24, 0x0F	; 15
     b48:	83 bf       	out	0x33, r24	; 51
  OCR0 = (uint8_t)10; // 1000000/(1024*10) = 100 Hz, 10ms
     b4a:	8a e0       	ldi	r24, 0x0A	; 10
     b4c:	81 bf       	out	0x31, r24	; 49
  TIMSK |= (1 << OCIE0); // Interrupt at compare match
     b4e:	87 b7       	in	r24, 0x37	; 55
     b50:	82 60       	ori	r24, 0x02	; 2
     b52:	87 bf       	out	0x37, r24	; 55
     b54:	08 95       	ret

00000b56 <Timer1Init>:
}

void Timer1Init(void) {

  TCCR1A = 0x00;  
     b56:	1f bc       	out	0x2f, r1	; 47
  TCCR1B = 0x0b; // CTC mode, 64 prescaler
     b58:	8b e0       	ldi	r24, 0x0B	; 11
     b5a:	8e bd       	out	0x2e, r24	; 46
  OCR1A = (uint16_t)1563; // 1000000/(64*1563) = 10 Hz, 100ms
     b5c:	8b e1       	ldi	r24, 0x1B	; 27
     b5e:	96 e0       	ldi	r25, 0x06	; 6
     b60:	9b bd       	out	0x2b, r25	; 43
     b62:	8a bd       	out	0x2a, r24	; 42
  TIMSK |= (1 << OCIE1A); // Interrupt at compare match
     b64:	87 b7       	in	r24, 0x37	; 55
     b66:	80 61       	ori	r24, 0x10	; 16
     b68:	87 bf       	out	0x37, r24	; 55
     b6a:	08 95       	ret

00000b6c <lcd_e_port_low>:
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     b6c:	e5 e6       	ldi	r30, 0x65	; 101
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8d 7f       	andi	r24, 0xFD	; 253
     b74:	80 83       	st	Z, r24
     b76:	08 95       	ret

00000b78 <lcd_e_port_high>:
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     b78:	e5 e6       	ldi	r30, 0x65	; 101
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	82 60       	ori	r24, 0x02	; 2
     b80:	80 83       	st	Z, r24
     b82:	08 95       	ret

00000b84 <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if RW_LINE_IMPLEMENTED==1
static uint8_t lcd_read(uint8_t rs)
  {
     b84:	af 92       	push	r10
     b86:	bf 92       	push	r11
     b88:	cf 92       	push	r12
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	1f 92       	push	r1
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    
    #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
    if (rs)
     b9e:	88 23       	and	r24, r24
     ba0:	21 f0       	breq	.+8      	; 0xbaa <lcd_read+0x26>
      lcd_waitbusy();
     ba2:	89 83       	std	Y+1, r24	; 0x01
     ba4:	0e 94 38 06 	call	0xc70	; 0xc70 <lcd_waitbusy>
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
      if (PrevCmdInvolvedAddressCounter)
     baa:	90 91 20 02 	lds	r25, 0x0220
     bae:	99 23       	and	r25, r25
     bb0:	29 f0       	breq	.+10     	; 0xbbc <lcd_read+0x38>
        {
          Delay_us(5);
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <lcd_read+0x30>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <lcd_read+0x32>
     bb6:	00 00       	nop
          PrevCmdInvolvedAddressCounter=0;
     bb8:	10 92 20 02 	sts	0x0220, r1
        }
    #endif

    if (rs)
     bbc:	88 23       	and	r24, r24
     bbe:	29 f0       	breq	.+10     	; 0xbca <lcd_read+0x46>
      {
        lcd_rs_port_high();                             // RS=1: Read Data
     bc0:	97 9a       	sbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 20 02 	sts	0x0220, r24
     bc8:	01 c0       	rjmp	.+2      	; 0xbcc <lcd_read+0x48>
        #endif
      }
    else lcd_rs_port_low();                           // RS=0: Read Busy Flag
     bca:	97 98       	cbi	0x12, 7	; 18

    
    lcd_rw_port_high();                               // RW=1: Read Mode
     bcc:	80 91 65 00 	lds	r24, 0x0065
     bd0:	81 60       	ori	r24, 0x01	; 1
     bd2:	80 93 65 00 	sts	0x0065, r24
      lcd_db7_port_high();                            // Pins High (Inactive)
      lcd_db6_port_high();
      lcd_db5_port_high();
      lcd_db4_port_high();
    #else //using 8-Bit-Mode
      lcd_db7_ddr_low();                              // Configure Data Pins as Input
     bd6:	a7 98       	cbi	0x14, 7	; 20
      lcd_db6_ddr_low();
     bd8:	a6 98       	cbi	0x14, 6	; 20
      lcd_db5_ddr_low();
     bda:	a5 98       	cbi	0x14, 5	; 20
      lcd_db4_ddr_low();
     bdc:	a4 98       	cbi	0x14, 4	; 20
      lcd_db3_ddr_low();
     bde:	a3 98       	cbi	0x14, 3	; 20
      lcd_db2_ddr_low();
     be0:	a2 98       	cbi	0x14, 2	; 20
      lcd_db1_ddr_low();
     be2:	a1 98       	cbi	0x14, 1	; 20
      lcd_db0_ddr_low();
     be4:	a0 98       	cbi	0x14, 0	; 20

      lcd_e_port_high();
     be6:	0e 94 bc 05 	call	0xb78	; 0xb78 <lcd_e_port_high>
      Delay_ns(500);
     bea:	00 00       	nop

      data=lcd_db7_pin_get() << 7 | lcd_db6_pin_get() << 6 |
     bec:	e3 b2       	in	r14, 0x13	; 19
     bee:	c3 b2       	in	r12, 0x13	; 19
           lcd_db5_pin_get() << 5 | lcd_db4_pin_get() << 4 |
     bf0:	f3 b2       	in	r15, 0x13	; 19
     bf2:	03 b3       	in	r16, 0x13	; 19
           lcd_db3_pin_get() << 3 | lcd_db2_pin_get() << 2 |
     bf4:	13 b3       	in	r17, 0x13	; 19
     bf6:	b3 b2       	in	r11, 0x13	; 19
           lcd_db1_pin_get() << 1 | lcd_db0_pin_get();
     bf8:	a3 b2       	in	r10, 0x13	; 19
     bfa:	d3 b2       	in	r13, 0x13	; 19

      lcd_e_port_low();
     bfc:	0e 94 b6 05 	call	0xb6c	; 0xb6c <lcd_e_port_low>

      lcd_db7_ddr_high();                             // Configure Data Pins as Output
     c00:	a7 9a       	sbi	0x14, 7	; 20
      lcd_db6_ddr_high();
     c02:	a6 9a       	sbi	0x14, 6	; 20
      lcd_db5_ddr_high();
     c04:	a5 9a       	sbi	0x14, 5	; 20
      lcd_db4_ddr_high();
     c06:	a4 9a       	sbi	0x14, 4	; 20
      lcd_db3_ddr_high();
     c08:	a3 9a       	sbi	0x14, 3	; 20
      lcd_db2_ddr_high();
     c0a:	a2 9a       	sbi	0x14, 2	; 20
      lcd_db1_ddr_high();
     c0c:	a1 9a       	sbi	0x14, 1	; 20
      lcd_db0_ddr_high();
     c0e:	a0 9a       	sbi	0x14, 0	; 20

      lcd_db7_port_high();                            // Pins High (Inactive)
     c10:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
     c12:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
     c14:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
     c16:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db3_port_high();
     c18:	ab 9a       	sbi	0x15, 3	; 21
      lcd_db2_port_high();
     c1a:	aa 9a       	sbi	0x15, 2	; 21
      lcd_db1_port_high();
     c1c:	a9 9a       	sbi	0x15, 1	; 21
      lcd_db0_port_high();
     c1e:	a8 9a       	sbi	0x15, 0	; 21
    #endif
    
    lcd_rw_port_low();
     c20:	80 91 65 00 	lds	r24, 0x0065
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	80 93 65 00 	sts	0x0065, r24
      lcd_db0_ddr_low();

      lcd_e_port_high();
      Delay_ns(500);

      data=lcd_db7_pin_get() << 7 | lcd_db6_pin_get() << 6 |
     c2a:	8c 2d       	mov	r24, r12
     c2c:	80 74       	andi	r24, 0x40	; 64
     c2e:	9e 2d       	mov	r25, r14
     c30:	90 78       	andi	r25, 0x80	; 128
     c32:	e8 2e       	mov	r14, r24
     c34:	e9 2a       	or	r14, r25
     c36:	9f 2d       	mov	r25, r15
     c38:	90 72       	andi	r25, 0x20	; 32
     c3a:	fe 2c       	mov	r15, r14
     c3c:	f9 2a       	or	r15, r25
     c3e:	00 71       	andi	r16, 0x10	; 16
     c40:	0f 29       	or	r16, r15
     c42:	18 70       	andi	r17, 0x08	; 8
     c44:	10 2b       	or	r17, r16
     c46:	8b 2d       	mov	r24, r11
     c48:	84 70       	andi	r24, 0x04	; 4
     c4a:	81 2b       	or	r24, r17
     c4c:	9a 2d       	mov	r25, r10
     c4e:	92 70       	andi	r25, 0x02	; 2
     c50:	98 2b       	or	r25, r24
           lcd_db5_pin_get() << 5 | lcd_db4_pin_get() << 4 |
           lcd_db3_pin_get() << 3 | lcd_db2_pin_get() << 2 |
           lcd_db1_pin_get() << 1 | lcd_db0_pin_get();
     c52:	8d 2d       	mov	r24, r13
     c54:	81 70       	andi	r24, 0x01	; 1
    if (rs)
      Delay_us(40);
    else Delay_us(1);
    #endif
    return data;
  }
     c56:	89 2b       	or	r24, r25
     c58:	0f 90       	pop	r0
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	bf 90       	pop	r11
     c6c:	af 90       	pop	r10
     c6e:	08 95       	ret

00000c70 <lcd_waitbusy>:
*************************************************************************/
#if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
static uint8_t lcd_read(uint8_t rs);

static void lcd_waitbusy(void)
  {
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
    register uint8_t c;
    unsigned int ul1=0;

    while ( ((c=lcd_read(0)) & (1<<LCD_BUSY)) && ul1<((F_CPU/16384>=16)?F_CPU/16384:16))     // Wait Until Busy Flag is Cleared
     c74:	ce e3       	ldi	r28, 0x3E	; 62
     c76:	d0 e0       	ldi	r29, 0x00	; 0
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e 94 c2 05 	call	0xb84	; 0xb84 <lcd_read>
     c7e:	87 ff       	sbrs	r24, 7
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <lcd_waitbusy+0x16>
     c82:	21 97       	sbiw	r28, 0x01	; 1
     c84:	c9 f7       	brne	.-14     	; 0xc78 <lcd_waitbusy+0x8>
      ul1++;
  }
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <lcd_write>:
          rs     1: write data
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs)
  {
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	00 d0       	rcall	.+0      	; 0xc92 <lcd_write+0x6>
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
    #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
      lcd_waitbusy();
     c96:	6a 83       	std	Y+2, r22	; 0x02
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	0e 94 38 06 	call	0xc70	; 0xc70 <lcd_waitbusy>
      if (PrevCmdInvolvedAddressCounter)
     c9e:	90 91 20 02 	lds	r25, 0x0220
     ca2:	6a 81       	ldd	r22, Y+2	; 0x02
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	99 23       	and	r25, r25
     ca8:	29 f0       	breq	.+10     	; 0xcb4 <lcd_write+0x28>
        {
          Delay_us(5);
     caa:	00 c0       	rjmp	.+0      	; 0xcac <lcd_write+0x20>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <lcd_write+0x22>
     cae:	00 00       	nop
          PrevCmdInvolvedAddressCounter=0;
     cb0:	10 92 20 02 	sts	0x0220, r1
        }
    #endif

    if (rs)
     cb4:	66 23       	and	r22, r22
     cb6:	29 f0       	breq	.+10     	; 0xcc2 <lcd_write+0x36>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
     cb8:	97 9a       	sbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=1;
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	90 93 20 02 	sts	0x0220, r25
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <lcd_write+0x3c>
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
     cc2:	97 98       	cbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=0;
     cc4:	10 92 20 02 	sts	0x0220, r1
      lcd_db6_port_high();
      lcd_db5_port_high();
      lcd_db4_port_high();

    #else //using 8-Bit_Mode
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
     cc8:	87 ff       	sbrs	r24, 7
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <lcd_write+0x44>
     ccc:	af 9a       	sbi	0x15, 7	; 21
     cce:	01 c0       	rjmp	.+2      	; 0xcd2 <lcd_write+0x46>
     cd0:	af 98       	cbi	0x15, 7	; 21
      lcd_db6_port_set(data&_BV(6));
     cd2:	86 ff       	sbrs	r24, 6
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <lcd_write+0x4e>
     cd6:	ae 9a       	sbi	0x15, 6	; 21
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <lcd_write+0x50>
     cda:	ae 98       	cbi	0x15, 6	; 21
      lcd_db5_port_set(data&_BV(5));
     cdc:	85 ff       	sbrs	r24, 5
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <lcd_write+0x58>
     ce0:	ad 9a       	sbi	0x15, 5	; 21
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <lcd_write+0x5a>
     ce4:	ad 98       	cbi	0x15, 5	; 21
      lcd_db4_port_set(data&_BV(4));
     ce6:	84 ff       	sbrs	r24, 4
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <lcd_write+0x62>
     cea:	ac 9a       	sbi	0x15, 4	; 21
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <lcd_write+0x64>
     cee:	ac 98       	cbi	0x15, 4	; 21
      lcd_db3_port_set(data&_BV(3));                  //Output High Nibble
     cf0:	83 ff       	sbrs	r24, 3
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <lcd_write+0x6c>
     cf4:	ab 9a       	sbi	0x15, 3	; 21
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <lcd_write+0x6e>
     cf8:	ab 98       	cbi	0x15, 3	; 21
      lcd_db2_port_set(data&_BV(2));
     cfa:	82 ff       	sbrs	r24, 2
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <lcd_write+0x76>
     cfe:	aa 9a       	sbi	0x15, 2	; 21
     d00:	01 c0       	rjmp	.+2      	; 0xd04 <lcd_write+0x78>
     d02:	aa 98       	cbi	0x15, 2	; 21
      lcd_db1_port_set(data&_BV(1));
     d04:	81 ff       	sbrs	r24, 1
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <lcd_write+0x80>
     d08:	a9 9a       	sbi	0x15, 1	; 21
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <lcd_write+0x82>
     d0c:	a9 98       	cbi	0x15, 1	; 21
      lcd_db0_port_set(data&_BV(0));
     d0e:	80 ff       	sbrs	r24, 0
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <lcd_write+0x8a>
     d12:	a8 9a       	sbi	0x15, 0	; 21
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <lcd_write+0x8c>
     d16:	a8 98       	cbi	0x15, 0	; 21

      Delay_ns(100);
     d18:	00 00       	nop
      lcd_e_port_high();
     d1a:	0e 94 bc 05 	call	0xb78	; 0xb78 <lcd_e_port_high>
      Delay_ns(500);
     d1e:	00 00       	nop
      lcd_e_port_low();
     d20:	0e 94 b6 05 	call	0xb6c	; 0xb6c <lcd_e_port_low>

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
     d24:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
     d26:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
     d28:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
     d2a:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db3_port_high();
     d2c:	ab 9a       	sbi	0x15, 3	; 21
      lcd_db2_port_high();
     d2e:	aa 9a       	sbi	0x15, 2	; 21
      lcd_db1_port_high();
     d30:	a9 9a       	sbi	0x15, 1	; 21
      lcd_db0_port_high();
     d32:	a8 9a       	sbi	0x15, 0	; 21
    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
        Delay_us(1640);
      else Delay_us(40);
    #endif
  }
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	08 95       	ret

00000d3e <lcd_getc>:
    return data;
  }

uint8_t lcd_getc()
  {
    return lcd_read(1);
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <lcd_read>

00000d44 <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <lcd_write>

00000d4a <lcd_goto>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
     d4a:	80 58       	subi	r24, 0x80	; 128
     d4c:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <lcd_command>

00000d50 <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <lcd_command>

00000d56 <lcd_home>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
  {
    lcd_command(1<<LCD_HOME);
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <lcd_command>

00000d5c <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <lcd_write>

00000d62 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ec 01       	movw	r28, r24
    register char c;

    while ((c=*s++)) 
     d68:	89 91       	ld	r24, Y+
     d6a:	88 23       	and	r24, r24
     d6c:	19 f0       	breq	.+6      	; 0xd74 <lcd_puts+0x12>
      lcd_putc(c);
     d6e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <lcd_putc>
     d72:	fa cf       	rjmp	.-12     	; 0xd68 <lcd_puts+0x6>
  }
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	fc 01       	movw	r30, r24
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
     d80:	84 91       	lpm	r24, Z
     d82:	ef 01       	movw	r28, r30
     d84:	21 96       	adiw	r28, 0x01	; 1
     d86:	88 23       	and	r24, r24
     d88:	21 f0       	breq	.+8      	; 0xd92 <lcd_puts_P+0x18>
      lcd_putc(c);
     d8a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <lcd_putc>
     d8e:	fe 01       	movw	r30, r28
     d90:	f7 cf       	rjmp	.-18     	; 0xd80 <lcd_puts_P+0x6>
  }
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	08 95       	ret

00000d98 <lcd_init>:
     d98:	e4 e6       	ldi	r30, 0x64	; 100
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	82 60       	ori	r24, 0x02	; 2
     da0:	80 83       	st	Z, r24
     da2:	8f 9a       	sbi	0x11, 7	; 17
     da4:	80 81       	ld	r24, Z
     da6:	81 60       	ori	r24, 0x01	; 1
     da8:	80 83       	st	Z, r24
     daa:	a7 9a       	sbi	0x14, 7	; 20
     dac:	a6 9a       	sbi	0x14, 6	; 20
     dae:	a5 9a       	sbi	0x14, 5	; 20
     db0:	a4 9a       	sbi	0x14, 4	; 20
     db2:	a3 9a       	sbi	0x14, 3	; 20
     db4:	a2 9a       	sbi	0x14, 2	; 20
     db6:	a1 9a       	sbi	0x14, 1	; 20
     db8:	a0 9a       	sbi	0x14, 0	; 20
     dba:	0e 94 b6 05 	call	0xb6c	; 0xb6c <lcd_e_port_low>
     dbe:	97 98       	cbi	0x12, 7	; 18
     dc0:	e5 e6       	ldi	r30, 0x65	; 101
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8e 7f       	andi	r24, 0xFE	; 254
     dc8:	80 83       	st	Z, r24
     dca:	af 9a       	sbi	0x15, 7	; 21
     dcc:	ae 9a       	sbi	0x15, 6	; 21
     dce:	ad 9a       	sbi	0x15, 5	; 21
     dd0:	ac 9a       	sbi	0x15, 4	; 21
     dd2:	ab 9a       	sbi	0x15, 3	; 21
     dd4:	aa 9a       	sbi	0x15, 2	; 21
     dd6:	a9 9a       	sbi	0x15, 1	; 21
     dd8:	a8 9a       	sbi	0x15, 0	; 21
     dda:	85 ea       	ldi	r24, 0xA5	; 165
     ddc:	9e e0       	ldi	r25, 0x0E	; 14
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <lcd_init+0x46>
     de2:	00 c0       	rjmp	.+0      	; 0xde4 <lcd_init+0x4c>
     de4:	00 00       	nop
     de6:	af 98       	cbi	0x15, 7	; 21
     de8:	ae 98       	cbi	0x15, 6	; 21
     dea:	00 00       	nop
     dec:	0e 94 bc 05 	call	0xb78	; 0xb78 <lcd_e_port_high>
     df0:	00 00       	nop
     df2:	0e 94 b6 05 	call	0xb6c	; 0xb6c <lcd_e_port_low>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	94 e0       	ldi	r25, 0x04	; 4
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	f1 f7       	brne	.-4      	; 0xdfa <lcd_init+0x62>
     dfe:	00 c0       	rjmp	.+0      	; 0xe00 <lcd_init+0x68>
     e00:	00 00       	nop
     e02:	0e 94 bc 05 	call	0xb78	; 0xb78 <lcd_e_port_high>
     e06:	00 00       	nop
     e08:	0e 94 b6 05 	call	0xb6c	; 0xb6c <lcd_e_port_low>
     e0c:	91 e2       	ldi	r25, 0x21	; 33
     e0e:	9a 95       	dec	r25
     e10:	f1 f7       	brne	.-4      	; 0xe0e <lcd_init+0x76>
     e12:	00 00       	nop
     e14:	0e 94 bc 05 	call	0xb78	; 0xb78 <lcd_e_port_high>
     e18:	00 00       	nop
     e1a:	0e 94 b6 05 	call	0xb6c	; 0xb6c <lcd_e_port_low>
     e1e:	8d e0       	ldi	r24, 0x0D	; 13
     e20:	8a 95       	dec	r24
     e22:	f1 f7       	brne	.-4      	; 0xe20 <lcd_init+0x88>
     e24:	00 00       	nop
     e26:	aa 98       	cbi	0x15, 2	; 21
     e28:	00 00       	nop
     e2a:	0e 94 bc 05 	call	0xb78	; 0xb78 <lcd_e_port_high>
     e2e:	00 00       	nop
     e30:	0e 94 b6 05 	call	0xb6c	; 0xb6c <lcd_e_port_low>
     e34:	9d e0       	ldi	r25, 0x0D	; 13
     e36:	9a 95       	dec	r25
     e38:	f1 f7       	brne	.-4      	; 0xe36 <lcd_init+0x9e>
     e3a:	00 00       	nop
     e3c:	88 e0       	ldi	r24, 0x08	; 8
     e3e:	0e 94 a2 06 	call	0xd44	; 0xd44 <lcd_command>
     e42:	0e 94 a8 06 	call	0xd50	; 0xd50 <lcd_clrscr>
     e46:	86 e0       	ldi	r24, 0x06	; 6
     e48:	0e 94 a2 06 	call	0xd44	; 0xd44 <lcd_command>
     e4c:	8c e0       	ldi	r24, 0x0C	; 12
     e4e:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <lcd_command>

00000e52 <main>:
}

int main(void)
{
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	c6 54       	subi	r28, 0x46	; 70
     e5c:	d1 09       	sbc	r29, r1
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
  uint16_t steps;
  
  static const char string_intro_row1[] PROGMEM = "*** SM6VFZ";
  static const char string_intro_row2[] PROGMEM = "Starting radio";

  DDRA = 0xFF;
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xFF;
     e6c:	87 bb       	out	0x17, r24	; 23
  DDRC = 0xFF;
     e6e:	84 bb       	out	0x14, r24	; 20
  DDRD = ~(uint8_t)((1 << ROT2_A)|(1 << ROT2_B));
     e70:	93 ef       	ldi	r25, 0xF3	; 243
     e72:	91 bb       	out	0x11, r25	; 17
  DDRE = ~(uint8_t)((1 << ROT1_A)|(1 << ROT1_B)|(1 << VOLROT_A)|(1 << VOLROT_B)|(1 << FREQ_BUTTON));
     e74:	97 e0       	ldi	r25, 0x07	; 7
     e76:	92 b9       	out	0x02, r25	; 2
  DDRF = ~(uint8_t)((1 << VOL_BUTTON)|(1 << MODE_BUTTON)|(1 << BAND_BUTTON)|(1 << CLAR_POT)|(1 << MENU_BUTTON));
     e78:	90 ee       	ldi	r25, 0xE0	; 224
     e7a:	90 93 61 00 	sts	0x0061, r25
  DDRG = 0xFF;  
     e7e:	80 93 64 00 	sts	0x0064, r24
	
  PORTA = 0x00;
     e82:	1b ba       	out	0x1b, r1	; 27
  PORTB = 0x00;
     e84:	18 ba       	out	0x18, r1	; 24
  PORTC = 0x00;
     e86:	15 ba       	out	0x15, r1	; 21
  PORTD = (uint8_t)((1 << ROT2_A)|(1 << ROT2_B));
     e88:	8c e0       	ldi	r24, 0x0C	; 12
     e8a:	82 bb       	out	0x12, r24	; 18
  PORTE = (uint8_t)((1 << ROT1_A)|(1 << ROT1_B)|(1 << VOLROT_A)|(1 << VOLROT_B)|(1 << FREQ_BUTTON)|(1 << ROT_BUTTON));
     e8c:	88 ef       	ldi	r24, 0xF8	; 248
     e8e:	83 b9       	out	0x03, r24	; 3
  PORTF = (uint8_t)((1 << VOL_BUTTON)|(1 << MODE_BUTTON)|(1 << BAND_BUTTON)|(1 << MODE_BUTTON)|(1 << SQUELCH_BUTTON));
     e90:	83 e1       	ldi	r24, 0x13	; 19
     e92:	80 93 62 00 	sts	0x0062, r24
  PORTG = 0x00;
     e96:	10 92 65 00 	sts	0x0065, r1
	
  // turn off the analog comparator
  ACSR = 0x40U;
     e9a:	80 e4       	ldi	r24, 0x40	; 64
     e9c:	88 b9       	out	0x08, r24	; 8
	
  // turn off SPI, TWI and USART0
  //PRR  = 0x86U;
	
  EICRA = (1<<ISC21)|(1<<ISC31);
     e9e:	80 ea       	ldi	r24, 0xA0	; 160
     ea0:	80 93 6a 00 	sts	0x006A, r24
  EICRB = (1<<ISC41)|(1<<ISC51)|(1<<ISC61)|(1<<ISC71);
     ea4:	8a ea       	ldi	r24, 0xAA	; 170
     ea6:	8a bf       	out	0x3a, r24	; 58

  EIMSK = (1 << INTF2)|(1 << INTF3)|(1 << INTF4)|(1 << INTF5)|(1 << INTF6)|(1 << INTF7);
     ea8:	8c ef       	ldi	r24, 0xFC	; 252
     eaa:	89 bf       	out	0x39, r24	; 57
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	a8 95       	wdr
     eb2:	81 b5       	in	r24, 0x21	; 33
     eb4:	88 61       	ori	r24, 0x18	; 24
     eb6:	81 bd       	out	0x21, r24	; 33
     eb8:	11 bc       	out	0x21, r1	; 33
     eba:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ebc:	2f e9       	ldi	r18, 0x9F	; 159
     ebe:	86 e8       	ldi	r24, 0x86	; 134
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	21 50       	subi	r18, 0x01	; 1
     ec4:	80 40       	sbci	r24, 0x00	; 0
     ec6:	90 40       	sbci	r25, 0x00	; 0
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <main+0x70>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <main+0x7a>
     ecc:	00 00       	nop

  wdt_disable();

  _delay_ms(500);

  PORTD |= (1 << LED_RED) | (1 << LED_GREEN);
     ece:	82 b3       	in	r24, 0x12	; 18
     ed0:	80 66       	ori	r24, 0x60	; 96
     ed2:	82 bb       	out	0x12, r24	; 18

  TIMSK = 0;
     ed4:	17 be       	out	0x37, r1	; 55
  Timer0Init();
     ed6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer0Init>
  Timer1Init();
     eda:	0e 94 ab 05 	call	0xb56	; 0xb56 <Timer1Init>
  TWIinit();
     ede:	0e 94 0e 02 	call	0x41c	; 0x41c <TWIinit>
  lcd_init();
     ee2:	0e 94 cc 06 	call	0xd98	; 0xd98 <lcd_init>
  lcd_clrscr();
     ee6:	0e 94 a8 06 	call	0xd50	; 0xd50 <lcd_clrscr>
  adcInit();
     eea:	0e 94 9d 05 	call	0xb3a	; 0xb3a <adcInit>
     eee:	af e4       	ldi	r26, 0x4F	; 79
     ef0:	b3 ec       	ldi	r27, 0xC3	; 195
     ef2:	11 97       	sbiw	r26, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <main+0xa0>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <main+0xa6>
     ef8:	00 00       	nop

  _delay_ms(200);

  PORTD &= ~((1 << LED_RED) | (1 << LED_GREEN));
     efa:	82 b3       	in	r24, 0x12	; 18
     efc:	8f 79       	andi	r24, 0x9F	; 159
     efe:	82 bb       	out	0x12, r24	; 18

  strcpy_P(buffer, string_intro_row1);
     f00:	6b e9       	ldi	r22, 0x9B	; 155
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	6c 01       	movw	r12, r24
     f0a:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <strcpy_P>
  lcd_puts(buffer);
     f0e:	c6 01       	movw	r24, r12
     f10:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
  lcd_goto(0x40);
     f14:	80 e4       	ldi	r24, 0x40	; 64
     f16:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
  strcpy_P(buffer, string_intro_row2);
     f1a:	6c e8       	ldi	r22, 0x8C	; 140
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	c6 01       	movw	r24, r12
     f20:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <strcpy_P>
  lcd_puts(buffer);
     f24:	c6 01       	movw	r24, r12
     f26:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>

  rot_flag = 0x01;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	80 93 27 02 	sts	0x0227, r24
  mode_flag = 0x01;
     f30:	80 93 24 02 	sts	0x0224, r24
  band_flag = 0x02;
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	80 93 26 02 	sts	0x0226, r24
  timer_flag = 0x00;
     f3a:	10 92 2f 02 	sts	0x022F, r1

  band = 10;
     f3e:	8a e0       	ldi	r24, 0x0A	; 10
     f40:	80 93 21 02 	sts	0x0221, r24
  freq = 7010;
  step_timer = 255;
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	90 93 2e 02 	sts	0x022E, r25
     f4c:	80 93 2d 02 	sts	0x022D, r24
  steps = 0;
  last_dir = 0x00;
  mode = 0x00;
     f50:	10 92 29 02 	sts	0x0229, r1
  tx = 0x0000;
     f54:	10 92 2b 02 	sts	0x022B, r1
     f58:	10 92 2a 02 	sts	0x022A, r1
  rx_att = 0x00;
     f5c:	10 92 25 02 	sts	0x0225, r1
  tx_att = 0x00;
     f60:	10 92 2c 02 	sts	0x022C, r1
  rffe_rx_att = false;
     f64:	10 92 30 02 	sts	0x0230, r1

  err = updateVolumeSquelch(vol, squelch);
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	88 e1       	ldi	r24, 0x18	; 24
     f6c:	0e 94 0c 04 	call	0x818	; 0x818 <updateVolumeSquelch>
     f70:	9f e7       	ldi	r25, 0x7F	; 127
     f72:	aa e1       	ldi	r26, 0x1A	; 26
     f74:	b6 e0       	ldi	r27, 0x06	; 6
     f76:	91 50       	subi	r25, 0x01	; 1
     f78:	a0 40       	sbci	r26, 0x00	; 0
     f7a:	b0 40       	sbci	r27, 0x00	; 0
     f7c:	e1 f7       	brne	.-8      	; 0xf76 <main+0x124>
     f7e:	00 c0       	rjmp	.+0      	; 0xf80 <main+0x12e>
     f80:	00 00       	nop
  
  _delay_ms(2000);

  lcd_clrscr();
     f82:	0e 94 a8 06 	call	0xd50	; 0xd50 <lcd_clrscr>
  
  sei();
     f86:	78 94       	sei
  timer_flag = 0x00;

  band = 10;
  freq = 7010;
  step_timer = 255;
  steps = 0;
     f88:	41 2c       	mov	r4, r1
     f8a:	51 2c       	mov	r5, r1
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
  uint8_t last_dir;
  uint8_t squelch = 0;
  uint8_t tx_last = 255;
  uint8_t vol = 0x18;
     f8c:	48 e1       	ldi	r20, 0x18	; 24
     f8e:	64 2e       	mov	r6, r20
  int freq_offset = 0; // offset in MHz for display
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
  uint8_t last_dir;
  uint8_t squelch = 0;
  uint8_t tx_last = 255;
     f90:	2f ef       	ldi	r18, 0xFF	; 255
     f92:	2f af       	std	Y+63, r18	; 0x3f
  int8_t clar = 0;
  int freq_offset = 0; // offset in MHz for display
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
  uint8_t last_dir;
  uint8_t squelch = 0;
     f94:	71 2c       	mov	r7, r1

  band = 10;
  freq = 7010;
  step_timer = 255;
  steps = 0;
  last_dir = 0x00;
     f96:	23 96       	adiw	r28, 0x03	; 3
     f98:	1f ae       	std	Y+63, r1	; 0x3f
     f9a:	23 97       	sbiw	r28, 0x03	; 3
  double freq, freq_last;  // kHz part
  int16_t clarval, clarval_last;
  int8_t clar = 0;
  int freq_offset = 0; // offset in MHz for display
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
     f9c:	a1 2c       	mov	r10, r1
     f9e:	b1 2c       	mov	r11, r1
int main(void)
{
  char buffer[60];
  double freq, freq_last;  // kHz part
  int16_t clarval, clarval_last;
  int8_t clar = 0;
     fa0:	1e ae       	std	Y+62, r1	; 0x3e
  mode_flag = 0x01;
  band_flag = 0x02;
  timer_flag = 0x00;

  band = 10;
  freq = 7010;
     fa2:	10 e0       	ldi	r17, 0x00	; 0
     fa4:	00 e1       	ldi	r16, 0x10	; 16
     fa6:	5b ed       	ldi	r21, 0xDB	; 219
     fa8:	f5 2e       	mov	r15, r21
     faa:	65 e4       	ldi	r22, 0x45	; 69
     fac:	e6 2e       	mov	r14, r22
  lcd_clrscr();
  
  sei();

  while (1) {
    if (timer_flag) {
     fae:	80 91 2f 02 	lds	r24, 0x022F
     fb2:	88 23       	and	r24, r24
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <main+0x166>
     fb6:	0e c2       	rjmp	.+1052   	; 0x13d4 <__stack+0x2d5>
    return err;
  return 0x00;
}

uint16_t readClar(void) {
  return (ADC);
     fb8:	84 b0       	in	r8, 0x04	; 4
     fba:	95 b0       	in	r9, 0x05	; 5
#endif
#ifndef CLARPOT
      clarval = 0;
#endif

      if ((clarval < clarval_last - 10) || (clarval > clarval_last + 10)) {
     fbc:	c1 01       	movw	r24, r2
     fbe:	0a 97       	sbiw	r24, 0x0a	; 10
     fc0:	88 16       	cp	r8, r24
     fc2:	99 06       	cpc	r9, r25
     fc4:	2c f0       	brlt	.+10     	; 0xfd0 <main+0x17e>
     fc6:	44 96       	adiw	r24, 0x14	; 20
     fc8:	88 15       	cp	r24, r8
     fca:	99 05       	cpc	r25, r9
     fcc:	0c f0       	brlt	.+2      	; 0xfd0 <main+0x17e>
     fce:	83 c0       	rjmp	.+262    	; 0x10d6 <main+0x284>
	clar = (int8_t)((clarval - 512) >> 2);
     fd0:	a4 01       	movw	r20, r8
     fd2:	52 50       	subi	r21, 0x02	; 2
     fd4:	55 95       	asr	r21
     fd6:	47 95       	ror	r20
     fd8:	55 95       	asr	r21
     fda:	47 95       	ror	r20
     fdc:	4e af       	std	Y+62, r20	; 0x3e
	err = updateFreq(freq,clar,0);
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	61 2f       	mov	r22, r17
     fe2:	70 2f       	mov	r23, r16
     fe4:	8f 2d       	mov	r24, r15
     fe6:	9e 2d       	mov	r25, r14
     fe8:	0e 94 4d 04 	call	0x89a	; 0x89a <updateFreq>
	if (err) {
     fec:	88 23       	and	r24, r24
     fee:	b9 f0       	breq	.+46     	; 0x101e <main+0x1cc>
	  sprintf(buffer,"Err %x         ",err);
     ff0:	1f 92       	push	r1
     ff2:	8f 93       	push	r24
     ff4:	82 e0       	ldi	r24, 0x02	; 2
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	9f 93       	push	r25
     ffa:	8f 93       	push	r24
     ffc:	df 92       	push	r13
     ffe:	cf 92       	push	r12
    1000:	0e 94 c6 14 	call	0x298c	; 0x298c <sprintf>
	  lcd_goto(0x40);
    1004:	80 e4       	ldi	r24, 0x40	; 64
    1006:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	  lcd_puts(buffer);	
    100a:	c6 01       	movw	r24, r12
    100c:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	5b c0       	rjmp	.+182    	; 0x10d4 <main+0x282>
	}
	else {
	  lcd_freq();
    101e:	84 e0       	ldi	r24, 0x04	; 4
    1020:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	4a e7       	ldi	r20, 0x7A	; 122
    102a:	54 e4       	ldi	r21, 0x44	; 68
    102c:	61 2f       	mov	r22, r17
    102e:	70 2f       	mov	r23, r16
    1030:	8f 2d       	mov	r24, r15
    1032:	9e 2d       	mov	r25, r14
    1034:	0e 94 26 12 	call	0x244c	; 0x244c <fmod>
    1038:	24 96       	adiw	r28, 0x04	; 4
    103a:	6f af       	std	Y+63, r22	; 0x3f
    103c:	24 97       	sbiw	r28, 0x04	; 4
    103e:	25 96       	adiw	r28, 0x05	; 5
    1040:	7f af       	std	Y+63, r23	; 0x3f
    1042:	25 97       	sbiw	r28, 0x05	; 5
    1044:	38 2e       	mov	r3, r24
    1046:	29 2e       	mov	r2, r25
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	4a e7       	ldi	r20, 0x7A	; 122
    104e:	54 e4       	ldi	r21, 0x44	; 68
    1050:	61 2f       	mov	r22, r17
    1052:	70 2f       	mov	r23, r16
    1054:	8f 2d       	mov	r24, r15
    1056:	9e 2d       	mov	r25, r14
    1058:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divsf3>
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	a9 01       	movw	r20, r18
    1062:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__addsf3>
    1066:	0e 94 04 12 	call	0x2408	; 0x2408 <floor>
    106a:	2f 92       	push	r2
    106c:	3f 92       	push	r3
    106e:	25 96       	adiw	r28, 0x05	; 5
    1070:	af ad       	ldd	r26, Y+63	; 0x3f
    1072:	25 97       	sbiw	r28, 0x05	; 5
    1074:	af 93       	push	r26
    1076:	24 96       	adiw	r28, 0x04	; 4
    1078:	bf ad       	ldd	r27, Y+63	; 0x3f
    107a:	24 97       	sbiw	r28, 0x04	; 4
    107c:	bf 93       	push	r27
    107e:	0e 94 ce 11 	call	0x239c	; 0x239c <__fixsfsi>
    1082:	7f 93       	push	r23
    1084:	6f 93       	push	r22
    1086:	82 e1       	ldi	r24, 0x12	; 18
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	9f 93       	push	r25
    108c:	8f 93       	push	r24
    108e:	df 92       	push	r13
    1090:	cf 92       	push	r12
    1092:	0e 94 c6 14 	call	0x298c	; 0x298c <sprintf>
    1096:	c6 01       	movw	r24, r12
    1098:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    109c:	8f e0       	ldi	r24, 0x0F	; 15
    109e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    10ae:	9b 30       	cpi	r25, 0x0B	; 11
    10b0:	1c f0       	brlt	.+6      	; 0x10b8 <main+0x266>
    10b2:	61 e2       	ldi	r22, 0x21	; 33
    10b4:	71 e0       	ldi	r23, 0x01	; 1
    10b6:	08 c0       	rjmp	.+16     	; 0x10c8 <main+0x276>
    10b8:	ae ad       	ldd	r26, Y+62	; 0x3e
    10ba:	a6 3f       	cpi	r26, 0xF6	; 246
    10bc:	1c f4       	brge	.+6      	; 0x10c4 <main+0x272>
    10be:	63 e2       	ldi	r22, 0x23	; 35
    10c0:	71 e0       	ldi	r23, 0x01	; 1
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <main+0x276>
    10c4:	6c e3       	ldi	r22, 0x3C	; 60
    10c6:	71 e0       	ldi	r23, 0x01	; 1
    10c8:	c6 01       	movw	r24, r12
    10ca:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <strcpy>
    10ce:	c6 01       	movw	r24, r12
    10d0:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>

  while (1) {
    if (timer_flag) {

#ifdef CLARPOT
      clarval = readClar();
    10d4:	14 01       	movw	r2, r8
	  lcd_freq();
	}
	clarval_last = clarval;
      }

      if (vol_timer < 255)
    10d6:	80 91 00 01 	lds	r24, 0x0100
    10da:	8f 3f       	cpi	r24, 0xFF	; 255
    10dc:	29 f0       	breq	.+10     	; 0x10e8 <main+0x296>
	vol_timer ++;
    10de:	80 91 00 01 	lds	r24, 0x0100
    10e2:	8f 5f       	subi	r24, 0xFF	; 255
    10e4:	80 93 00 01 	sts	0x0100, r24

      // Band button

      if (band_timer < 9) { // Recently pressed ?
    10e8:	80 91 01 01 	lds	r24, 0x0101
    10ec:	89 30       	cpi	r24, 0x09	; 9
    10ee:	d8 f4       	brcc	.+54     	; 0x1126 <__stack+0x27>
	band_timer ++;
    10f0:	80 91 01 01 	lds	r24, 0x0101
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	80 93 01 01 	sts	0x0101, r24
	if ((band_timer < 9) && (PINF & (1 << BAND_BUTTON))) {
    10fa:	80 91 01 01 	lds	r24, 0x0101
    10fe:	89 30       	cpi	r24, 0x09	; 9
    1100:	40 f4       	brcc	.+16     	; 0x1112 <__stack+0x13>
    1102:	00 9b       	sbis	0x00, 0	; 0
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <__stack+0x13>
	  band_flag = 0x01; // short press
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	80 93 26 02 	sts	0x0226, r24
	  band_timer = 255;
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	80 93 01 01 	sts	0x0101, r24
	}
	if ((band_timer == 9) && (!(PINF & (1 << BAND_BUTTON)))) 
    1112:	80 91 01 01 	lds	r24, 0x0101
    1116:	89 30       	cpi	r24, 0x09	; 9
    1118:	49 f4       	brne	.+18     	; 0x112c <__stack+0x2d>
    111a:	00 99       	sbic	0x00, 0	; 0
    111c:	07 c0       	rjmp	.+14     	; 0x112c <__stack+0x2d>
	  band_flag = 0x02; // long press
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	80 93 26 02 	sts	0x0226, r24
    1124:	03 c0       	rjmp	.+6      	; 0x112c <__stack+0x2d>
      }
      else if (!(PINF & (1 << BAND_BUTTON))) {  // New press
    1126:	00 9b       	sbis	0x00, 0	; 0
	band_timer = 0;
    1128:	10 92 01 01 	sts	0x0101, r1
      }

      // Mode button

      if (!(PINF & (1 << MODE_BUTTON))) {
    112c:	01 99       	sbic	0x00, 1	; 0
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <__stack+0x37>
	mode_flag = 0x01;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 93 24 02 	sts	0x0224, r24
      }
      
      // Update frequency if necessary:
      if (freq != freq_last) {
    1136:	21 96       	adiw	r28, 0x01	; 1
    1138:	2f ad       	ldd	r18, Y+63	; 0x3f
    113a:	21 97       	sbiw	r28, 0x01	; 1
    113c:	22 96       	adiw	r28, 0x02	; 2
    113e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1140:	22 97       	sbiw	r28, 0x02	; 2
    1142:	26 96       	adiw	r28, 0x06	; 6
    1144:	4f ad       	ldd	r20, Y+63	; 0x3f
    1146:	26 97       	sbiw	r28, 0x06	; 6
    1148:	27 96       	adiw	r28, 0x07	; 7
    114a:	5f ad       	ldd	r21, Y+63	; 0x3f
    114c:	27 97       	sbiw	r28, 0x07	; 7
    114e:	61 2f       	mov	r22, r17
    1150:	70 2f       	mov	r23, r16
    1152:	8f 2d       	mov	r24, r15
    1154:	9e 2d       	mov	r25, r14
    1156:	0e 94 57 11 	call	0x22ae	; 0x22ae <__cmpsf2>
    115a:	88 23       	and	r24, r24
    115c:	09 f4       	brne	.+2      	; 0x1160 <__stack+0x61>
    115e:	87 c0       	rjmp	.+270    	; 0x126e <__stack+0x16f>
	lcd_freq();
    1160:	84 e0       	ldi	r24, 0x04	; 4
    1162:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	4a e7       	ldi	r20, 0x7A	; 122
    116c:	54 e4       	ldi	r21, 0x44	; 68
    116e:	61 2f       	mov	r22, r17
    1170:	70 2f       	mov	r23, r16
    1172:	8f 2d       	mov	r24, r15
    1174:	9e 2d       	mov	r25, r14
    1176:	0e 94 26 12 	call	0x244c	; 0x244c <fmod>
    117a:	96 2e       	mov	r9, r22
    117c:	87 2e       	mov	r8, r23
    117e:	21 96       	adiw	r28, 0x01	; 1
    1180:	8f af       	std	Y+63, r24	; 0x3f
    1182:	21 97       	sbiw	r28, 0x01	; 1
    1184:	22 96       	adiw	r28, 0x02	; 2
    1186:	9f af       	std	Y+63, r25	; 0x3f
    1188:	22 97       	sbiw	r28, 0x02	; 2
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	4a e7       	ldi	r20, 0x7A	; 122
    1190:	54 e4       	ldi	r21, 0x44	; 68
    1192:	61 2f       	mov	r22, r17
    1194:	70 2f       	mov	r23, r16
    1196:	8f 2d       	mov	r24, r15
    1198:	9e 2d       	mov	r25, r14
    119a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divsf3>
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__addsf3>
    11a8:	0e 94 04 12 	call	0x2408	; 0x2408 <floor>
    11ac:	22 96       	adiw	r28, 0x02	; 2
    11ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    11b0:	22 97       	sbiw	r28, 0x02	; 2
    11b2:	bf 93       	push	r27
    11b4:	21 96       	adiw	r28, 0x01	; 1
    11b6:	2f ad       	ldd	r18, Y+63	; 0x3f
    11b8:	21 97       	sbiw	r28, 0x01	; 1
    11ba:	2f 93       	push	r18
    11bc:	8f 92       	push	r8
    11be:	9f 92       	push	r9
    11c0:	0e 94 ce 11 	call	0x239c	; 0x239c <__fixsfsi>
    11c4:	7f 93       	push	r23
    11c6:	6f 93       	push	r22
    11c8:	82 e1       	ldi	r24, 0x12	; 18
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	9f 93       	push	r25
    11ce:	8f 93       	push	r24
    11d0:	df 92       	push	r13
    11d2:	cf 92       	push	r12
    11d4:	0e 94 c6 14 	call	0x298c	; 0x298c <sprintf>
    11d8:	c6 01       	movw	r24, r12
    11da:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    11de:	8f e0       	ldi	r24, 0x0F	; 15
    11e0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    11f0:	9b 30       	cpi	r25, 0x0B	; 11
    11f2:	1c f0       	brlt	.+6      	; 0x11fa <__stack+0xfb>
    11f4:	61 e2       	ldi	r22, 0x21	; 33
    11f6:	71 e0       	ldi	r23, 0x01	; 1
    11f8:	08 c0       	rjmp	.+16     	; 0x120a <__stack+0x10b>
    11fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    11fc:	a6 3f       	cpi	r26, 0xF6	; 246
    11fe:	1c f4       	brge	.+6      	; 0x1206 <__stack+0x107>
    1200:	63 e2       	ldi	r22, 0x23	; 35
    1202:	71 e0       	ldi	r23, 0x01	; 1
    1204:	02 c0       	rjmp	.+4      	; 0x120a <__stack+0x10b>
    1206:	6c e3       	ldi	r22, 0x3C	; 60
    1208:	71 e0       	ldi	r23, 0x01	; 1
    120a:	c6 01       	movw	r24, r12
    120c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <strcpy>
    1210:	c6 01       	movw	r24, r12
    1212:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
	err = updateFreq(freq,clar,1);
    1216:	21 e0       	ldi	r18, 0x01	; 1
    1218:	4e ad       	ldd	r20, Y+62	; 0x3e
    121a:	61 2f       	mov	r22, r17
    121c:	70 2f       	mov	r23, r16
    121e:	8f 2d       	mov	r24, r15
    1220:	9e 2d       	mov	r25, r14
    1222:	0e 94 4d 04 	call	0x89a	; 0x89a <updateFreq>
	if (err) {
    1226:	88 23       	and	r24, r24
    1228:	b1 f0       	breq	.+44     	; 0x1256 <__stack+0x157>
	  sprintf(buffer,"Err %x         ",err);
    122a:	1f 92       	push	r1
    122c:	8f 93       	push	r24
    122e:	82 e0       	ldi	r24, 0x02	; 2
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	9f 93       	push	r25
    1234:	8f 93       	push	r24
    1236:	df 92       	push	r13
    1238:	cf 92       	push	r12
    123a:	0e 94 c6 14 	call	0x298c	; 0x298c <sprintf>
	  lcd_goto(0x40);
    123e:	80 e4       	ldi	r24, 0x40	; 64
    1240:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	  lcd_puts(buffer);	
    1244:	c6 01       	movw	r24, r12
    1246:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
	}
	freq_last = freq;
    1256:	21 96       	adiw	r28, 0x01	; 1
    1258:	1f af       	std	Y+63, r17	; 0x3f
    125a:	21 97       	sbiw	r28, 0x01	; 1
    125c:	22 96       	adiw	r28, 0x02	; 2
    125e:	0f af       	std	Y+63, r16	; 0x3f
    1260:	22 97       	sbiw	r28, 0x02	; 2
    1262:	26 96       	adiw	r28, 0x06	; 6
    1264:	ff ae       	std	Y+63, r15	; 0x3f
    1266:	26 97       	sbiw	r28, 0x06	; 6
    1268:	27 96       	adiw	r28, 0x07	; 7
    126a:	ef ae       	std	Y+63, r14	; 0x3f
    126c:	27 97       	sbiw	r28, 0x07	; 7
      }

      // Read RSSI and status:
      err = TWI_read_byte(fpga_addr, &data);
    126e:	be 01       	movw	r22, r28
    1270:	63 5c       	subi	r22, 0xC3	; 195
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	83 e2       	ldi	r24, 0x23	; 35
    1276:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <TWI_read_byte>
      if (!err) {
    127a:	81 11       	cpse	r24, r1
    127c:	20 c0       	rjmp	.+64     	; 0x12be <__stack+0x1bf>
	if ((data & 0x80) && (tx_last != 1)) { // Shift to TX ?
    127e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1280:	87 ff       	sbrs	r24, 7
    1282:	10 c0       	rjmp	.+32     	; 0x12a4 <__stack+0x1a5>
    1284:	bf ad       	ldd	r27, Y+63	; 0x3f
    1286:	b1 30       	cpi	r27, 0x01	; 1
    1288:	e9 f0       	breq	.+58     	; 0x12c4 <__stack+0x1c5>
	  tx = 0x0001;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	90 93 2b 02 	sts	0x022B, r25
    1292:	80 93 2a 02 	sts	0x022A, r24
	  updateRFFE();
    1296:	0e 94 1c 04 	call	0x838	; 0x838 <updateRFFE>
	  PORTD |= (1 << LED_RED);
    129a:	96 9a       	sbi	0x12, 6	; 18
	  PORTD &= ~(1 << LED_GREEN);
    129c:	95 98       	cbi	0x12, 5	; 18
	  tx_last = 1;
    129e:	21 e0       	ldi	r18, 0x01	; 1
    12a0:	2f af       	std	Y+63, r18	; 0x3f
    12a2:	10 c0       	rjmp	.+32     	; 0x12c4 <__stack+0x1c5>
	}
	else if (!(data & 0x80) && (tx_last != 0)) { // Shift to RX ?
    12a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    12a6:	88 23       	and	r24, r24
    12a8:	69 f0       	breq	.+26     	; 0x12c4 <__stack+0x1c5>
	  tx = 0x0000;
    12aa:	10 92 2b 02 	sts	0x022B, r1
    12ae:	10 92 2a 02 	sts	0x022A, r1
	  updateRFFE();
    12b2:	0e 94 1c 04 	call	0x838	; 0x838 <updateRFFE>
	  PORTD |= (1 << LED_GREEN);
    12b6:	95 9a       	sbi	0x12, 5	; 18
	  PORTD &= ~(1 << LED_RED);
    12b8:	96 98       	cbi	0x12, 6	; 18
	  tx_last = 0;
    12ba:	1f ae       	std	Y+63, r1	; 0x3f
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <__stack+0x1c5>
	}
      }
      else { // error
	PORTD &= ~((1 << LED_RED)|(1 << LED_GREEN));
    12be:	82 b3       	in	r24, 0x12	; 18
    12c0:	8f 79       	andi	r24, 0x9F	; 159
    12c2:	82 bb       	out	0x12, r24	; 18
      }

      rssi = (0x3f & data); 
    12c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    12c6:	8f 73       	andi	r24, 0x3F	; 63
    12c8:	b8 16       	cp	r11, r24
    12ca:	08 f4       	brcc	.+2      	; 0x12ce <__stack+0x1cf>
    12cc:	b8 2e       	mov	r11, r24
      if (rssi_max < rssi) 
	rssi_max = rssi;
      rssi_count ++;
    12ce:	a3 94       	inc	r10
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
    12d0:	80 91 30 02 	lds	r24, 0x0230
    12d4:	81 11       	cpse	r24, r1
    12d6:	03 c0       	rjmp	.+6      	; 0x12de <__stack+0x1df>
    12d8:	92 e0       	ldi	r25, 0x02	; 2
    12da:	9a 15       	cp	r25, r10
    12dc:	48 f0       	brcs	.+18     	; 0x12f0 <__stack+0x1f1>
    12de:	80 91 30 02 	lds	r24, 0x0230
    12e2:	88 23       	and	r24, r24
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <__stack+0x1e9>
    12e6:	73 c0       	rjmp	.+230    	; 0x13ce <__stack+0x2cf>
    12e8:	a2 e0       	ldi	r26, 0x02	; 2
    12ea:	aa 15       	cp	r26, r10
    12ec:	08 f0       	brcs	.+2      	; 0x12f0 <__stack+0x1f1>
    12ee:	6f c0       	rjmp	.+222    	; 0x13ce <__stack+0x2cf>
	rssi_count = 0;
	if (rssi_max < 4)
    12f0:	b3 e0       	ldi	r27, 0x03	; 3
    12f2:	bb 15       	cp	r27, r11
    12f4:	18 f4       	brcc	.+6      	; 0x12fc <__stack+0x1fd>
	  rssi = 0;
	else 
	  rssi = rssi_max - 4;
    12f6:	8c ef       	ldi	r24, 0xFC	; 252
    12f8:	8b 0d       	add	r24, r11
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <__stack+0x1ff>
	rssi_max = rssi;
      rssi_count ++;
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
	rssi_count = 0;
	if (rssi_max < 4)
	  rssi = 0;
    12fc:	80 e0       	ldi	r24, 0x00	; 0
	else 
	  rssi = rssi_max - 4;
	rssi_max = 0;

	if (vol_timer < 10); // Don't print if vol info
    12fe:	90 91 00 01 	lds	r25, 0x0100
    1302:	9a 30       	cpi	r25, 0x0A	; 10
    1304:	08 f4       	brcc	.+2      	; 0x1308 <__stack+0x209>
    1306:	61 c0       	rjmp	.+194    	; 0x13ca <__stack+0x2cb>
	else if (rffe_rx_att && (rssi>9)) {
    1308:	90 91 30 02 	lds	r25, 0x0230
    130c:	99 23       	and	r25, r25
    130e:	29 f0       	breq	.+10     	; 0x131a <__stack+0x21b>
    1310:	8a 30       	cpi	r24, 0x0A	; 10
    1312:	18 f0       	brcs	.+6      	; 0x131a <__stack+0x21b>
	  sprintf(buffer,"S---9+++   ");
    1314:	65 e2       	ldi	r22, 0x25	; 37
    1316:	71 e0       	ldi	r23, 0x01	; 1
    1318:	49 c0       	rjmp	.+146    	; 0x13ac <__stack+0x2ad>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rffe_rx_att && (rssi < 10)) {
    131a:	90 91 30 02 	lds	r25, 0x0230
    131e:	99 23       	and	r25, r25
    1320:	29 f0       	breq	.+10     	; 0x132c <__stack+0x22d>
    1322:	8a 30       	cpi	r24, 0x0A	; 10
    1324:	88 f4       	brcc	.+34     	; 0x1348 <__stack+0x249>
	  rffe_rx_att = false;
    1326:	10 92 30 02 	sts	0x0230, r1
    132a:	4d c0       	rjmp	.+154    	; 0x13c6 <__stack+0x2c7>
	  err = updateRFFE();
	}
	else if (rssi < 2) { 
    132c:	82 30       	cpi	r24, 0x02	; 2
    132e:	28 f4       	brcc	.+10     	; 0x133a <__stack+0x23b>
	  sprintf(buffer,"S%d         ",rssi);
    1330:	1f 92       	push	r1
    1332:	8f 93       	push	r24
    1334:	81 e3       	ldi	r24, 0x31	; 49
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <__stack+0x263>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 4) {
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	28 f4       	brcc	.+10     	; 0x1348 <__stack+0x249>
	  sprintf(buffer,"S-%d        ",rssi);
    133e:	1f 92       	push	r1
    1340:	8f 93       	push	r24
    1342:	8e e3       	ldi	r24, 0x3E	; 62
    1344:	91 e0       	ldi	r25, 0x01	; 1
    1346:	0d c0       	rjmp	.+26     	; 0x1362 <__stack+0x263>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
 	}
	else if (rssi < 6) {
    1348:	86 30       	cpi	r24, 0x06	; 6
    134a:	28 f4       	brcc	.+10     	; 0x1356 <__stack+0x257>
	  sprintf(buffer,"S--%d       ",rssi);
    134c:	1f 92       	push	r1
    134e:	8f 93       	push	r24
    1350:	8b e4       	ldi	r24, 0x4B	; 75
    1352:	91 e0       	ldi	r25, 0x01	; 1
    1354:	06 c0       	rjmp	.+12     	; 0x1362 <__stack+0x263>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 8) {
    1356:	88 30       	cpi	r24, 0x08	; 8
    1358:	38 f4       	brcc	.+14     	; 0x1368 <__stack+0x269>
	  sprintf(buffer,"S---%d      ",rssi);
    135a:	1f 92       	push	r1
    135c:	8f 93       	push	r24
    135e:	88 e5       	ldi	r24, 0x58	; 88
    1360:	91 e0       	ldi	r25, 0x01	; 1
    1362:	9f 93       	push	r25
    1364:	8f 93       	push	r24
    1366:	08 c0       	rjmp	.+16     	; 0x1378 <__stack+0x279>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 10) {
    1368:	8a 30       	cpi	r24, 0x0A	; 10
    136a:	b8 f4       	brcc	.+46     	; 0x139a <__stack+0x29b>
	  sprintf(buffer,"S----%d     ",rssi);
    136c:	1f 92       	push	r1
    136e:	8f 93       	push	r24
    1370:	a5 e6       	ldi	r26, 0x65	; 101
    1372:	b1 e0       	ldi	r27, 0x01	; 1
    1374:	bf 93       	push	r27
    1376:	af 93       	push	r26
    1378:	df 92       	push	r13
    137a:	cf 92       	push	r12
    137c:	0e 94 c6 14 	call	0x298c	; 0x298c <sprintf>
	  lcd_goto(0x40);
    1380:	80 e4       	ldi	r24, 0x40	; 64
    1382:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	  lcd_puts(buffer);
    1386:	c6 01       	movw	r24, r12
    1388:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	18 c0       	rjmp	.+48     	; 0x13ca <__stack+0x2cb>
	}
	else if (rssi < 12) {
    139a:	8c 30       	cpi	r24, 0x0C	; 12
    139c:	18 f4       	brcc	.+6      	; 0x13a4 <__stack+0x2a5>
	  sprintf(buffer,"S----9+    ");
    139e:	62 e7       	ldi	r22, 0x72	; 114
    13a0:	71 e0       	ldi	r23, 0x01	; 1
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <__stack+0x2ad>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 13 ){
    13a4:	8c 30       	cpi	r24, 0x0C	; 12
    13a6:	61 f4       	brne	.+24     	; 0x13c0 <__stack+0x2c1>
	  sprintf(buffer,"S----9++   ");
    13a8:	6e e7       	ldi	r22, 0x7E	; 126
    13aa:	71 e0       	ldi	r23, 0x01	; 1
    13ac:	c6 01       	movw	r24, r12
    13ae:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <strcpy>
	  lcd_goto(0x40);
    13b2:	80 e4       	ldi	r24, 0x40	; 64
    13b4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	  lcd_puts(buffer);
    13b8:	c6 01       	movw	r24, r12
    13ba:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <__stack+0x2cb>
	}
	else {
	  rffe_rx_att = true;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	80 93 30 02 	sts	0x0230, r24
	  err = updateRFFE();
    13c6:	0e 94 1c 04 	call	0x838	; 0x838 <updateRFFE>
      rssi = (0x3f & data); 
      if (rssi_max < rssi) 
	rssi_max = rssi;
      rssi_count ++;
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
	rssi_count = 0;
    13ca:	a1 2c       	mov	r10, r1
	if (rssi_max < 4)
	  rssi = 0;
	else 
	  rssi = rssi_max - 4;
	rssi_max = 0;
    13cc:	b1 2c       	mov	r11, r1
	  rffe_rx_att = true;
	  err = updateRFFE();
	}
	rssi = 0;
      }
      timer_flag = 0;
    13ce:	10 92 2f 02 	sts	0x022F, r1
    13d2:	73 c0       	rjmp	.+230    	; 0x14ba <__stack+0x3bb>
    }
    else if (mode_flag) {
    13d4:	80 91 24 02 	lds	r24, 0x0224
    13d8:	88 23       	and	r24, r24
    13da:	09 f4       	brne	.+2      	; 0x13de <__stack+0x2df>
    13dc:	6e c0       	rjmp	.+220    	; 0x14ba <__stack+0x3bb>
      switch (mode) {
    13de:	80 91 29 02 	lds	r24, 0x0229
    13e2:	83 30       	cpi	r24, 0x03	; 3
    13e4:	a9 f0       	breq	.+42     	; 0x1410 <__stack+0x311>
    13e6:	18 f4       	brcc	.+6      	; 0x13ee <__stack+0x2ef>
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <__stack+0x2f9>
    13ec:	45 c0       	rjmp	.+138    	; 0x1478 <__stack+0x379>
    13ee:	85 30       	cpi	r24, 0x05	; 5
    13f0:	d9 f0       	breq	.+54     	; 0x1428 <__stack+0x329>
    13f2:	86 30       	cpi	r24, 0x06	; 6
    13f4:	29 f1       	breq	.+74     	; 0x1440 <__stack+0x341>
    13f6:	40 c0       	rjmp	.+128    	; 0x1478 <__stack+0x379>
      case LSB:
	mode = USB;
    13f8:	83 e0       	ldi	r24, 0x03	; 3
    13fa:	80 93 29 02 	sts	0x0229, r24
	if (!updateSettings()) { 
    13fe:	0e 94 38 05 	call	0xa70	; 0xa70 <updateSettings>
    1402:	81 11       	cpse	r24, r1
    1404:	4a c0       	rjmp	.+148    	; 0x149a <__stack+0x39b>
	  lcd_goto(0x00);
    1406:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	  sprintf(buffer,"USB ");
    140a:	6a e8       	ldi	r22, 0x8A	; 138
    140c:	71 e0       	ldi	r23, 0x01	; 1
    140e:	3f c0       	rjmp	.+126    	; 0x148e <__stack+0x38f>
	  lcd_puts(buffer);
	}
	break;
      case USB:
	mode = CW;
    1410:	85 e0       	ldi	r24, 0x05	; 5
    1412:	80 93 29 02 	sts	0x0229, r24
	if(!updateSettings()) {
    1416:	0e 94 38 05 	call	0xa70	; 0xa70 <updateSettings>
    141a:	81 11       	cpse	r24, r1
    141c:	3e c0       	rjmp	.+124    	; 0x149a <__stack+0x39b>
	  lcd_goto(0x00);
    141e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	  sprintf(buffer,"CW  ");
    1422:	6f e8       	ldi	r22, 0x8F	; 143
    1424:	71 e0       	ldi	r23, 0x01	; 1
    1426:	33 c0       	rjmp	.+102    	; 0x148e <__stack+0x38f>
	  lcd_puts(buffer);
	}
	break;
      case CW:
	mode = CWN;
    1428:	86 e0       	ldi	r24, 0x06	; 6
    142a:	80 93 29 02 	sts	0x0229, r24
	if(!updateSettings()) {
    142e:	0e 94 38 05 	call	0xa70	; 0xa70 <updateSettings>
    1432:	81 11       	cpse	r24, r1
    1434:	32 c0       	rjmp	.+100    	; 0x149a <__stack+0x39b>
	  lcd_goto(0x00);
    1436:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	  sprintf(buffer,"CWN ");
    143a:	64 e9       	ldi	r22, 0x94	; 148
    143c:	71 e0       	ldi	r23, 0x01	; 1
    143e:	27 c0       	rjmp	.+78     	; 0x148e <__stack+0x38f>
	  lcd_puts(buffer);
	}
	break;
      case CWN:
	if (band < 200) {
    1440:	80 91 21 02 	lds	r24, 0x0221
    1444:	88 3c       	cpi	r24, 0xC8	; 200
    1446:	60 f4       	brcc	.+24     	; 0x1460 <__stack+0x361>
	  mode = AM;
    1448:	88 e0       	ldi	r24, 0x08	; 8
    144a:	80 93 29 02 	sts	0x0229, r24
	  if(!updateSettings()) {
    144e:	0e 94 38 05 	call	0xa70	; 0xa70 <updateSettings>
    1452:	81 11       	cpse	r24, r1
    1454:	22 c0       	rjmp	.+68     	; 0x149a <__stack+0x39b>
	    lcd_goto(0x00);
    1456:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	    sprintf(buffer,"AM  ");
    145a:	69 e9       	ldi	r22, 0x99	; 153
    145c:	71 e0       	ldi	r23, 0x01	; 1
    145e:	17 c0       	rjmp	.+46     	; 0x148e <__stack+0x38f>
	    lcd_puts(buffer);
	  }
	}
	else {
	  mode = FM;
    1460:	8a e0       	ldi	r24, 0x0A	; 10
    1462:	80 93 29 02 	sts	0x0229, r24
	  if(!updateSettings()) {
    1466:	0e 94 38 05 	call	0xa70	; 0xa70 <updateSettings>
    146a:	81 11       	cpse	r24, r1
    146c:	16 c0       	rjmp	.+44     	; 0x149a <__stack+0x39b>
	    lcd_goto(0x00);
    146e:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	    sprintf(buffer,"FM  ");
    1472:	6e e9       	ldi	r22, 0x9E	; 158
    1474:	71 e0       	ldi	r23, 0x01	; 1
    1476:	0b c0       	rjmp	.+22     	; 0x148e <__stack+0x38f>
	}	  
	break;
      case AM:
      case FM:
      default:
	mode = LSB;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	80 93 29 02 	sts	0x0229, r24
	if(!updateSettings()) { 
    147e:	0e 94 38 05 	call	0xa70	; 0xa70 <updateSettings>
    1482:	81 11       	cpse	r24, r1
    1484:	0a c0       	rjmp	.+20     	; 0x149a <__stack+0x39b>
	  lcd_goto(0x00);
    1486:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	  sprintf(buffer,"LSB ");
    148a:	63 ea       	ldi	r22, 0xA3	; 163
    148c:	71 e0       	ldi	r23, 0x01	; 1
    148e:	c6 01       	movw	r24, r12
    1490:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <strcpy>
	  lcd_puts(buffer);
    1494:	c6 01       	movw	r24, r12
    1496:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    149a:	83 e2       	ldi	r24, 0x23	; 35
    149c:	94 ef       	ldi	r25, 0xF4	; 244
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <__stack+0x39f>
    14a2:	00 c0       	rjmp	.+0      	; 0x14a4 <__stack+0x3a5>
    14a4:	00 00       	nop
	}
	break;
      }
      _delay_ms(250);
      err = updateFreq(freq,clar,1);  // To shift +/-
    14a6:	21 e0       	ldi	r18, 0x01	; 1
    14a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    14aa:	61 2f       	mov	r22, r17
    14ac:	70 2f       	mov	r23, r16
    14ae:	8f 2d       	mov	r24, r15
    14b0:	9e 2d       	mov	r25, r14
    14b2:	0e 94 4d 04 	call	0x89a	; 0x89a <updateFreq>
      mode_flag = 0x00;
    14b6:	10 92 24 02 	sts	0x0224, r1
    }

    if (band_flag) {
    14ba:	80 91 26 02 	lds	r24, 0x0226
    14be:	88 23       	and	r24, r24
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <__stack+0x3c5>
    14c2:	45 c1       	rjmp	.+650    	; 0x174e <__stack+0x64f>
      if (band_flag == 0x02) { // long press
    14c4:	80 91 26 02 	lds	r24, 0x0226
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	09 f4       	brne	.+2      	; 0x14ce <__stack+0x3cf>
    14cc:	a2 c0       	rjmp	.+324    	; 0x1612 <__stack+0x513>
	}
#endif
      }
      else {
#ifdef HF_HAM
	if (freq<3500)
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 ec       	ldi	r19, 0xC0	; 192
    14d2:	4a e5       	ldi	r20, 0x5A	; 90
    14d4:	55 e4       	ldi	r21, 0x45	; 69
    14d6:	61 2f       	mov	r22, r17
    14d8:	70 2f       	mov	r23, r16
    14da:	8f 2d       	mov	r24, r15
    14dc:	9e 2d       	mov	r25, r14
    14de:	0e 94 57 11 	call	0x22ae	; 0x22ae <__cmpsf2>
    14e2:	87 fd       	sbrc	r24, 7
    14e4:	67 c0       	rjmp	.+206    	; 0x15b4 <__stack+0x4b5>
	  freq = 3510;
	else if(freq<7000)
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 ec       	ldi	r19, 0xC0	; 192
    14ea:	4a ed       	ldi	r20, 0xDA	; 218
    14ec:	55 e4       	ldi	r21, 0x45	; 69
    14ee:	61 2f       	mov	r22, r17
    14f0:	70 2f       	mov	r23, r16
    14f2:	8f 2d       	mov	r24, r15
    14f4:	9e 2d       	mov	r25, r14
    14f6:	0e 94 57 11 	call	0x22ae	; 0x22ae <__cmpsf2>
    14fa:	87 fd       	sbrc	r24, 7
    14fc:	60 c0       	rjmp	.+192    	; 0x15be <__stack+0x4bf>
	  freq = 7010;
	else if(freq<10100)
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 ed       	ldi	r19, 0xD0	; 208
    1502:	4d e1       	ldi	r20, 0x1D	; 29
    1504:	56 e4       	ldi	r21, 0x46	; 70
    1506:	61 2f       	mov	r22, r17
    1508:	70 2f       	mov	r23, r16
    150a:	8f 2d       	mov	r24, r15
    150c:	9e 2d       	mov	r25, r14
    150e:	0e 94 57 11 	call	0x22ae	; 0x22ae <__cmpsf2>
    1512:	87 fd       	sbrc	r24, 7
    1514:	5b c0       	rjmp	.+182    	; 0x15cc <__stack+0x4cd>
	  freq = 10110;
	else if(freq<14000)
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 ec       	ldi	r19, 0xC0	; 192
    151a:	4a e5       	ldi	r20, 0x5A	; 90
    151c:	56 e4       	ldi	r21, 0x46	; 70
    151e:	61 2f       	mov	r22, r17
    1520:	70 2f       	mov	r23, r16
    1522:	8f 2d       	mov	r24, r15
    1524:	9e 2d       	mov	r25, r14
    1526:	0e 94 57 11 	call	0x22ae	; 0x22ae <__cmpsf2>
    152a:	87 fd       	sbrc	r24, 7
    152c:	54 c0       	rjmp	.+168    	; 0x15d6 <__stack+0x4d7>
	  freq = 14010;
	else if(freq<18068)
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	38 e2       	ldi	r19, 0x28	; 40
    1532:	4d e8       	ldi	r20, 0x8D	; 141
    1534:	56 e4       	ldi	r21, 0x46	; 70
    1536:	61 2f       	mov	r22, r17
    1538:	70 2f       	mov	r23, r16
    153a:	8f 2d       	mov	r24, r15
    153c:	9e 2d       	mov	r25, r14
    153e:	0e 94 57 11 	call	0x22ae	; 0x22ae <__cmpsf2>
    1542:	87 fd       	sbrc	r24, 7
    1544:	4d c0       	rjmp	.+154    	; 0x15e0 <__stack+0x4e1>
	  freq = 18078;
	else if(freq<21000)
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e1       	ldi	r19, 0x10	; 16
    154a:	44 ea       	ldi	r20, 0xA4	; 164
    154c:	56 e4       	ldi	r21, 0x46	; 70
    154e:	61 2f       	mov	r22, r17
    1550:	70 2f       	mov	r23, r16
    1552:	8f 2d       	mov	r24, r15
    1554:	9e 2d       	mov	r25, r14
    1556:	0e 94 57 11 	call	0x22ae	; 0x22ae <__cmpsf2>
    155a:	87 fd       	sbrc	r24, 7
    155c:	46 c0       	rjmp	.+140    	; 0x15ea <__stack+0x4eb>
	  freq = 21010;
	else if(freq<24890)
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	34 e7       	ldi	r19, 0x74	; 116
    1562:	42 ec       	ldi	r20, 0xC2	; 194
    1564:	56 e4       	ldi	r21, 0x46	; 70
    1566:	61 2f       	mov	r22, r17
    1568:	70 2f       	mov	r23, r16
    156a:	8f 2d       	mov	r24, r15
    156c:	9e 2d       	mov	r25, r14
    156e:	0e 94 57 11 	call	0x22ae	; 0x22ae <__cmpsf2>
    1572:	87 fd       	sbrc	r24, 7
    1574:	3f c0       	rjmp	.+126    	; 0x15f4 <__stack+0x4f5>
	  freq = 24900;
	else if(freq<28000)
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 ec       	ldi	r19, 0xC0	; 192
    157a:	4a ed       	ldi	r20, 0xDA	; 218
    157c:	56 e4       	ldi	r21, 0x46	; 70
    157e:	61 2f       	mov	r22, r17
    1580:	70 2f       	mov	r23, r16
    1582:	8f 2d       	mov	r24, r15
    1584:	9e 2d       	mov	r25, r14
    1586:	0e 94 57 11 	call	0x22ae	; 0x22ae <__cmpsf2>
    158a:	87 fd       	sbrc	r24, 7
    158c:	38 c0       	rjmp	.+112    	; 0x15fe <__stack+0x4ff>
	  freq = 28010;
	else if(freq<28500)
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	38 ea       	ldi	r19, 0xA8	; 168
    1592:	4e ed       	ldi	r20, 0xDE	; 222
    1594:	56 e4       	ldi	r21, 0x46	; 70
    1596:	61 2f       	mov	r22, r17
    1598:	70 2f       	mov	r23, r16
    159a:	8f 2d       	mov	r24, r15
    159c:	9e 2d       	mov	r25, r14
    159e:	0e 94 57 11 	call	0x22ae	; 0x22ae <__cmpsf2>
	  freq = 28600;
    15a2:	10 e0       	ldi	r17, 0x00	; 0
	  freq = 21010;
	else if(freq<24890)
	  freq = 24900;
	else if(freq<28000)
	  freq = 28010;
	else if(freq<28500)
    15a4:	87 fd       	sbrc	r24, 7
    15a6:	30 c0       	rjmp	.+96     	; 0x1608 <__stack+0x509>
	  freq = 28600;
	else
	  freq = 1810;
    15a8:	00 e4       	ldi	r16, 0x40	; 64
    15aa:	92 ee       	ldi	r25, 0xE2	; 226
    15ac:	f9 2e       	mov	r15, r25
    15ae:	24 e4       	ldi	r18, 0x44	; 68
    15b0:	e2 2e       	mov	r14, r18
    15b2:	2f c0       	rjmp	.+94     	; 0x1612 <__stack+0x513>
#endif
      }
      else {
#ifdef HF_HAM
	if (freq<3500)
	  freq = 3510;
    15b4:	10 e0       	ldi	r17, 0x00	; 0
    15b6:	00 e6       	ldi	r16, 0x60	; 96
    15b8:	8b e5       	ldi	r24, 0x5B	; 91
    15ba:	f8 2e       	mov	r15, r24
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <__stack+0x4c7>
	else if(freq<7000)
	  freq = 7010;
    15be:	10 e0       	ldi	r17, 0x00	; 0
    15c0:	00 e1       	ldi	r16, 0x10	; 16
    15c2:	bb ed       	ldi	r27, 0xDB	; 219
    15c4:	fb 2e       	mov	r15, r27
    15c6:	a5 e4       	ldi	r26, 0x45	; 69
    15c8:	ea 2e       	mov	r14, r26
    15ca:	23 c0       	rjmp	.+70     	; 0x1612 <__stack+0x513>
	else if(freq<10100)
	  freq = 10110;
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	08 ef       	ldi	r16, 0xF8	; 248
    15d0:	fd e1       	ldi	r31, 0x1D	; 29
    15d2:	ff 2e       	mov	r15, r31
    15d4:	1c c0       	rjmp	.+56     	; 0x160e <__stack+0x50f>
	else if(freq<14000)
	  freq = 14010;
    15d6:	10 e0       	ldi	r17, 0x00	; 0
    15d8:	08 ee       	ldi	r16, 0xE8	; 232
    15da:	ea e5       	ldi	r30, 0x5A	; 90
    15dc:	fe 2e       	mov	r15, r30
    15de:	17 c0       	rjmp	.+46     	; 0x160e <__stack+0x50f>
	else if(freq<18068)
	  freq = 18078;
    15e0:	10 e0       	ldi	r17, 0x00	; 0
    15e2:	0c e3       	ldi	r16, 0x3C	; 60
    15e4:	7d e8       	ldi	r23, 0x8D	; 141
    15e6:	f7 2e       	mov	r15, r23
    15e8:	12 c0       	rjmp	.+36     	; 0x160e <__stack+0x50f>
	else if(freq<21000)
	  freq = 21010;
    15ea:	10 e0       	ldi	r17, 0x00	; 0
    15ec:	04 e2       	ldi	r16, 0x24	; 36
    15ee:	64 ea       	ldi	r22, 0xA4	; 164
    15f0:	f6 2e       	mov	r15, r22
    15f2:	0d c0       	rjmp	.+26     	; 0x160e <__stack+0x50f>
	else if(freq<24890)
	  freq = 24900;
    15f4:	10 e0       	ldi	r17, 0x00	; 0
    15f6:	08 e8       	ldi	r16, 0x88	; 136
    15f8:	52 ec       	ldi	r21, 0xC2	; 194
    15fa:	f5 2e       	mov	r15, r21
    15fc:	08 c0       	rjmp	.+16     	; 0x160e <__stack+0x50f>
	else if(freq<28000)
	  freq = 28010;
    15fe:	10 e0       	ldi	r17, 0x00	; 0
    1600:	04 ed       	ldi	r16, 0xD4	; 212
    1602:	4a ed       	ldi	r20, 0xDA	; 218
    1604:	f4 2e       	mov	r15, r20
    1606:	03 c0       	rjmp	.+6      	; 0x160e <__stack+0x50f>
	else if(freq<28500)
	  freq = 28600;
    1608:	00 e7       	ldi	r16, 0x70	; 112
    160a:	3f ed       	ldi	r19, 0xDF	; 223
    160c:	f3 2e       	mov	r15, r19
    160e:	26 e4       	ldi	r18, 0x46	; 70
    1610:	e2 2e       	mov	r14, r18
      else if(freq<150000)
	freq = 144200;
#endif
      }

      lcd_freq();
    1612:	84 e0       	ldi	r24, 0x04	; 4
    1614:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	4a e7       	ldi	r20, 0x7A	; 122
    161e:	54 e4       	ldi	r21, 0x44	; 68
    1620:	61 2f       	mov	r22, r17
    1622:	70 2f       	mov	r23, r16
    1624:	8f 2d       	mov	r24, r15
    1626:	9e 2d       	mov	r25, r14
    1628:	0e 94 26 12 	call	0x244c	; 0x244c <fmod>
    162c:	96 2e       	mov	r9, r22
    162e:	87 2e       	mov	r8, r23
    1630:	24 96       	adiw	r28, 0x04	; 4
    1632:	8f af       	std	Y+63, r24	; 0x3f
    1634:	24 97       	sbiw	r28, 0x04	; 4
    1636:	25 96       	adiw	r28, 0x05	; 5
    1638:	9f af       	std	Y+63, r25	; 0x3f
    163a:	25 97       	sbiw	r28, 0x05	; 5
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	4a e7       	ldi	r20, 0x7A	; 122
    1642:	54 e4       	ldi	r21, 0x44	; 68
    1644:	61 2f       	mov	r22, r17
    1646:	70 2f       	mov	r23, r16
    1648:	8f 2d       	mov	r24, r15
    164a:	9e 2d       	mov	r25, r14
    164c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divsf3>
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	a9 01       	movw	r20, r18
    1656:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__addsf3>
    165a:	0e 94 04 12 	call	0x2408	; 0x2408 <floor>
    165e:	25 96       	adiw	r28, 0x05	; 5
    1660:	af ad       	ldd	r26, Y+63	; 0x3f
    1662:	25 97       	sbiw	r28, 0x05	; 5
    1664:	af 93       	push	r26
    1666:	24 96       	adiw	r28, 0x04	; 4
    1668:	bf ad       	ldd	r27, Y+63	; 0x3f
    166a:	24 97       	sbiw	r28, 0x04	; 4
    166c:	bf 93       	push	r27
    166e:	8f 92       	push	r8
    1670:	9f 92       	push	r9
    1672:	0e 94 ce 11 	call	0x239c	; 0x239c <__fixsfsi>
    1676:	7f 93       	push	r23
    1678:	6f 93       	push	r22
    167a:	82 e1       	ldi	r24, 0x12	; 18
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	9f 93       	push	r25
    1680:	8f 93       	push	r24
    1682:	df 92       	push	r13
    1684:	cf 92       	push	r12
    1686:	0e 94 c6 14 	call	0x298c	; 0x298c <sprintf>
    168a:	c6 01       	movw	r24, r12
    168c:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    1690:	8f e0       	ldi	r24, 0x0F	; 15
    1692:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61
    16a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    16a2:	9b 30       	cpi	r25, 0x0B	; 11
    16a4:	1c f0       	brlt	.+6      	; 0x16ac <__stack+0x5ad>
    16a6:	61 e2       	ldi	r22, 0x21	; 33
    16a8:	71 e0       	ldi	r23, 0x01	; 1
    16aa:	08 c0       	rjmp	.+16     	; 0x16bc <__stack+0x5bd>
    16ac:	ae ad       	ldd	r26, Y+62	; 0x3e
    16ae:	a6 3f       	cpi	r26, 0xF6	; 246
    16b0:	1c f4       	brge	.+6      	; 0x16b8 <__stack+0x5b9>
    16b2:	63 e2       	ldi	r22, 0x23	; 35
    16b4:	71 e0       	ldi	r23, 0x01	; 1
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <__stack+0x5bd>
    16b8:	6c e3       	ldi	r22, 0x3C	; 60
    16ba:	71 e0       	ldi	r23, 0x01	; 1
    16bc:	c6 01       	movw	r24, r12
    16be:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <strcpy>
    16c2:	c6 01       	movw	r24, r12
    16c4:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
      err = updateFreq(freq,clar,1);
    16c8:	21 e0       	ldi	r18, 0x01	; 1
    16ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    16cc:	61 2f       	mov	r22, r17
    16ce:	70 2f       	mov	r23, r16
    16d0:	8f 2d       	mov	r24, r15
    16d2:	9e 2d       	mov	r25, r14
    16d4:	0e 94 4d 04 	call	0x89a	; 0x89a <updateFreq>
      if (err) {
    16d8:	88 23       	and	r24, r24
    16da:	b1 f0       	breq	.+44     	; 0x1708 <__stack+0x609>
	sprintf(buffer,"Err freq %x         ",err);
    16dc:	1f 92       	push	r1
    16de:	8f 93       	push	r24
    16e0:	88 ea       	ldi	r24, 0xA8	; 168
    16e2:	91 e0       	ldi	r25, 0x01	; 1
    16e4:	9f 93       	push	r25
    16e6:	8f 93       	push	r24
    16e8:	df 92       	push	r13
    16ea:	cf 92       	push	r12
    16ec:	0e 94 c6 14 	call	0x298c	; 0x298c <sprintf>
	lcd_goto(0x40);
    16f0:	80 e4       	ldi	r24, 0x40	; 64
    16f2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	lcd_puts(buffer);	
    16f6:	c6 01       	movw	r24, r12
    16f8:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
      }      
      err = updateSettings();
    1708:	0e 94 38 05 	call	0xa70	; 0xa70 <updateSettings>
      if (err) {
    170c:	88 23       	and	r24, r24
    170e:	b1 f0       	breq	.+44     	; 0x173c <__stack+0x63d>
	sprintf(buffer,"Err sett %x         ",err);
    1710:	1f 92       	push	r1
    1712:	8f 93       	push	r24
    1714:	8d eb       	ldi	r24, 0xBD	; 189
    1716:	91 e0       	ldi	r25, 0x01	; 1
    1718:	9f 93       	push	r25
    171a:	8f 93       	push	r24
    171c:	df 92       	push	r13
    171e:	cf 92       	push	r12
    1720:	0e 94 c6 14 	call	0x298c	; 0x298c <sprintf>
	lcd_goto(0x40);
    1724:	80 e4       	ldi	r24, 0x40	; 64
    1726:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	lcd_puts(buffer);	
    172a:	c6 01       	movw	r24, r12
    172c:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	8f e4       	ldi	r24, 0x4F	; 79
    173e:	93 ec       	ldi	r25, 0xC3	; 195
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <__stack+0x641>
    1744:	00 c0       	rjmp	.+0      	; 0x1746 <__stack+0x647>
    1746:	00 00       	nop
      }      
      _delay_ms(200);
      band_flag = 0x00;
    1748:	10 92 26 02 	sts	0x0226, r1
    174c:	30 cc       	rjmp	.-1952   	; 0xfae <main+0x15c>
    }
    else if (rot_flag) {
    174e:	80 91 27 02 	lds	r24, 0x0227
    1752:	88 23       	and	r24, r24
    1754:	09 f4       	brne	.+2      	; 0x1758 <__stack+0x659>
    1756:	12 c1       	rjmp	.+548    	; 0x197c <__stack+0x87d>
      if (rot_flag != last_dir) {
    1758:	80 91 27 02 	lds	r24, 0x0227
    175c:	23 96       	adiw	r28, 0x03	; 3
    175e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1760:	23 97       	sbiw	r28, 0x03	; 3
    1762:	89 17       	cp	r24, r25
    1764:	49 f0       	breq	.+18     	; 0x1778 <__stack+0x679>
	steps = 0;
	step_timer = 0;
    1766:	10 92 2e 02 	sts	0x022E, r1
    176a:	10 92 2d 02 	sts	0x022D, r1
	last_dir = rot_flag;
    176e:	80 91 27 02 	lds	r24, 0x0227
      _delay_ms(200);
      band_flag = 0x00;
    }
    else if (rot_flag) {
      if (rot_flag != last_dir) {
	steps = 0;
    1772:	41 2c       	mov	r4, r1
    1774:	51 2c       	mov	r5, r1
    1776:	fc c0       	rjmp	.+504    	; 0x1970 <__stack+0x871>
	step_timer = 0;
	last_dir = rot_flag;
      }
      else if (rot_flag == 0x01) {
    1778:	90 91 27 02 	lds	r25, 0x0227
    177c:	91 30       	cpi	r25, 0x01	; 1
    177e:	09 f0       	breq	.+2      	; 0x1782 <__stack+0x683>
    1780:	74 c0       	rjmp	.+232    	; 0x186a <__stack+0x76b>
	if (step_timer < 30) {
    1782:	80 91 2d 02 	lds	r24, 0x022D
    1786:	90 91 2e 02 	lds	r25, 0x022E
	  step_timer = 0;
    178a:	10 92 2e 02 	sts	0x022E, r1
    178e:	10 92 2d 02 	sts	0x022D, r1
	steps = 0;
	step_timer = 0;
	last_dir = rot_flag;
      }
      else if (rot_flag == 0x01) {
	if (step_timer < 30) {
    1792:	4e 97       	sbiw	r24, 0x1e	; 30
    1794:	48 f4       	brcc	.+18     	; 0x17a8 <__stack+0x6a9>
	  step_timer = 0;
	  steps ++;
    1796:	af ef       	ldi	r26, 0xFF	; 255
    1798:	4a 1a       	sub	r4, r26
    179a:	5a 0a       	sbc	r5, r26
	else {
	  step_timer = 0;
	  steps = 1;
	}
	
	if (steps > 500) {
    179c:	b5 ef       	ldi	r27, 0xF5	; 245
    179e:	4b 16       	cp	r4, r27
    17a0:	b1 e0       	ldi	r27, 0x01	; 1
    17a2:	5b 06       	cpc	r5, r27
    17a4:	28 f4       	brcc	.+10     	; 0x17b0 <__stack+0x6b1>
    17a6:	16 c0       	rjmp	.+44     	; 0x17d4 <__stack+0x6d5>
	  step_timer = 0;
	  steps ++;
	}
	else {
	  step_timer = 0;
	  steps = 1;
    17a8:	44 24       	eor	r4, r4
    17aa:	43 94       	inc	r4
    17ac:	51 2c       	mov	r5, r1
    17ae:	2d c0       	rjmp	.+90     	; 0x180a <__stack+0x70b>
	}
	
	if (steps > 500) {
	  if (mode == AM)
    17b0:	80 91 29 02 	lds	r24, 0x0229
    17b4:	88 30       	cpi	r24, 0x08	; 8
    17b6:	29 f4       	brne	.+10     	; 0x17c2 <__stack+0x6c3>
	    freq += 20;
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 ea       	ldi	r20, 0xA0	; 160
    17be:	51 e4       	ldi	r21, 0x41	; 65
    17c0:	48 c0       	rjmp	.+144    	; 0x1852 <__stack+0x753>
	  else if (mode == FM)
    17c2:	80 91 29 02 	lds	r24, 0x0229
    17c6:	8a 30       	cpi	r24, 0x0A	; 10
    17c8:	31 f5       	brne	.+76     	; 0x1816 <__stack+0x717>
	    freq += 50;
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	48 e4       	ldi	r20, 0x48	; 72
    17d0:	52 e4       	ldi	r21, 0x42	; 66
    17d2:	3f c0       	rjmp	.+126    	; 0x1852 <__stack+0x753>
	  else
	    freq += 1;
	}
	else if (steps > 150) {
    17d4:	27 e9       	ldi	r18, 0x97	; 151
    17d6:	42 16       	cp	r4, r18
    17d8:	51 04       	cpc	r5, r1
    17da:	b8 f0       	brcs	.+46     	; 0x180a <__stack+0x70b>
	  if (mode == AM)
    17dc:	80 91 29 02 	lds	r24, 0x0229
    17e0:	88 30       	cpi	r24, 0x08	; 8
    17e2:	29 f4       	brne	.+10     	; 0x17ee <__stack+0x6ef>
	    freq += 5;
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 ea       	ldi	r20, 0xA0	; 160
    17ea:	50 e4       	ldi	r21, 0x40	; 64
    17ec:	32 c0       	rjmp	.+100    	; 0x1852 <__stack+0x753>
	  else if (mode == FM)
    17ee:	80 91 29 02 	lds	r24, 0x0229
    17f2:	8a 30       	cpi	r24, 0x0A	; 10
    17f4:	29 f4       	brne	.+10     	; 0x1800 <__stack+0x701>
	    freq += 25;
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	48 ec       	ldi	r20, 0xC8	; 200
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	29 c0       	rjmp	.+82     	; 0x1852 <__stack+0x753>
	  else
	    freq += 0.5;
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	24 c0       	rjmp	.+72     	; 0x1852 <__stack+0x753>
	}
	else {
	  if (mode == AM) {
    180a:	80 91 29 02 	lds	r24, 0x0229
    180e:	88 30       	cpi	r24, 0x08	; 8
    1810:	61 f4       	brne	.+24     	; 0x182a <__stack+0x72b>
	    if (PINE & (1 << ROT_BUTTON)) 
    1812:	0b 9b       	sbis	0x01, 3	; 1
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <__stack+0x721>
		freq += 1;
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	19 c0       	rjmp	.+50     	; 0x1852 <__stack+0x753>
	    else
	      freq += 10;
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	14 c0       	rjmp	.+40     	; 0x1852 <__stack+0x753>
	  }
	  else if (mode == FM)
    182a:	80 91 29 02 	lds	r24, 0x0229
    182e:	8a 30       	cpi	r24, 0x0A	; 10
    1830:	29 f4       	brne	.+10     	; 0x183c <__stack+0x73d>
	    freq += 2.5;
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e2       	ldi	r20, 0x20	; 32
    1838:	50 e4       	ldi	r21, 0x40	; 64
    183a:	0b c0       	rjmp	.+22     	; 0x1852 <__stack+0x753>
	  else {
	    if (PINE & (1 << ROT_BUTTON)) 
    183c:	0b 9b       	sbis	0x01, 3	; 1
    183e:	05 c0       	rjmp	.+10     	; 0x184a <__stack+0x74b>
		freq += 0.05;
    1840:	2d ec       	ldi	r18, 0xCD	; 205
    1842:	3c ec       	ldi	r19, 0xCC	; 204
    1844:	4c e4       	ldi	r20, 0x4C	; 76
    1846:	5d e3       	ldi	r21, 0x3D	; 61
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <__stack+0x753>
	    else
	      freq += 2;
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	50 e4       	ldi	r21, 0x40	; 64
    1852:	61 2f       	mov	r22, r17
    1854:	70 2f       	mov	r23, r16
    1856:	8f 2d       	mov	r24, r15
    1858:	9e 2d       	mov	r25, r14
    185a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__addsf3>
    185e:	16 2f       	mov	r17, r22
    1860:	07 2f       	mov	r16, r23
    1862:	f8 2e       	mov	r15, r24
    1864:	e9 2e       	mov	r14, r25
	  }
	}
	last_dir = 0x01;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	83 c0       	rjmp	.+262    	; 0x1970 <__stack+0x871>
      }
      else if (rot_flag == 0x02) {
    186a:	90 91 27 02 	lds	r25, 0x0227
    186e:	92 30       	cpi	r25, 0x02	; 2
    1870:	09 f0       	breq	.+2      	; 0x1874 <__stack+0x775>
    1872:	7e c0       	rjmp	.+252    	; 0x1970 <__stack+0x871>
	if ((step_timer < 30) && (last_dir == rot_flag)) {
    1874:	80 91 2d 02 	lds	r24, 0x022D
    1878:	90 91 2e 02 	lds	r25, 0x022E
    187c:	4e 97       	sbiw	r24, 0x1e	; 30
    187e:	a0 f4       	brcc	.+40     	; 0x18a8 <__stack+0x7a9>
    1880:	80 91 27 02 	lds	r24, 0x0227
    1884:	23 96       	adiw	r28, 0x03	; 3
    1886:	9f ad       	ldd	r25, Y+63	; 0x3f
    1888:	23 97       	sbiw	r28, 0x03	; 3
    188a:	98 13       	cpse	r25, r24
    188c:	0d c0       	rjmp	.+26     	; 0x18a8 <__stack+0x7a9>
	  step_timer = 0;
    188e:	10 92 2e 02 	sts	0x022E, r1
    1892:	10 92 2d 02 	sts	0x022D, r1
	  steps ++;
    1896:	af ef       	ldi	r26, 0xFF	; 255
    1898:	4a 1a       	sub	r4, r26
    189a:	5a 0a       	sbc	r5, r26
	else {
	  step_timer = 0;
	  steps = 1;
	}
	
	if (steps > 500) {
    189c:	b5 ef       	ldi	r27, 0xF5	; 245
    189e:	4b 16       	cp	r4, r27
    18a0:	b1 e0       	ldi	r27, 0x01	; 1
    18a2:	5b 06       	cpc	r5, r27
    18a4:	48 f4       	brcc	.+18     	; 0x18b8 <__stack+0x7b9>
    18a6:	1a c0       	rjmp	.+52     	; 0x18dc <__stack+0x7dd>
	if ((step_timer < 30) && (last_dir == rot_flag)) {
	  step_timer = 0;
	  steps ++;
	}
	else {
	  step_timer = 0;
    18a8:	10 92 2e 02 	sts	0x022E, r1
    18ac:	10 92 2d 02 	sts	0x022D, r1
	  steps = 1;
    18b0:	44 24       	eor	r4, r4
    18b2:	43 94       	inc	r4
    18b4:	51 2c       	mov	r5, r1
    18b6:	2d c0       	rjmp	.+90     	; 0x1912 <__stack+0x813>
	}
	
	if (steps > 500) {
	  if (mode == AM)
    18b8:	80 91 29 02 	lds	r24, 0x0229
    18bc:	88 30       	cpi	r24, 0x08	; 8
    18be:	29 f4       	brne	.+10     	; 0x18ca <__stack+0x7cb>
	    freq -= 20;
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 ea       	ldi	r20, 0xA0	; 160
    18c6:	51 e4       	ldi	r21, 0x41	; 65
    18c8:	48 c0       	rjmp	.+144    	; 0x195a <__stack+0x85b>
	  else if (mode == FM)
    18ca:	80 91 29 02 	lds	r24, 0x0229
    18ce:	8a 30       	cpi	r24, 0x0A	; 10
    18d0:	31 f5       	brne	.+76     	; 0x191e <__stack+0x81f>
	    freq -= 50;
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	48 e4       	ldi	r20, 0x48	; 72
    18d8:	52 e4       	ldi	r21, 0x42	; 66
    18da:	3f c0       	rjmp	.+126    	; 0x195a <__stack+0x85b>
	  else
	    freq -= 1;
	}
	else if (steps > 150) {
    18dc:	27 e9       	ldi	r18, 0x97	; 151
    18de:	42 16       	cp	r4, r18
    18e0:	51 04       	cpc	r5, r1
    18e2:	b8 f0       	brcs	.+46     	; 0x1912 <__stack+0x813>
	  if (mode == AM)
    18e4:	80 91 29 02 	lds	r24, 0x0229
    18e8:	88 30       	cpi	r24, 0x08	; 8
    18ea:	29 f4       	brne	.+10     	; 0x18f6 <__stack+0x7f7>
	    freq -= 5;
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 ea       	ldi	r20, 0xA0	; 160
    18f2:	50 e4       	ldi	r21, 0x40	; 64
    18f4:	32 c0       	rjmp	.+100    	; 0x195a <__stack+0x85b>
	  else if (mode == FM)
    18f6:	80 91 29 02 	lds	r24, 0x0229
    18fa:	8a 30       	cpi	r24, 0x0A	; 10
    18fc:	29 f4       	brne	.+10     	; 0x1908 <__stack+0x809>
	    freq -= 25;
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	48 ec       	ldi	r20, 0xC8	; 200
    1904:	51 e4       	ldi	r21, 0x41	; 65
    1906:	29 c0       	rjmp	.+82     	; 0x195a <__stack+0x85b>
	  else
	    freq -= 0.5;
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e0       	ldi	r20, 0x00	; 0
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	24 c0       	rjmp	.+72     	; 0x195a <__stack+0x85b>
	}
	else {
	  if (mode == AM) {
    1912:	80 91 29 02 	lds	r24, 0x0229
    1916:	88 30       	cpi	r24, 0x08	; 8
    1918:	61 f4       	brne	.+24     	; 0x1932 <__stack+0x833>
	    if (PINE & (1 << ROT_BUTTON)) 
    191a:	0b 9b       	sbis	0x01, 3	; 1
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <__stack+0x829>
		freq -= 1;
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	19 c0       	rjmp	.+50     	; 0x195a <__stack+0x85b>
	    else
	      freq -= 10;
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	14 c0       	rjmp	.+40     	; 0x195a <__stack+0x85b>
	  }
	  else if (mode == FM)
    1932:	80 91 29 02 	lds	r24, 0x0229
    1936:	8a 30       	cpi	r24, 0x0A	; 10
    1938:	29 f4       	brne	.+10     	; 0x1944 <__stack+0x845>
	    freq -= 2.5;
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e2       	ldi	r20, 0x20	; 32
    1940:	50 e4       	ldi	r21, 0x40	; 64
    1942:	0b c0       	rjmp	.+22     	; 0x195a <__stack+0x85b>
	  else {
	    if (PINE & (1 << ROT_BUTTON)) 
    1944:	0b 9b       	sbis	0x01, 3	; 1
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <__stack+0x853>
		freq -= 0.05;
    1948:	2d ec       	ldi	r18, 0xCD	; 205
    194a:	3c ec       	ldi	r19, 0xCC	; 204
    194c:	4c e4       	ldi	r20, 0x4C	; 76
    194e:	5d e3       	ldi	r21, 0x3D	; 61
    1950:	04 c0       	rjmp	.+8      	; 0x195a <__stack+0x85b>
	    else
	      freq -= 2;
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	50 e4       	ldi	r21, 0x40	; 64
    195a:	61 2f       	mov	r22, r17
    195c:	70 2f       	mov	r23, r16
    195e:	8f 2d       	mov	r24, r15
    1960:	9e 2d       	mov	r25, r14
    1962:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__subsf3>
    1966:	16 2f       	mov	r17, r22
    1968:	07 2f       	mov	r16, r23
    196a:	f8 2e       	mov	r15, r24
    196c:	e9 2e       	mov	r14, r25
	  }
	}
      last_dir = 0x02;
    196e:	82 e0       	ldi	r24, 0x02	; 2
      }
      //_delay_ms(30);

      rot_flag = 0x00;
    1970:	10 92 27 02 	sts	0x0227, r1
    1974:	23 96       	adiw	r28, 0x03	; 3
    1976:	8f af       	std	Y+63, r24	; 0x3f
    1978:	23 97       	sbiw	r28, 0x03	; 3
    197a:	19 cb       	rjmp	.-2510   	; 0xfae <main+0x15c>
    }
    else if (vol_flag) {
    197c:	80 91 28 02 	lds	r24, 0x0228
    1980:	88 23       	and	r24, r24
    1982:	09 f4       	brne	.+2      	; 0x1986 <__stack+0x887>
    1984:	14 cb       	rjmp	.-2520   	; 0xfae <main+0x15c>
      if (vol_timer > 1) {
    1986:	80 91 00 01 	lds	r24, 0x0100
    198a:	82 30       	cpi	r24, 0x02	; 2
    198c:	08 f4       	brcc	.+2      	; 0x1990 <__stack+0x891>
    198e:	7a c0       	rjmp	.+244    	; 0x1a84 <__stack+0x985>
	if (PINF & (1 << SQUELCH_BUTTON)) {
    1990:	04 9b       	sbis	0x00, 4	; 0
    1992:	35 c0       	rjmp	.+106    	; 0x19fe <__stack+0x8ff>
	    if (vol_flag == 0x01) {
    1994:	80 91 28 02 	lds	r24, 0x0228
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	29 f4       	brne	.+10     	; 0x19a6 <__stack+0x8a7>
	      if(vol<31)
    199c:	8e e1       	ldi	r24, 0x1E	; 30
    199e:	86 15       	cp	r24, r6
    19a0:	40 f0       	brcs	.+16     	; 0x19b2 <__stack+0x8b3>
		vol ++; // Higher means lower 
    19a2:	63 94       	inc	r6
    19a4:	06 c0       	rjmp	.+12     	; 0x19b2 <__stack+0x8b3>
	      sprintf(buffer,"Vol %d    ", 31-vol);
	      lcd_goto(0x40);
	      lcd_puts(buffer);
	    }
	    else if (vol_flag == 0x02) {
    19a6:	80 91 28 02 	lds	r24, 0x0228
    19aa:	82 30       	cpi	r24, 0x02	; 2
    19ac:	e1 f4       	brne	.+56     	; 0x19e6 <__stack+0x8e7>
	      if(vol>0)
    19ae:	61 10       	cpse	r6, r1
		vol --;
    19b0:	6a 94       	dec	r6
	      sprintf(buffer,"Vol %d    ", 31-vol);
    19b2:	8f e1       	ldi	r24, 0x1F	; 31
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	86 19       	sub	r24, r6
    19b8:	91 09       	sbc	r25, r1
    19ba:	9f 93       	push	r25
    19bc:	8f 93       	push	r24
    19be:	82 ed       	ldi	r24, 0xD2	; 210
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	9f 93       	push	r25
    19c4:	8f 93       	push	r24
    19c6:	df 92       	push	r13
    19c8:	cf 92       	push	r12
    19ca:	0e 94 c6 14 	call	0x298c	; 0x298c <sprintf>
	      lcd_goto(0x40);
    19ce:	80 e4       	ldi	r24, 0x40	; 64
    19d0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	      lcd_puts(buffer);
    19d4:	c6 01       	movw	r24, r12
    19d6:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
	    }
	    
	    err = updateVolumeSquelch(vol, squelch);
    19e6:	67 2d       	mov	r22, r7
    19e8:	86 2d       	mov	r24, r6
    19ea:	0e 94 0c 04 	call	0x818	; 0x818 <updateVolumeSquelch>
	    
	    if (err) {
    19ee:	88 23       	and	r24, r24
    19f0:	09 f4       	brne	.+2      	; 0x19f4 <__stack+0x8f5>
    19f2:	46 c0       	rjmp	.+140    	; 0x1a80 <__stack+0x981>
	      sprintf(buffer,"Err Vol %x         ",err);
    19f4:	1f 92       	push	r1
    19f6:	8f 93       	push	r24
    19f8:	8d ed       	ldi	r24, 0xDD	; 221
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	2f c0       	rjmp	.+94     	; 0x1a5c <__stack+0x95d>
	      lcd_goto(0x40);
	      lcd_puts(buffer);	
	    }      
	  }
	  else {
	    if (vol_flag == 0x02) {
    19fe:	80 91 28 02 	lds	r24, 0x0228
    1a02:	82 30       	cpi	r24, 0x02	; 2
    1a04:	29 f4       	brne	.+10     	; 0x1a10 <__stack+0x911>
	      if(squelch<31)
    1a06:	9e e1       	ldi	r25, 0x1E	; 30
    1a08:	97 15       	cp	r25, r7
    1a0a:	40 f0       	brcs	.+16     	; 0x1a1c <__stack+0x91d>
		squelch ++; 
    1a0c:	73 94       	inc	r7
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <__stack+0x91d>
	      sprintf(buffer,"Sq %d    ", squelch);
	      lcd_goto(0x40);
	      lcd_puts(buffer);
	    }
	    else if (vol_flag == 0x01) {
    1a10:	80 91 28 02 	lds	r24, 0x0228
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	c1 f4       	brne	.+48     	; 0x1a48 <__stack+0x949>
	      if(squelch>0)
    1a18:	71 10       	cpse	r7, r1
		squelch --;
    1a1a:	7a 94       	dec	r7
	      sprintf(buffer,"Sq %d    ", squelch);
    1a1c:	1f 92       	push	r1
    1a1e:	7f 92       	push	r7
    1a20:	81 ef       	ldi	r24, 0xF1	; 241
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	9f 93       	push	r25
    1a26:	8f 93       	push	r24
    1a28:	df 92       	push	r13
    1a2a:	cf 92       	push	r12
    1a2c:	0e 94 c6 14 	call	0x298c	; 0x298c <sprintf>
	      lcd_goto(0x40);
    1a30:	80 e4       	ldi	r24, 0x40	; 64
    1a32:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	      lcd_puts(buffer);
    1a36:	c6 01       	movw	r24, r12
    1a38:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
	    }
	    
	    err = updateVolumeSquelch(vol, squelch);
    1a48:	67 2d       	mov	r22, r7
    1a4a:	86 2d       	mov	r24, r6
    1a4c:	0e 94 0c 04 	call	0x818	; 0x818 <updateVolumeSquelch>
	    
	    if (err) {
    1a50:	88 23       	and	r24, r24
    1a52:	b1 f0       	breq	.+44     	; 0x1a80 <__stack+0x981>
	      sprintf(buffer,"Err Sq %x         ",err);
    1a54:	1f 92       	push	r1
    1a56:	8f 93       	push	r24
    1a58:	8b ef       	ldi	r24, 0xFB	; 251
    1a5a:	91 e0       	ldi	r25, 0x01	; 1
    1a5c:	9f 93       	push	r25
    1a5e:	8f 93       	push	r24
    1a60:	df 92       	push	r13
    1a62:	cf 92       	push	r12
    1a64:	0e 94 c6 14 	call	0x298c	; 0x298c <sprintf>
	      lcd_goto(0x40);
    1a68:	80 e4       	ldi	r24, 0x40	; 64
    1a6a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <lcd_goto>
	      lcd_puts(buffer);	
    1a6e:	c6 01       	movw	r24, r12
    1a70:	0e 94 b1 06 	call	0xd62	; 0xd62 <lcd_puts>
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
	    }      
	  }
	vol_timer = 0;
    1a80:	10 92 00 01 	sts	0x0100, r1
      }
      vol_flag = 0x00;
    1a84:	10 92 28 02 	sts	0x0228, r1
    1a88:	92 ca       	rjmp	.-2780   	; 0xfae <main+0x15c>

00001a8a <vfprintf>:
    1a8a:	2f 92       	push	r2
    1a8c:	3f 92       	push	r3
    1a8e:	4f 92       	push	r4
    1a90:	5f 92       	push	r5
    1a92:	6f 92       	push	r6
    1a94:	7f 92       	push	r7
    1a96:	8f 92       	push	r8
    1a98:	9f 92       	push	r9
    1a9a:	af 92       	push	r10
    1a9c:	bf 92       	push	r11
    1a9e:	cf 92       	push	r12
    1aa0:	df 92       	push	r13
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	63 97       	sbiw	r28, 0x13	; 19
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	6c 01       	movw	r12, r24
    1ac0:	4b 01       	movw	r8, r22
    1ac2:	2a 01       	movw	r4, r20
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	17 82       	std	Z+7, r1	; 0x07
    1ac8:	16 82       	std	Z+6, r1	; 0x06
    1aca:	83 81       	ldd	r24, Z+3	; 0x03
    1acc:	81 ff       	sbrs	r24, 1
    1ace:	43 c3       	rjmp	.+1670   	; 0x2156 <vfprintf+0x6cc>
    1ad0:	ae 01       	movw	r20, r28
    1ad2:	4f 5f       	subi	r20, 0xFF	; 255
    1ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad6:	3a 01       	movw	r6, r20
    1ad8:	f6 01       	movw	r30, r12
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	f4 01       	movw	r30, r8
    1ade:	93 fd       	sbrc	r25, 3
    1ae0:	85 91       	lpm	r24, Z+
    1ae2:	93 ff       	sbrs	r25, 3
    1ae4:	81 91       	ld	r24, Z+
    1ae6:	4f 01       	movw	r8, r30
    1ae8:	88 23       	and	r24, r24
    1aea:	09 f4       	brne	.+2      	; 0x1aee <vfprintf+0x64>
    1aec:	30 c3       	rjmp	.+1632   	; 0x214e <vfprintf+0x6c4>
    1aee:	85 32       	cpi	r24, 0x25	; 37
    1af0:	39 f4       	brne	.+14     	; 0x1b00 <vfprintf+0x76>
    1af2:	93 fd       	sbrc	r25, 3
    1af4:	85 91       	lpm	r24, Z+
    1af6:	93 ff       	sbrs	r25, 3
    1af8:	81 91       	ld	r24, Z+
    1afa:	4f 01       	movw	r8, r30
    1afc:	85 32       	cpi	r24, 0x25	; 37
    1afe:	39 f4       	brne	.+14     	; 0x1b0e <vfprintf+0x84>
    1b00:	b6 01       	movw	r22, r12
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1b08:	52 01       	movw	r10, r4
    1b0a:	25 01       	movw	r4, r10
    1b0c:	e5 cf       	rjmp	.-54     	; 0x1ad8 <vfprintf+0x4e>
    1b0e:	10 e0       	ldi	r17, 0x00	; 0
    1b10:	f1 2c       	mov	r15, r1
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	20 32       	cpi	r18, 0x20	; 32
    1b16:	a0 f4       	brcc	.+40     	; 0x1b40 <vfprintf+0xb6>
    1b18:	8b 32       	cpi	r24, 0x2B	; 43
    1b1a:	69 f0       	breq	.+26     	; 0x1b36 <vfprintf+0xac>
    1b1c:	30 f4       	brcc	.+12     	; 0x1b2a <vfprintf+0xa0>
    1b1e:	80 32       	cpi	r24, 0x20	; 32
    1b20:	59 f0       	breq	.+22     	; 0x1b38 <vfprintf+0xae>
    1b22:	83 32       	cpi	r24, 0x23	; 35
    1b24:	69 f4       	brne	.+26     	; 0x1b40 <vfprintf+0xb6>
    1b26:	20 61       	ori	r18, 0x10	; 16
    1b28:	2c c0       	rjmp	.+88     	; 0x1b82 <vfprintf+0xf8>
    1b2a:	8d 32       	cpi	r24, 0x2D	; 45
    1b2c:	39 f0       	breq	.+14     	; 0x1b3c <vfprintf+0xb2>
    1b2e:	80 33       	cpi	r24, 0x30	; 48
    1b30:	39 f4       	brne	.+14     	; 0x1b40 <vfprintf+0xb6>
    1b32:	21 60       	ori	r18, 0x01	; 1
    1b34:	26 c0       	rjmp	.+76     	; 0x1b82 <vfprintf+0xf8>
    1b36:	22 60       	ori	r18, 0x02	; 2
    1b38:	24 60       	ori	r18, 0x04	; 4
    1b3a:	23 c0       	rjmp	.+70     	; 0x1b82 <vfprintf+0xf8>
    1b3c:	28 60       	ori	r18, 0x08	; 8
    1b3e:	21 c0       	rjmp	.+66     	; 0x1b82 <vfprintf+0xf8>
    1b40:	27 fd       	sbrc	r18, 7
    1b42:	27 c0       	rjmp	.+78     	; 0x1b92 <vfprintf+0x108>
    1b44:	30 ed       	ldi	r19, 0xD0	; 208
    1b46:	38 0f       	add	r19, r24
    1b48:	3a 30       	cpi	r19, 0x0A	; 10
    1b4a:	78 f4       	brcc	.+30     	; 0x1b6a <vfprintf+0xe0>
    1b4c:	26 ff       	sbrs	r18, 6
    1b4e:	06 c0       	rjmp	.+12     	; 0x1b5c <vfprintf+0xd2>
    1b50:	fa e0       	ldi	r31, 0x0A	; 10
    1b52:	1f 9f       	mul	r17, r31
    1b54:	30 0d       	add	r19, r0
    1b56:	11 24       	eor	r1, r1
    1b58:	13 2f       	mov	r17, r19
    1b5a:	13 c0       	rjmp	.+38     	; 0x1b82 <vfprintf+0xf8>
    1b5c:	4a e0       	ldi	r20, 0x0A	; 10
    1b5e:	f4 9e       	mul	r15, r20
    1b60:	30 0d       	add	r19, r0
    1b62:	11 24       	eor	r1, r1
    1b64:	f3 2e       	mov	r15, r19
    1b66:	20 62       	ori	r18, 0x20	; 32
    1b68:	0c c0       	rjmp	.+24     	; 0x1b82 <vfprintf+0xf8>
    1b6a:	8e 32       	cpi	r24, 0x2E	; 46
    1b6c:	21 f4       	brne	.+8      	; 0x1b76 <vfprintf+0xec>
    1b6e:	26 fd       	sbrc	r18, 6
    1b70:	ee c2       	rjmp	.+1500   	; 0x214e <vfprintf+0x6c4>
    1b72:	20 64       	ori	r18, 0x40	; 64
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <vfprintf+0xf8>
    1b76:	8c 36       	cpi	r24, 0x6C	; 108
    1b78:	11 f4       	brne	.+4      	; 0x1b7e <vfprintf+0xf4>
    1b7a:	20 68       	ori	r18, 0x80	; 128
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <vfprintf+0xf8>
    1b7e:	88 36       	cpi	r24, 0x68	; 104
    1b80:	41 f4       	brne	.+16     	; 0x1b92 <vfprintf+0x108>
    1b82:	f4 01       	movw	r30, r8
    1b84:	93 fd       	sbrc	r25, 3
    1b86:	85 91       	lpm	r24, Z+
    1b88:	93 ff       	sbrs	r25, 3
    1b8a:	81 91       	ld	r24, Z+
    1b8c:	4f 01       	movw	r8, r30
    1b8e:	81 11       	cpse	r24, r1
    1b90:	c1 cf       	rjmp	.-126    	; 0x1b14 <vfprintf+0x8a>
    1b92:	9b eb       	ldi	r25, 0xBB	; 187
    1b94:	98 0f       	add	r25, r24
    1b96:	93 30       	cpi	r25, 0x03	; 3
    1b98:	18 f4       	brcc	.+6      	; 0x1ba0 <vfprintf+0x116>
    1b9a:	20 61       	ori	r18, 0x10	; 16
    1b9c:	80 5e       	subi	r24, 0xE0	; 224
    1b9e:	06 c0       	rjmp	.+12     	; 0x1bac <vfprintf+0x122>
    1ba0:	9b e9       	ldi	r25, 0x9B	; 155
    1ba2:	98 0f       	add	r25, r24
    1ba4:	93 30       	cpi	r25, 0x03	; 3
    1ba6:	08 f0       	brcs	.+2      	; 0x1baa <vfprintf+0x120>
    1ba8:	71 c1       	rjmp	.+738    	; 0x1e8c <vfprintf+0x402>
    1baa:	2f 7e       	andi	r18, 0xEF	; 239
    1bac:	26 ff       	sbrs	r18, 6
    1bae:	16 e0       	ldi	r17, 0x06	; 6
    1bb0:	2f 73       	andi	r18, 0x3F	; 63
    1bb2:	32 2e       	mov	r3, r18
    1bb4:	85 36       	cpi	r24, 0x65	; 101
    1bb6:	19 f4       	brne	.+6      	; 0x1bbe <vfprintf+0x134>
    1bb8:	20 64       	ori	r18, 0x40	; 64
    1bba:	32 2e       	mov	r3, r18
    1bbc:	08 c0       	rjmp	.+16     	; 0x1bce <vfprintf+0x144>
    1bbe:	86 36       	cpi	r24, 0x66	; 102
    1bc0:	21 f4       	brne	.+8      	; 0x1bca <vfprintf+0x140>
    1bc2:	f2 2f       	mov	r31, r18
    1bc4:	f0 68       	ori	r31, 0x80	; 128
    1bc6:	3f 2e       	mov	r3, r31
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <vfprintf+0x144>
    1bca:	11 11       	cpse	r17, r1
    1bcc:	11 50       	subi	r17, 0x01	; 1
    1bce:	37 fe       	sbrs	r3, 7
    1bd0:	07 c0       	rjmp	.+14     	; 0x1be0 <vfprintf+0x156>
    1bd2:	1c 33       	cpi	r17, 0x3C	; 60
    1bd4:	50 f4       	brcc	.+20     	; 0x1bea <vfprintf+0x160>
    1bd6:	ee 24       	eor	r14, r14
    1bd8:	e3 94       	inc	r14
    1bda:	e1 0e       	add	r14, r17
    1bdc:	27 e0       	ldi	r18, 0x07	; 7
    1bde:	0b c0       	rjmp	.+22     	; 0x1bf6 <vfprintf+0x16c>
    1be0:	18 30       	cpi	r17, 0x08	; 8
    1be2:	38 f0       	brcs	.+14     	; 0x1bf2 <vfprintf+0x168>
    1be4:	27 e0       	ldi	r18, 0x07	; 7
    1be6:	17 e0       	ldi	r17, 0x07	; 7
    1be8:	05 c0       	rjmp	.+10     	; 0x1bf4 <vfprintf+0x16a>
    1bea:	27 e0       	ldi	r18, 0x07	; 7
    1bec:	4c e3       	ldi	r20, 0x3C	; 60
    1bee:	e4 2e       	mov	r14, r20
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <vfprintf+0x16c>
    1bf2:	21 2f       	mov	r18, r17
    1bf4:	e1 2c       	mov	r14, r1
    1bf6:	52 01       	movw	r10, r4
    1bf8:	44 e0       	ldi	r20, 0x04	; 4
    1bfa:	a4 0e       	add	r10, r20
    1bfc:	b1 1c       	adc	r11, r1
    1bfe:	f2 01       	movw	r30, r4
    1c00:	60 81       	ld	r22, Z
    1c02:	71 81       	ldd	r23, Z+1	; 0x01
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	0e 2d       	mov	r16, r14
    1c0a:	a3 01       	movw	r20, r6
    1c0c:	0e 94 92 13 	call	0x2724	; 0x2724 <__ftoa_engine>
    1c10:	2c 01       	movw	r4, r24
    1c12:	09 81       	ldd	r16, Y+1	; 0x01
    1c14:	00 ff       	sbrs	r16, 0
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <vfprintf+0x192>
    1c18:	03 ff       	sbrs	r16, 3
    1c1a:	07 c0       	rjmp	.+14     	; 0x1c2a <vfprintf+0x1a0>
    1c1c:	31 fc       	sbrc	r3, 1
    1c1e:	08 c0       	rjmp	.+16     	; 0x1c30 <vfprintf+0x1a6>
    1c20:	32 fe       	sbrs	r3, 2
    1c22:	09 c0       	rjmp	.+18     	; 0x1c36 <vfprintf+0x1ac>
    1c24:	30 e2       	ldi	r19, 0x20	; 32
    1c26:	23 2e       	mov	r2, r19
    1c28:	07 c0       	rjmp	.+14     	; 0x1c38 <vfprintf+0x1ae>
    1c2a:	2d e2       	ldi	r18, 0x2D	; 45
    1c2c:	22 2e       	mov	r2, r18
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <vfprintf+0x1ae>
    1c30:	9b e2       	ldi	r25, 0x2B	; 43
    1c32:	29 2e       	mov	r2, r25
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <vfprintf+0x1ae>
    1c36:	21 2c       	mov	r2, r1
    1c38:	80 2f       	mov	r24, r16
    1c3a:	8c 70       	andi	r24, 0x0C	; 12
    1c3c:	19 f0       	breq	.+6      	; 0x1c44 <vfprintf+0x1ba>
    1c3e:	21 10       	cpse	r2, r1
    1c40:	68 c2       	rjmp	.+1232   	; 0x2112 <vfprintf+0x688>
    1c42:	a8 c2       	rjmp	.+1360   	; 0x2194 <vfprintf+0x70a>
    1c44:	37 fe       	sbrs	r3, 7
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <vfprintf+0x1dc>
    1c48:	e4 0c       	add	r14, r4
    1c4a:	04 ff       	sbrs	r16, 4
    1c4c:	04 c0       	rjmp	.+8      	; 0x1c56 <vfprintf+0x1cc>
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	81 33       	cpi	r24, 0x31	; 49
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <vfprintf+0x1cc>
    1c54:	ea 94       	dec	r14
    1c56:	1e 14       	cp	r1, r14
    1c58:	74 f5       	brge	.+92     	; 0x1cb6 <vfprintf+0x22c>
    1c5a:	f8 e0       	ldi	r31, 0x08	; 8
    1c5c:	fe 15       	cp	r31, r14
    1c5e:	78 f5       	brcc	.+94     	; 0x1cbe <vfprintf+0x234>
    1c60:	88 e0       	ldi	r24, 0x08	; 8
    1c62:	e8 2e       	mov	r14, r24
    1c64:	2c c0       	rjmp	.+88     	; 0x1cbe <vfprintf+0x234>
    1c66:	36 fc       	sbrc	r3, 6
    1c68:	2a c0       	rjmp	.+84     	; 0x1cbe <vfprintf+0x234>
    1c6a:	81 2f       	mov	r24, r17
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	84 15       	cp	r24, r4
    1c70:	95 05       	cpc	r25, r5
    1c72:	9c f0       	brlt	.+38     	; 0x1c9a <vfprintf+0x210>
    1c74:	2c ef       	ldi	r18, 0xFC	; 252
    1c76:	42 16       	cp	r4, r18
    1c78:	2f ef       	ldi	r18, 0xFF	; 255
    1c7a:	52 06       	cpc	r5, r18
    1c7c:	74 f0       	brlt	.+28     	; 0x1c9a <vfprintf+0x210>
    1c7e:	43 2d       	mov	r20, r3
    1c80:	40 68       	ori	r20, 0x80	; 128
    1c82:	34 2e       	mov	r3, r20
    1c84:	0a c0       	rjmp	.+20     	; 0x1c9a <vfprintf+0x210>
    1c86:	e2 e0       	ldi	r30, 0x02	; 2
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	ec 0f       	add	r30, r28
    1c8c:	fd 1f       	adc	r31, r29
    1c8e:	e1 0f       	add	r30, r17
    1c90:	f1 1d       	adc	r31, r1
    1c92:	80 81       	ld	r24, Z
    1c94:	80 33       	cpi	r24, 0x30	; 48
    1c96:	19 f4       	brne	.+6      	; 0x1c9e <vfprintf+0x214>
    1c98:	11 50       	subi	r17, 0x01	; 1
    1c9a:	11 11       	cpse	r17, r1
    1c9c:	f4 cf       	rjmp	.-24     	; 0x1c86 <vfprintf+0x1fc>
    1c9e:	37 fe       	sbrs	r3, 7
    1ca0:	0e c0       	rjmp	.+28     	; 0x1cbe <vfprintf+0x234>
    1ca2:	ee 24       	eor	r14, r14
    1ca4:	e3 94       	inc	r14
    1ca6:	e1 0e       	add	r14, r17
    1ca8:	81 2f       	mov	r24, r17
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	48 16       	cp	r4, r24
    1cae:	59 06       	cpc	r5, r25
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <vfprintf+0x232>
    1cb2:	14 19       	sub	r17, r4
    1cb4:	04 c0       	rjmp	.+8      	; 0x1cbe <vfprintf+0x234>
    1cb6:	ee 24       	eor	r14, r14
    1cb8:	e3 94       	inc	r14
    1cba:	01 c0       	rjmp	.+2      	; 0x1cbe <vfprintf+0x234>
    1cbc:	10 e0       	ldi	r17, 0x00	; 0
    1cbe:	37 fe       	sbrs	r3, 7
    1cc0:	06 c0       	rjmp	.+12     	; 0x1cce <vfprintf+0x244>
    1cc2:	14 14       	cp	r1, r4
    1cc4:	15 04       	cpc	r1, r5
    1cc6:	34 f4       	brge	.+12     	; 0x1cd4 <vfprintf+0x24a>
    1cc8:	c2 01       	movw	r24, r4
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	05 c0       	rjmp	.+10     	; 0x1cd8 <vfprintf+0x24e>
    1cce:	85 e0       	ldi	r24, 0x05	; 5
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <vfprintf+0x24e>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	21 10       	cpse	r2, r1
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	11 23       	and	r17, r17
    1cde:	31 f0       	breq	.+12     	; 0x1cec <vfprintf+0x262>
    1ce0:	21 2f       	mov	r18, r17
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	2f 5f       	subi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	82 0f       	add	r24, r18
    1cea:	93 1f       	adc	r25, r19
    1cec:	2f 2d       	mov	r18, r15
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	82 17       	cp	r24, r18
    1cf2:	93 07       	cpc	r25, r19
    1cf4:	14 f4       	brge	.+4      	; 0x1cfa <vfprintf+0x270>
    1cf6:	f8 1a       	sub	r15, r24
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <vfprintf+0x272>
    1cfa:	f1 2c       	mov	r15, r1
    1cfc:	83 2d       	mov	r24, r3
    1cfe:	89 70       	andi	r24, 0x09	; 9
    1d00:	49 f4       	brne	.+18     	; 0x1d14 <vfprintf+0x28a>
    1d02:	ff 20       	and	r15, r15
    1d04:	39 f0       	breq	.+14     	; 0x1d14 <vfprintf+0x28a>
    1d06:	b6 01       	movw	r22, r12
    1d08:	80 e2       	ldi	r24, 0x20	; 32
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1d10:	fa 94       	dec	r15
    1d12:	f7 cf       	rjmp	.-18     	; 0x1d02 <vfprintf+0x278>
    1d14:	22 20       	and	r2, r2
    1d16:	29 f0       	breq	.+10     	; 0x1d22 <vfprintf+0x298>
    1d18:	b6 01       	movw	r22, r12
    1d1a:	82 2d       	mov	r24, r2
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1d22:	33 fc       	sbrc	r3, 3
    1d24:	09 c0       	rjmp	.+18     	; 0x1d38 <vfprintf+0x2ae>
    1d26:	ff 20       	and	r15, r15
    1d28:	39 f0       	breq	.+14     	; 0x1d38 <vfprintf+0x2ae>
    1d2a:	b6 01       	movw	r22, r12
    1d2c:	80 e3       	ldi	r24, 0x30	; 48
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1d34:	fa 94       	dec	r15
    1d36:	f7 cf       	rjmp	.-18     	; 0x1d26 <vfprintf+0x29c>
    1d38:	37 fe       	sbrs	r3, 7
    1d3a:	5a c0       	rjmp	.+180    	; 0x1df0 <vfprintf+0x366>
    1d3c:	94 2d       	mov	r25, r4
    1d3e:	85 2d       	mov	r24, r5
    1d40:	57 fe       	sbrs	r5, 7
    1d42:	02 c0       	rjmp	.+4      	; 0x1d48 <vfprintf+0x2be>
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	29 2e       	mov	r2, r25
    1d4a:	38 2e       	mov	r3, r24
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	a2 01       	movw	r20, r4
    1d52:	4e 19       	sub	r20, r14
    1d54:	51 09       	sbc	r21, r1
    1d56:	5d 87       	std	Y+13, r21	; 0x0d
    1d58:	4c 87       	std	Y+12, r20	; 0x0c
    1d5a:	a2 01       	movw	r20, r4
    1d5c:	42 19       	sub	r20, r2
    1d5e:	53 09       	sbc	r21, r3
    1d60:	5f 87       	std	Y+15, r21	; 0x0f
    1d62:	4e 87       	std	Y+14, r20	; 0x0e
    1d64:	61 2f       	mov	r22, r17
    1d66:	70 e0       	ldi	r23, 0x00	; 0
    1d68:	44 27       	eor	r20, r20
    1d6a:	55 27       	eor	r21, r21
    1d6c:	46 1b       	sub	r20, r22
    1d6e:	57 0b       	sbc	r21, r23
    1d70:	59 8b       	std	Y+17, r21	; 0x11
    1d72:	48 8b       	std	Y+16, r20	; 0x10
    1d74:	5f ef       	ldi	r21, 0xFF	; 255
    1d76:	25 16       	cp	r2, r21
    1d78:	35 06       	cpc	r3, r21
    1d7a:	49 f4       	brne	.+18     	; 0x1d8e <vfprintf+0x304>
    1d7c:	b6 01       	movw	r22, r12
    1d7e:	8e e2       	ldi	r24, 0x2E	; 46
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	2a 8b       	std	Y+18, r18	; 0x12
    1d84:	3b 8b       	std	Y+19, r19	; 0x13
    1d86:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1d8a:	3b 89       	ldd	r19, Y+19	; 0x13
    1d8c:	2a 89       	ldd	r18, Y+18	; 0x12
    1d8e:	42 14       	cp	r4, r2
    1d90:	53 04       	cpc	r5, r3
    1d92:	6c f0       	brlt	.+26     	; 0x1dae <vfprintf+0x324>
    1d94:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d96:	5d 85       	ldd	r21, Y+13	; 0x0d
    1d98:	42 15       	cp	r20, r2
    1d9a:	53 05       	cpc	r21, r3
    1d9c:	44 f4       	brge	.+16     	; 0x1dae <vfprintf+0x324>
    1d9e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1da0:	ff 85       	ldd	r31, Y+15	; 0x0f
    1da2:	e2 0f       	add	r30, r18
    1da4:	f3 1f       	adc	r31, r19
    1da6:	e6 0d       	add	r30, r6
    1da8:	f7 1d       	adc	r31, r7
    1daa:	81 81       	ldd	r24, Z+1	; 0x01
    1dac:	01 c0       	rjmp	.+2      	; 0x1db0 <vfprintf+0x326>
    1dae:	80 e3       	ldi	r24, 0x30	; 48
    1db0:	51 e0       	ldi	r21, 0x01	; 1
    1db2:	25 1a       	sub	r2, r21
    1db4:	31 08       	sbc	r3, r1
    1db6:	2f 5f       	subi	r18, 0xFF	; 255
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dba:	48 89       	ldd	r20, Y+16	; 0x10
    1dbc:	59 89       	ldd	r21, Y+17	; 0x11
    1dbe:	24 16       	cp	r2, r20
    1dc0:	35 06       	cpc	r3, r21
    1dc2:	4c f0       	brlt	.+18     	; 0x1dd6 <vfprintf+0x34c>
    1dc4:	b6 01       	movw	r22, r12
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	2a 8b       	std	Y+18, r18	; 0x12
    1dca:	3b 8b       	std	Y+19, r19	; 0x13
    1dcc:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1dd0:	2a 89       	ldd	r18, Y+18	; 0x12
    1dd2:	3b 89       	ldd	r19, Y+19	; 0x13
    1dd4:	cf cf       	rjmp	.-98     	; 0x1d74 <vfprintf+0x2ea>
    1dd6:	24 14       	cp	r2, r4
    1dd8:	35 04       	cpc	r3, r5
    1dda:	39 f4       	brne	.+14     	; 0x1dea <vfprintf+0x360>
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	96 33       	cpi	r25, 0x36	; 54
    1de0:	18 f4       	brcc	.+6      	; 0x1de8 <vfprintf+0x35e>
    1de2:	95 33       	cpi	r25, 0x35	; 53
    1de4:	11 f4       	brne	.+4      	; 0x1dea <vfprintf+0x360>
    1de6:	04 ff       	sbrs	r16, 4
    1de8:	81 e3       	ldi	r24, 0x31	; 49
    1dea:	b6 01       	movw	r22, r12
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	4b c0       	rjmp	.+150    	; 0x1e86 <vfprintf+0x3fc>
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	81 33       	cpi	r24, 0x31	; 49
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <vfprintf+0x36e>
    1df6:	0f 7e       	andi	r16, 0xEF	; 239
    1df8:	b6 01       	movw	r22, r12
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1e00:	11 11       	cpse	r17, r1
    1e02:	05 c0       	rjmp	.+10     	; 0x1e0e <vfprintf+0x384>
    1e04:	34 fc       	sbrc	r3, 4
    1e06:	18 c0       	rjmp	.+48     	; 0x1e38 <vfprintf+0x3ae>
    1e08:	85 e6       	ldi	r24, 0x65	; 101
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	17 c0       	rjmp	.+46     	; 0x1e3c <vfprintf+0x3b2>
    1e0e:	b6 01       	movw	r22, r12
    1e10:	8e e2       	ldi	r24, 0x2E	; 46
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	ee 24       	eor	r14, r14
    1e1c:	e3 94       	inc	r14
    1e1e:	e8 0e       	add	r14, r24
    1e20:	f3 01       	movw	r30, r6
    1e22:	e8 0f       	add	r30, r24
    1e24:	f1 1d       	adc	r31, r1
    1e26:	80 81       	ld	r24, Z
    1e28:	b6 01       	movw	r22, r12
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1e30:	11 50       	subi	r17, 0x01	; 1
    1e32:	8e 2d       	mov	r24, r14
    1e34:	91 f7       	brne	.-28     	; 0x1e1a <vfprintf+0x390>
    1e36:	e6 cf       	rjmp	.-52     	; 0x1e04 <vfprintf+0x37a>
    1e38:	85 e4       	ldi	r24, 0x45	; 69
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	b6 01       	movw	r22, r12
    1e3e:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1e42:	57 fc       	sbrc	r5, 7
    1e44:	05 c0       	rjmp	.+10     	; 0x1e50 <vfprintf+0x3c6>
    1e46:	41 14       	cp	r4, r1
    1e48:	51 04       	cpc	r5, r1
    1e4a:	39 f4       	brne	.+14     	; 0x1e5a <vfprintf+0x3d0>
    1e4c:	04 ff       	sbrs	r16, 4
    1e4e:	05 c0       	rjmp	.+10     	; 0x1e5a <vfprintf+0x3d0>
    1e50:	51 94       	neg	r5
    1e52:	41 94       	neg	r4
    1e54:	51 08       	sbc	r5, r1
    1e56:	8d e2       	ldi	r24, 0x2D	; 45
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <vfprintf+0x3d2>
    1e5a:	8b e2       	ldi	r24, 0x2B	; 43
    1e5c:	b6 01       	movw	r22, r12
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1e64:	80 e3       	ldi	r24, 0x30	; 48
    1e66:	9a e0       	ldi	r25, 0x0A	; 10
    1e68:	49 16       	cp	r4, r25
    1e6a:	51 04       	cpc	r5, r1
    1e6c:	2c f0       	brlt	.+10     	; 0x1e78 <vfprintf+0x3ee>
    1e6e:	8f 5f       	subi	r24, 0xFF	; 255
    1e70:	5a e0       	ldi	r21, 0x0A	; 10
    1e72:	45 1a       	sub	r4, r21
    1e74:	51 08       	sbc	r5, r1
    1e76:	f7 cf       	rjmp	.-18     	; 0x1e66 <vfprintf+0x3dc>
    1e78:	b6 01       	movw	r22, r12
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1e80:	b6 01       	movw	r22, r12
    1e82:	c2 01       	movw	r24, r4
    1e84:	c0 96       	adiw	r24, 0x30	; 48
    1e86:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1e8a:	57 c1       	rjmp	.+686    	; 0x213a <vfprintf+0x6b0>
    1e8c:	83 36       	cpi	r24, 0x63	; 99
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <vfprintf+0x412>
    1e90:	83 37       	cpi	r24, 0x73	; 115
    1e92:	79 f0       	breq	.+30     	; 0x1eb2 <vfprintf+0x428>
    1e94:	83 35       	cpi	r24, 0x53	; 83
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <vfprintf+0x410>
    1e98:	58 c0       	rjmp	.+176    	; 0x1f4a <vfprintf+0x4c0>
    1e9a:	21 c0       	rjmp	.+66     	; 0x1ede <vfprintf+0x454>
    1e9c:	52 01       	movw	r10, r4
    1e9e:	e2 e0       	ldi	r30, 0x02	; 2
    1ea0:	ae 0e       	add	r10, r30
    1ea2:	b1 1c       	adc	r11, r1
    1ea4:	f2 01       	movw	r30, r4
    1ea6:	80 81       	ld	r24, Z
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	01 e0       	ldi	r16, 0x01	; 1
    1eac:	10 e0       	ldi	r17, 0x00	; 0
    1eae:	23 01       	movw	r4, r6
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <vfprintf+0x450>
    1eb2:	52 01       	movw	r10, r4
    1eb4:	f2 e0       	ldi	r31, 0x02	; 2
    1eb6:	af 0e       	add	r10, r31
    1eb8:	b1 1c       	adc	r11, r1
    1eba:	f2 01       	movw	r30, r4
    1ebc:	40 80       	ld	r4, Z
    1ebe:	51 80       	ldd	r5, Z+1	; 0x01
    1ec0:	26 ff       	sbrs	r18, 6
    1ec2:	03 c0       	rjmp	.+6      	; 0x1eca <vfprintf+0x440>
    1ec4:	61 2f       	mov	r22, r17
    1ec6:	70 e0       	ldi	r23, 0x00	; 0
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <vfprintf+0x444>
    1eca:	6f ef       	ldi	r22, 0xFF	; 255
    1ecc:	7f ef       	ldi	r23, 0xFF	; 255
    1ece:	c2 01       	movw	r24, r4
    1ed0:	2a 8b       	std	Y+18, r18	; 0x12
    1ed2:	0e 94 83 14 	call	0x2906	; 0x2906 <strnlen>
    1ed6:	8c 01       	movw	r16, r24
    1ed8:	2a 89       	ldd	r18, Y+18	; 0x12
    1eda:	2f 77       	andi	r18, 0x7F	; 127
    1edc:	15 c0       	rjmp	.+42     	; 0x1f08 <vfprintf+0x47e>
    1ede:	52 01       	movw	r10, r4
    1ee0:	f2 e0       	ldi	r31, 0x02	; 2
    1ee2:	af 0e       	add	r10, r31
    1ee4:	b1 1c       	adc	r11, r1
    1ee6:	f2 01       	movw	r30, r4
    1ee8:	40 80       	ld	r4, Z
    1eea:	51 80       	ldd	r5, Z+1	; 0x01
    1eec:	26 ff       	sbrs	r18, 6
    1eee:	03 c0       	rjmp	.+6      	; 0x1ef6 <vfprintf+0x46c>
    1ef0:	61 2f       	mov	r22, r17
    1ef2:	70 e0       	ldi	r23, 0x00	; 0
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <vfprintf+0x470>
    1ef6:	6f ef       	ldi	r22, 0xFF	; 255
    1ef8:	7f ef       	ldi	r23, 0xFF	; 255
    1efa:	c2 01       	movw	r24, r4
    1efc:	2a 8b       	std	Y+18, r18	; 0x12
    1efe:	0e 94 71 14 	call	0x28e2	; 0x28e2 <strnlen_P>
    1f02:	8c 01       	movw	r16, r24
    1f04:	2a 89       	ldd	r18, Y+18	; 0x12
    1f06:	20 68       	ori	r18, 0x80	; 128
    1f08:	32 2e       	mov	r3, r18
    1f0a:	23 fd       	sbrc	r18, 3
    1f0c:	1a c0       	rjmp	.+52     	; 0x1f42 <vfprintf+0x4b8>
    1f0e:	8f 2d       	mov	r24, r15
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	08 17       	cp	r16, r24
    1f14:	19 07       	cpc	r17, r25
    1f16:	a8 f4       	brcc	.+42     	; 0x1f42 <vfprintf+0x4b8>
    1f18:	b6 01       	movw	r22, r12
    1f1a:	80 e2       	ldi	r24, 0x20	; 32
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1f22:	fa 94       	dec	r15
    1f24:	f4 cf       	rjmp	.-24     	; 0x1f0e <vfprintf+0x484>
    1f26:	f2 01       	movw	r30, r4
    1f28:	37 fc       	sbrc	r3, 7
    1f2a:	85 91       	lpm	r24, Z+
    1f2c:	37 fe       	sbrs	r3, 7
    1f2e:	81 91       	ld	r24, Z+
    1f30:	2f 01       	movw	r4, r30
    1f32:	b6 01       	movw	r22, r12
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    1f3a:	f1 10       	cpse	r15, r1
    1f3c:	fa 94       	dec	r15
    1f3e:	01 50       	subi	r16, 0x01	; 1
    1f40:	11 09       	sbc	r17, r1
    1f42:	01 15       	cp	r16, r1
    1f44:	11 05       	cpc	r17, r1
    1f46:	79 f7       	brne	.-34     	; 0x1f26 <vfprintf+0x49c>
    1f48:	f8 c0       	rjmp	.+496    	; 0x213a <vfprintf+0x6b0>
    1f4a:	84 36       	cpi	r24, 0x64	; 100
    1f4c:	11 f0       	breq	.+4      	; 0x1f52 <vfprintf+0x4c8>
    1f4e:	89 36       	cpi	r24, 0x69	; 105
    1f50:	59 f5       	brne	.+86     	; 0x1fa8 <vfprintf+0x51e>
    1f52:	52 01       	movw	r10, r4
    1f54:	27 ff       	sbrs	r18, 7
    1f56:	09 c0       	rjmp	.+18     	; 0x1f6a <vfprintf+0x4e0>
    1f58:	f4 e0       	ldi	r31, 0x04	; 4
    1f5a:	af 0e       	add	r10, r31
    1f5c:	b1 1c       	adc	r11, r1
    1f5e:	f2 01       	movw	r30, r4
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	0a c0       	rjmp	.+20     	; 0x1f7e <vfprintf+0x4f4>
    1f6a:	f2 e0       	ldi	r31, 0x02	; 2
    1f6c:	af 0e       	add	r10, r31
    1f6e:	b1 1c       	adc	r11, r1
    1f70:	f2 01       	movw	r30, r4
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	07 2e       	mov	r0, r23
    1f78:	00 0c       	add	r0, r0
    1f7a:	88 0b       	sbc	r24, r24
    1f7c:	99 0b       	sbc	r25, r25
    1f7e:	2f 76       	andi	r18, 0x6F	; 111
    1f80:	32 2e       	mov	r3, r18
    1f82:	97 ff       	sbrs	r25, 7
    1f84:	09 c0       	rjmp	.+18     	; 0x1f98 <vfprintf+0x50e>
    1f86:	90 95       	com	r25
    1f88:	80 95       	com	r24
    1f8a:	70 95       	com	r23
    1f8c:	61 95       	neg	r22
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	8f 4f       	sbci	r24, 0xFF	; 255
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	20 68       	ori	r18, 0x80	; 128
    1f96:	32 2e       	mov	r3, r18
    1f98:	2a e0       	ldi	r18, 0x0A	; 10
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	a3 01       	movw	r20, r6
    1f9e:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__ultoa_invert>
    1fa2:	e8 2e       	mov	r14, r24
    1fa4:	e6 18       	sub	r14, r6
    1fa6:	3f c0       	rjmp	.+126    	; 0x2026 <vfprintf+0x59c>
    1fa8:	02 2f       	mov	r16, r18
    1faa:	85 37       	cpi	r24, 0x75	; 117
    1fac:	21 f4       	brne	.+8      	; 0x1fb6 <vfprintf+0x52c>
    1fae:	0f 7e       	andi	r16, 0xEF	; 239
    1fb0:	2a e0       	ldi	r18, 0x0A	; 10
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	1d c0       	rjmp	.+58     	; 0x1ff0 <vfprintf+0x566>
    1fb6:	09 7f       	andi	r16, 0xF9	; 249
    1fb8:	8f 36       	cpi	r24, 0x6F	; 111
    1fba:	91 f0       	breq	.+36     	; 0x1fe0 <vfprintf+0x556>
    1fbc:	18 f4       	brcc	.+6      	; 0x1fc4 <vfprintf+0x53a>
    1fbe:	88 35       	cpi	r24, 0x58	; 88
    1fc0:	59 f0       	breq	.+22     	; 0x1fd8 <vfprintf+0x54e>
    1fc2:	c5 c0       	rjmp	.+394    	; 0x214e <vfprintf+0x6c4>
    1fc4:	80 37       	cpi	r24, 0x70	; 112
    1fc6:	19 f0       	breq	.+6      	; 0x1fce <vfprintf+0x544>
    1fc8:	88 37       	cpi	r24, 0x78	; 120
    1fca:	11 f0       	breq	.+4      	; 0x1fd0 <vfprintf+0x546>
    1fcc:	c0 c0       	rjmp	.+384    	; 0x214e <vfprintf+0x6c4>
    1fce:	00 61       	ori	r16, 0x10	; 16
    1fd0:	04 ff       	sbrs	r16, 4
    1fd2:	09 c0       	rjmp	.+18     	; 0x1fe6 <vfprintf+0x55c>
    1fd4:	04 60       	ori	r16, 0x04	; 4
    1fd6:	07 c0       	rjmp	.+14     	; 0x1fe6 <vfprintf+0x55c>
    1fd8:	24 ff       	sbrs	r18, 4
    1fda:	08 c0       	rjmp	.+16     	; 0x1fec <vfprintf+0x562>
    1fdc:	06 60       	ori	r16, 0x06	; 6
    1fde:	06 c0       	rjmp	.+12     	; 0x1fec <vfprintf+0x562>
    1fe0:	28 e0       	ldi	r18, 0x08	; 8
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	05 c0       	rjmp	.+10     	; 0x1ff0 <vfprintf+0x566>
    1fe6:	20 e1       	ldi	r18, 0x10	; 16
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <vfprintf+0x566>
    1fec:	20 e1       	ldi	r18, 0x10	; 16
    1fee:	32 e0       	ldi	r19, 0x02	; 2
    1ff0:	52 01       	movw	r10, r4
    1ff2:	07 ff       	sbrs	r16, 7
    1ff4:	09 c0       	rjmp	.+18     	; 0x2008 <vfprintf+0x57e>
    1ff6:	f4 e0       	ldi	r31, 0x04	; 4
    1ff8:	af 0e       	add	r10, r31
    1ffa:	b1 1c       	adc	r11, r1
    1ffc:	f2 01       	movw	r30, r4
    1ffe:	60 81       	ld	r22, Z
    2000:	71 81       	ldd	r23, Z+1	; 0x01
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	08 c0       	rjmp	.+16     	; 0x2018 <vfprintf+0x58e>
    2008:	f2 e0       	ldi	r31, 0x02	; 2
    200a:	af 0e       	add	r10, r31
    200c:	b1 1c       	adc	r11, r1
    200e:	f2 01       	movw	r30, r4
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a3 01       	movw	r20, r6
    201a:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__ultoa_invert>
    201e:	e8 2e       	mov	r14, r24
    2020:	e6 18       	sub	r14, r6
    2022:	0f 77       	andi	r16, 0x7F	; 127
    2024:	30 2e       	mov	r3, r16
    2026:	36 fe       	sbrs	r3, 6
    2028:	0b c0       	rjmp	.+22     	; 0x2040 <vfprintf+0x5b6>
    202a:	33 2d       	mov	r19, r3
    202c:	3e 7f       	andi	r19, 0xFE	; 254
    202e:	e1 16       	cp	r14, r17
    2030:	50 f4       	brcc	.+20     	; 0x2046 <vfprintf+0x5bc>
    2032:	34 fe       	sbrs	r3, 4
    2034:	0a c0       	rjmp	.+20     	; 0x204a <vfprintf+0x5c0>
    2036:	32 fc       	sbrc	r3, 2
    2038:	08 c0       	rjmp	.+16     	; 0x204a <vfprintf+0x5c0>
    203a:	33 2d       	mov	r19, r3
    203c:	3e 7e       	andi	r19, 0xEE	; 238
    203e:	05 c0       	rjmp	.+10     	; 0x204a <vfprintf+0x5c0>
    2040:	0e 2d       	mov	r16, r14
    2042:	33 2d       	mov	r19, r3
    2044:	03 c0       	rjmp	.+6      	; 0x204c <vfprintf+0x5c2>
    2046:	0e 2d       	mov	r16, r14
    2048:	01 c0       	rjmp	.+2      	; 0x204c <vfprintf+0x5c2>
    204a:	01 2f       	mov	r16, r17
    204c:	34 ff       	sbrs	r19, 4
    204e:	0c c0       	rjmp	.+24     	; 0x2068 <vfprintf+0x5de>
    2050:	fe 01       	movw	r30, r28
    2052:	ee 0d       	add	r30, r14
    2054:	f1 1d       	adc	r31, r1
    2056:	80 81       	ld	r24, Z
    2058:	80 33       	cpi	r24, 0x30	; 48
    205a:	11 f4       	brne	.+4      	; 0x2060 <vfprintf+0x5d6>
    205c:	39 7e       	andi	r19, 0xE9	; 233
    205e:	08 c0       	rjmp	.+16     	; 0x2070 <vfprintf+0x5e6>
    2060:	32 ff       	sbrs	r19, 2
    2062:	05 c0       	rjmp	.+10     	; 0x206e <vfprintf+0x5e4>
    2064:	0e 5f       	subi	r16, 0xFE	; 254
    2066:	04 c0       	rjmp	.+8      	; 0x2070 <vfprintf+0x5e6>
    2068:	83 2f       	mov	r24, r19
    206a:	86 78       	andi	r24, 0x86	; 134
    206c:	09 f0       	breq	.+2      	; 0x2070 <vfprintf+0x5e6>
    206e:	0f 5f       	subi	r16, 0xFF	; 255
    2070:	33 fd       	sbrc	r19, 3
    2072:	13 c0       	rjmp	.+38     	; 0x209a <vfprintf+0x610>
    2074:	30 ff       	sbrs	r19, 0
    2076:	06 c0       	rjmp	.+12     	; 0x2084 <vfprintf+0x5fa>
    2078:	1e 2d       	mov	r17, r14
    207a:	0f 15       	cp	r16, r15
    207c:	18 f4       	brcc	.+6      	; 0x2084 <vfprintf+0x5fa>
    207e:	1f 0d       	add	r17, r15
    2080:	10 1b       	sub	r17, r16
    2082:	0f 2d       	mov	r16, r15
    2084:	0f 15       	cp	r16, r15
    2086:	68 f4       	brcc	.+26     	; 0x20a2 <vfprintf+0x618>
    2088:	b6 01       	movw	r22, r12
    208a:	80 e2       	ldi	r24, 0x20	; 32
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	3b 8b       	std	Y+19, r19	; 0x13
    2090:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    2094:	0f 5f       	subi	r16, 0xFF	; 255
    2096:	3b 89       	ldd	r19, Y+19	; 0x13
    2098:	f5 cf       	rjmp	.-22     	; 0x2084 <vfprintf+0x5fa>
    209a:	0f 15       	cp	r16, r15
    209c:	10 f4       	brcc	.+4      	; 0x20a2 <vfprintf+0x618>
    209e:	f0 1a       	sub	r15, r16
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <vfprintf+0x61a>
    20a2:	f1 2c       	mov	r15, r1
    20a4:	34 ff       	sbrs	r19, 4
    20a6:	12 c0       	rjmp	.+36     	; 0x20cc <vfprintf+0x642>
    20a8:	b6 01       	movw	r22, r12
    20aa:	80 e3       	ldi	r24, 0x30	; 48
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	3b 8b       	std	Y+19, r19	; 0x13
    20b0:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    20b4:	3b 89       	ldd	r19, Y+19	; 0x13
    20b6:	32 ff       	sbrs	r19, 2
    20b8:	17 c0       	rjmp	.+46     	; 0x20e8 <vfprintf+0x65e>
    20ba:	31 fd       	sbrc	r19, 1
    20bc:	03 c0       	rjmp	.+6      	; 0x20c4 <vfprintf+0x63a>
    20be:	88 e7       	ldi	r24, 0x78	; 120
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <vfprintf+0x63e>
    20c4:	88 e5       	ldi	r24, 0x58	; 88
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	b6 01       	movw	r22, r12
    20ca:	0c c0       	rjmp	.+24     	; 0x20e4 <vfprintf+0x65a>
    20cc:	83 2f       	mov	r24, r19
    20ce:	86 78       	andi	r24, 0x86	; 134
    20d0:	59 f0       	breq	.+22     	; 0x20e8 <vfprintf+0x65e>
    20d2:	31 ff       	sbrs	r19, 1
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <vfprintf+0x650>
    20d6:	8b e2       	ldi	r24, 0x2B	; 43
    20d8:	01 c0       	rjmp	.+2      	; 0x20dc <vfprintf+0x652>
    20da:	80 e2       	ldi	r24, 0x20	; 32
    20dc:	37 fd       	sbrc	r19, 7
    20de:	8d e2       	ldi	r24, 0x2D	; 45
    20e0:	b6 01       	movw	r22, r12
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    20e8:	e1 16       	cp	r14, r17
    20ea:	38 f4       	brcc	.+14     	; 0x20fa <vfprintf+0x670>
    20ec:	b6 01       	movw	r22, r12
    20ee:	80 e3       	ldi	r24, 0x30	; 48
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    20f6:	11 50       	subi	r17, 0x01	; 1
    20f8:	f7 cf       	rjmp	.-18     	; 0x20e8 <vfprintf+0x65e>
    20fa:	ea 94       	dec	r14
    20fc:	f3 01       	movw	r30, r6
    20fe:	ee 0d       	add	r30, r14
    2100:	f1 1d       	adc	r31, r1
    2102:	80 81       	ld	r24, Z
    2104:	b6 01       	movw	r22, r12
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    210c:	e1 10       	cpse	r14, r1
    210e:	f5 cf       	rjmp	.-22     	; 0x20fa <vfprintf+0x670>
    2110:	14 c0       	rjmp	.+40     	; 0x213a <vfprintf+0x6b0>
    2112:	f4 e0       	ldi	r31, 0x04	; 4
    2114:	ff 15       	cp	r31, r15
    2116:	58 f5       	brcc	.+86     	; 0x216e <vfprintf+0x6e4>
    2118:	84 e0       	ldi	r24, 0x04	; 4
    211a:	f8 1a       	sub	r15, r24
    211c:	33 fe       	sbrs	r3, 3
    211e:	1e c0       	rjmp	.+60     	; 0x215c <vfprintf+0x6d2>
    2120:	21 10       	cpse	r2, r1
    2122:	26 c0       	rjmp	.+76     	; 0x2170 <vfprintf+0x6e6>
    2124:	03 ff       	sbrs	r16, 3
    2126:	2a c0       	rjmp	.+84     	; 0x217c <vfprintf+0x6f2>
    2128:	06 ea       	ldi	r16, 0xA6	; 166
    212a:	10 e0       	ldi	r17, 0x00	; 0
    212c:	f3 2d       	mov	r31, r3
    212e:	f0 71       	andi	r31, 0x10	; 16
    2130:	3f 2e       	mov	r3, r31
    2132:	f8 01       	movw	r30, r16
    2134:	84 91       	lpm	r24, Z
    2136:	81 11       	cpse	r24, r1
    2138:	24 c0       	rjmp	.+72     	; 0x2182 <vfprintf+0x6f8>
    213a:	ff 20       	and	r15, r15
    213c:	09 f4       	brne	.+2      	; 0x2140 <vfprintf+0x6b6>
    213e:	e5 cc       	rjmp	.-1590   	; 0x1b0a <vfprintf+0x80>
    2140:	b6 01       	movw	r22, r12
    2142:	80 e2       	ldi	r24, 0x20	; 32
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    214a:	fa 94       	dec	r15
    214c:	f6 cf       	rjmp	.-20     	; 0x213a <vfprintf+0x6b0>
    214e:	f6 01       	movw	r30, r12
    2150:	86 81       	ldd	r24, Z+6	; 0x06
    2152:	97 81       	ldd	r25, Z+7	; 0x07
    2154:	26 c0       	rjmp	.+76     	; 0x21a2 <vfprintf+0x718>
    2156:	8f ef       	ldi	r24, 0xFF	; 255
    2158:	9f ef       	ldi	r25, 0xFF	; 255
    215a:	23 c0       	rjmp	.+70     	; 0x21a2 <vfprintf+0x718>
    215c:	b6 01       	movw	r22, r12
    215e:	80 e2       	ldi	r24, 0x20	; 32
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    2166:	fa 94       	dec	r15
    2168:	f1 10       	cpse	r15, r1
    216a:	f8 cf       	rjmp	.-16     	; 0x215c <vfprintf+0x6d2>
    216c:	d9 cf       	rjmp	.-78     	; 0x2120 <vfprintf+0x696>
    216e:	f1 2c       	mov	r15, r1
    2170:	b6 01       	movw	r22, r12
    2172:	82 2d       	mov	r24, r2
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    217a:	d4 cf       	rjmp	.-88     	; 0x2124 <vfprintf+0x69a>
    217c:	0a ea       	ldi	r16, 0xAA	; 170
    217e:	10 e0       	ldi	r17, 0x00	; 0
    2180:	d5 cf       	rjmp	.-86     	; 0x212c <vfprintf+0x6a2>
    2182:	31 10       	cpse	r3, r1
    2184:	80 52       	subi	r24, 0x20	; 32
    2186:	b6 01       	movw	r22, r12
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0e 94 8e 14 	call	0x291c	; 0x291c <fputc>
    218e:	0f 5f       	subi	r16, 0xFF	; 255
    2190:	1f 4f       	sbci	r17, 0xFF	; 255
    2192:	cf cf       	rjmp	.-98     	; 0x2132 <vfprintf+0x6a8>
    2194:	23 e0       	ldi	r18, 0x03	; 3
    2196:	2f 15       	cp	r18, r15
    2198:	10 f4       	brcc	.+4      	; 0x219e <vfprintf+0x714>
    219a:	83 e0       	ldi	r24, 0x03	; 3
    219c:	be cf       	rjmp	.-132    	; 0x211a <vfprintf+0x690>
    219e:	f1 2c       	mov	r15, r1
    21a0:	c1 cf       	rjmp	.-126    	; 0x2124 <vfprintf+0x69a>
    21a2:	63 96       	adiw	r28, 0x13	; 19
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	df 90       	pop	r13
    21bc:	cf 90       	pop	r12
    21be:	bf 90       	pop	r11
    21c0:	af 90       	pop	r10
    21c2:	9f 90       	pop	r9
    21c4:	8f 90       	pop	r8
    21c6:	7f 90       	pop	r7
    21c8:	6f 90       	pop	r6
    21ca:	5f 90       	pop	r5
    21cc:	4f 90       	pop	r4
    21ce:	3f 90       	pop	r3
    21d0:	2f 90       	pop	r2
    21d2:	08 95       	ret

000021d4 <__subsf3>:
    21d4:	50 58       	subi	r21, 0x80	; 128

000021d6 <__addsf3>:
    21d6:	bb 27       	eor	r27, r27
    21d8:	aa 27       	eor	r26, r26
    21da:	0e 94 02 11 	call	0x2204	; 0x2204 <__addsf3x>
    21de:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__fp_round>
    21e2:	0e 94 c5 12 	call	0x258a	; 0x258a <__fp_pscA>
    21e6:	38 f0       	brcs	.+14     	; 0x21f6 <__addsf3+0x20>
    21e8:	0e 94 cc 12 	call	0x2598	; 0x2598 <__fp_pscB>
    21ec:	20 f0       	brcs	.+8      	; 0x21f6 <__addsf3+0x20>
    21ee:	39 f4       	brne	.+14     	; 0x21fe <__addsf3+0x28>
    21f0:	9f 3f       	cpi	r25, 0xFF	; 255
    21f2:	19 f4       	brne	.+6      	; 0x21fa <__addsf3+0x24>
    21f4:	26 f4       	brtc	.+8      	; 0x21fe <__addsf3+0x28>
    21f6:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_nan>
    21fa:	0e f4       	brtc	.+2      	; 0x21fe <__addsf3+0x28>
    21fc:	e0 95       	com	r30
    21fe:	e7 fb       	bst	r30, 7
    2200:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__fp_inf>

00002204 <__addsf3x>:
    2204:	e9 2f       	mov	r30, r25
    2206:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__fp_split3>
    220a:	58 f3       	brcs	.-42     	; 0x21e2 <__addsf3+0xc>
    220c:	ba 17       	cp	r27, r26
    220e:	62 07       	cpc	r22, r18
    2210:	73 07       	cpc	r23, r19
    2212:	84 07       	cpc	r24, r20
    2214:	95 07       	cpc	r25, r21
    2216:	20 f0       	brcs	.+8      	; 0x2220 <__addsf3x+0x1c>
    2218:	79 f4       	brne	.+30     	; 0x2238 <__addsf3x+0x34>
    221a:	a6 f5       	brtc	.+104    	; 0x2284 <__addsf3x+0x80>
    221c:	0c 94 1e 13 	jmp	0x263c	; 0x263c <__fp_zero>
    2220:	0e f4       	brtc	.+2      	; 0x2224 <__addsf3x+0x20>
    2222:	e0 95       	com	r30
    2224:	0b 2e       	mov	r0, r27
    2226:	ba 2f       	mov	r27, r26
    2228:	a0 2d       	mov	r26, r0
    222a:	0b 01       	movw	r0, r22
    222c:	b9 01       	movw	r22, r18
    222e:	90 01       	movw	r18, r0
    2230:	0c 01       	movw	r0, r24
    2232:	ca 01       	movw	r24, r20
    2234:	a0 01       	movw	r20, r0
    2236:	11 24       	eor	r1, r1
    2238:	ff 27       	eor	r31, r31
    223a:	59 1b       	sub	r21, r25
    223c:	99 f0       	breq	.+38     	; 0x2264 <__addsf3x+0x60>
    223e:	59 3f       	cpi	r21, 0xF9	; 249
    2240:	50 f4       	brcc	.+20     	; 0x2256 <__addsf3x+0x52>
    2242:	50 3e       	cpi	r21, 0xE0	; 224
    2244:	68 f1       	brcs	.+90     	; 0x22a0 <__addsf3x+0x9c>
    2246:	1a 16       	cp	r1, r26
    2248:	f0 40       	sbci	r31, 0x00	; 0
    224a:	a2 2f       	mov	r26, r18
    224c:	23 2f       	mov	r18, r19
    224e:	34 2f       	mov	r19, r20
    2250:	44 27       	eor	r20, r20
    2252:	58 5f       	subi	r21, 0xF8	; 248
    2254:	f3 cf       	rjmp	.-26     	; 0x223c <__addsf3x+0x38>
    2256:	46 95       	lsr	r20
    2258:	37 95       	ror	r19
    225a:	27 95       	ror	r18
    225c:	a7 95       	ror	r26
    225e:	f0 40       	sbci	r31, 0x00	; 0
    2260:	53 95       	inc	r21
    2262:	c9 f7       	brne	.-14     	; 0x2256 <__addsf3x+0x52>
    2264:	7e f4       	brtc	.+30     	; 0x2284 <__addsf3x+0x80>
    2266:	1f 16       	cp	r1, r31
    2268:	ba 0b       	sbc	r27, r26
    226a:	62 0b       	sbc	r22, r18
    226c:	73 0b       	sbc	r23, r19
    226e:	84 0b       	sbc	r24, r20
    2270:	ba f0       	brmi	.+46     	; 0x22a0 <__addsf3x+0x9c>
    2272:	91 50       	subi	r25, 0x01	; 1
    2274:	a1 f0       	breq	.+40     	; 0x229e <__addsf3x+0x9a>
    2276:	ff 0f       	add	r31, r31
    2278:	bb 1f       	adc	r27, r27
    227a:	66 1f       	adc	r22, r22
    227c:	77 1f       	adc	r23, r23
    227e:	88 1f       	adc	r24, r24
    2280:	c2 f7       	brpl	.-16     	; 0x2272 <__addsf3x+0x6e>
    2282:	0e c0       	rjmp	.+28     	; 0x22a0 <__addsf3x+0x9c>
    2284:	ba 0f       	add	r27, r26
    2286:	62 1f       	adc	r22, r18
    2288:	73 1f       	adc	r23, r19
    228a:	84 1f       	adc	r24, r20
    228c:	48 f4       	brcc	.+18     	; 0x22a0 <__addsf3x+0x9c>
    228e:	87 95       	ror	r24
    2290:	77 95       	ror	r23
    2292:	67 95       	ror	r22
    2294:	b7 95       	ror	r27
    2296:	f7 95       	ror	r31
    2298:	9e 3f       	cpi	r25, 0xFE	; 254
    229a:	08 f0       	brcs	.+2      	; 0x229e <__addsf3x+0x9a>
    229c:	b0 cf       	rjmp	.-160    	; 0x21fe <__addsf3+0x28>
    229e:	93 95       	inc	r25
    22a0:	88 0f       	add	r24, r24
    22a2:	08 f0       	brcs	.+2      	; 0x22a6 <__addsf3x+0xa2>
    22a4:	99 27       	eor	r25, r25
    22a6:	ee 0f       	add	r30, r30
    22a8:	97 95       	ror	r25
    22aa:	87 95       	ror	r24
    22ac:	08 95       	ret

000022ae <__cmpsf2>:
    22ae:	0e 94 6f 12 	call	0x24de	; 0x24de <__fp_cmp>
    22b2:	08 f4       	brcc	.+2      	; 0x22b6 <__cmpsf2+0x8>
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	08 95       	ret

000022b8 <__divsf3>:
    22b8:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__divsf3x>
    22bc:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__fp_round>
    22c0:	0e 94 cc 12 	call	0x2598	; 0x2598 <__fp_pscB>
    22c4:	58 f0       	brcs	.+22     	; 0x22dc <__divsf3+0x24>
    22c6:	0e 94 c5 12 	call	0x258a	; 0x258a <__fp_pscA>
    22ca:	40 f0       	brcs	.+16     	; 0x22dc <__divsf3+0x24>
    22cc:	29 f4       	brne	.+10     	; 0x22d8 <__divsf3+0x20>
    22ce:	5f 3f       	cpi	r21, 0xFF	; 255
    22d0:	29 f0       	breq	.+10     	; 0x22dc <__divsf3+0x24>
    22d2:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__fp_inf>
    22d6:	51 11       	cpse	r21, r1
    22d8:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__fp_szero>
    22dc:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_nan>

000022e0 <__divsf3x>:
    22e0:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__fp_split3>
    22e4:	68 f3       	brcs	.-38     	; 0x22c0 <__divsf3+0x8>

000022e6 <__divsf3_pse>:
    22e6:	99 23       	and	r25, r25
    22e8:	b1 f3       	breq	.-20     	; 0x22d6 <__divsf3+0x1e>
    22ea:	55 23       	and	r21, r21
    22ec:	91 f3       	breq	.-28     	; 0x22d2 <__divsf3+0x1a>
    22ee:	95 1b       	sub	r25, r21
    22f0:	55 0b       	sbc	r21, r21
    22f2:	bb 27       	eor	r27, r27
    22f4:	aa 27       	eor	r26, r26
    22f6:	62 17       	cp	r22, r18
    22f8:	73 07       	cpc	r23, r19
    22fa:	84 07       	cpc	r24, r20
    22fc:	38 f0       	brcs	.+14     	; 0x230c <__divsf3_pse+0x26>
    22fe:	9f 5f       	subi	r25, 0xFF	; 255
    2300:	5f 4f       	sbci	r21, 0xFF	; 255
    2302:	22 0f       	add	r18, r18
    2304:	33 1f       	adc	r19, r19
    2306:	44 1f       	adc	r20, r20
    2308:	aa 1f       	adc	r26, r26
    230a:	a9 f3       	breq	.-22     	; 0x22f6 <__divsf3_pse+0x10>
    230c:	35 d0       	rcall	.+106    	; 0x2378 <__divsf3_pse+0x92>
    230e:	0e 2e       	mov	r0, r30
    2310:	3a f0       	brmi	.+14     	; 0x2320 <__divsf3_pse+0x3a>
    2312:	e0 e8       	ldi	r30, 0x80	; 128
    2314:	32 d0       	rcall	.+100    	; 0x237a <__divsf3_pse+0x94>
    2316:	91 50       	subi	r25, 0x01	; 1
    2318:	50 40       	sbci	r21, 0x00	; 0
    231a:	e6 95       	lsr	r30
    231c:	00 1c       	adc	r0, r0
    231e:	ca f7       	brpl	.-14     	; 0x2312 <__divsf3_pse+0x2c>
    2320:	2b d0       	rcall	.+86     	; 0x2378 <__divsf3_pse+0x92>
    2322:	fe 2f       	mov	r31, r30
    2324:	29 d0       	rcall	.+82     	; 0x2378 <__divsf3_pse+0x92>
    2326:	66 0f       	add	r22, r22
    2328:	77 1f       	adc	r23, r23
    232a:	88 1f       	adc	r24, r24
    232c:	bb 1f       	adc	r27, r27
    232e:	26 17       	cp	r18, r22
    2330:	37 07       	cpc	r19, r23
    2332:	48 07       	cpc	r20, r24
    2334:	ab 07       	cpc	r26, r27
    2336:	b0 e8       	ldi	r27, 0x80	; 128
    2338:	09 f0       	breq	.+2      	; 0x233c <__divsf3_pse+0x56>
    233a:	bb 0b       	sbc	r27, r27
    233c:	80 2d       	mov	r24, r0
    233e:	bf 01       	movw	r22, r30
    2340:	ff 27       	eor	r31, r31
    2342:	93 58       	subi	r25, 0x83	; 131
    2344:	5f 4f       	sbci	r21, 0xFF	; 255
    2346:	3a f0       	brmi	.+14     	; 0x2356 <__divsf3_pse+0x70>
    2348:	9e 3f       	cpi	r25, 0xFE	; 254
    234a:	51 05       	cpc	r21, r1
    234c:	78 f0       	brcs	.+30     	; 0x236c <__divsf3_pse+0x86>
    234e:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__fp_inf>
    2352:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__fp_szero>
    2356:	5f 3f       	cpi	r21, 0xFF	; 255
    2358:	e4 f3       	brlt	.-8      	; 0x2352 <__divsf3_pse+0x6c>
    235a:	98 3e       	cpi	r25, 0xE8	; 232
    235c:	d4 f3       	brlt	.-12     	; 0x2352 <__divsf3_pse+0x6c>
    235e:	86 95       	lsr	r24
    2360:	77 95       	ror	r23
    2362:	67 95       	ror	r22
    2364:	b7 95       	ror	r27
    2366:	f7 95       	ror	r31
    2368:	9f 5f       	subi	r25, 0xFF	; 255
    236a:	c9 f7       	brne	.-14     	; 0x235e <__divsf3_pse+0x78>
    236c:	88 0f       	add	r24, r24
    236e:	91 1d       	adc	r25, r1
    2370:	96 95       	lsr	r25
    2372:	87 95       	ror	r24
    2374:	97 f9       	bld	r25, 7
    2376:	08 95       	ret
    2378:	e1 e0       	ldi	r30, 0x01	; 1
    237a:	66 0f       	add	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	88 1f       	adc	r24, r24
    2380:	bb 1f       	adc	r27, r27
    2382:	62 17       	cp	r22, r18
    2384:	73 07       	cpc	r23, r19
    2386:	84 07       	cpc	r24, r20
    2388:	ba 07       	cpc	r27, r26
    238a:	20 f0       	brcs	.+8      	; 0x2394 <__divsf3_pse+0xae>
    238c:	62 1b       	sub	r22, r18
    238e:	73 0b       	sbc	r23, r19
    2390:	84 0b       	sbc	r24, r20
    2392:	ba 0b       	sbc	r27, r26
    2394:	ee 1f       	adc	r30, r30
    2396:	88 f7       	brcc	.-30     	; 0x237a <__divsf3_pse+0x94>
    2398:	e0 95       	com	r30
    239a:	08 95       	ret

0000239c <__fixsfsi>:
    239c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__fixunssfsi>
    23a0:	68 94       	set
    23a2:	b1 11       	cpse	r27, r1
    23a4:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__fp_szero>
    23a8:	08 95       	ret

000023aa <__fixunssfsi>:
    23aa:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fp_splitA>
    23ae:	88 f0       	brcs	.+34     	; 0x23d2 <__fixunssfsi+0x28>
    23b0:	9f 57       	subi	r25, 0x7F	; 127
    23b2:	98 f0       	brcs	.+38     	; 0x23da <__fixunssfsi+0x30>
    23b4:	b9 2f       	mov	r27, r25
    23b6:	99 27       	eor	r25, r25
    23b8:	b7 51       	subi	r27, 0x17	; 23
    23ba:	b0 f0       	brcs	.+44     	; 0x23e8 <__fixunssfsi+0x3e>
    23bc:	e1 f0       	breq	.+56     	; 0x23f6 <__fixunssfsi+0x4c>
    23be:	66 0f       	add	r22, r22
    23c0:	77 1f       	adc	r23, r23
    23c2:	88 1f       	adc	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	1a f0       	brmi	.+6      	; 0x23ce <__fixunssfsi+0x24>
    23c8:	ba 95       	dec	r27
    23ca:	c9 f7       	brne	.-14     	; 0x23be <__fixunssfsi+0x14>
    23cc:	14 c0       	rjmp	.+40     	; 0x23f6 <__fixunssfsi+0x4c>
    23ce:	b1 30       	cpi	r27, 0x01	; 1
    23d0:	91 f0       	breq	.+36     	; 0x23f6 <__fixunssfsi+0x4c>
    23d2:	0e 94 1e 13 	call	0x263c	; 0x263c <__fp_zero>
    23d6:	b1 e0       	ldi	r27, 0x01	; 1
    23d8:	08 95       	ret
    23da:	0c 94 1e 13 	jmp	0x263c	; 0x263c <__fp_zero>
    23de:	67 2f       	mov	r22, r23
    23e0:	78 2f       	mov	r23, r24
    23e2:	88 27       	eor	r24, r24
    23e4:	b8 5f       	subi	r27, 0xF8	; 248
    23e6:	39 f0       	breq	.+14     	; 0x23f6 <__fixunssfsi+0x4c>
    23e8:	b9 3f       	cpi	r27, 0xF9	; 249
    23ea:	cc f3       	brlt	.-14     	; 0x23de <__fixunssfsi+0x34>
    23ec:	86 95       	lsr	r24
    23ee:	77 95       	ror	r23
    23f0:	67 95       	ror	r22
    23f2:	b3 95       	inc	r27
    23f4:	d9 f7       	brne	.-10     	; 0x23ec <__fixunssfsi+0x42>
    23f6:	3e f4       	brtc	.+14     	; 0x2406 <__fixunssfsi+0x5c>
    23f8:	90 95       	com	r25
    23fa:	80 95       	com	r24
    23fc:	70 95       	com	r23
    23fe:	61 95       	neg	r22
    2400:	7f 4f       	sbci	r23, 0xFF	; 255
    2402:	8f 4f       	sbci	r24, 0xFF	; 255
    2404:	9f 4f       	sbci	r25, 0xFF	; 255
    2406:	08 95       	ret

00002408 <floor>:
    2408:	0e 94 06 13 	call	0x260c	; 0x260c <__fp_trunc>
    240c:	90 f0       	brcs	.+36     	; 0x2432 <floor+0x2a>
    240e:	9f 37       	cpi	r25, 0x7F	; 127
    2410:	48 f4       	brcc	.+18     	; 0x2424 <floor+0x1c>
    2412:	91 11       	cpse	r25, r1
    2414:	16 f0       	brts	.+4      	; 0x241a <floor+0x12>
    2416:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__fp_szero>
    241a:	60 e0       	ldi	r22, 0x00	; 0
    241c:	70 e0       	ldi	r23, 0x00	; 0
    241e:	80 e8       	ldi	r24, 0x80	; 128
    2420:	9f eb       	ldi	r25, 0xBF	; 191
    2422:	08 95       	ret
    2424:	26 f4       	brtc	.+8      	; 0x242e <floor+0x26>
    2426:	1b 16       	cp	r1, r27
    2428:	61 1d       	adc	r22, r1
    242a:	71 1d       	adc	r23, r1
    242c:	81 1d       	adc	r24, r1
    242e:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__fp_mintl>
    2432:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_mpack>
    2436:	0e 94 c5 12 	call	0x258a	; 0x258a <__fp_pscA>
    243a:	20 f0       	brcs	.+8      	; 0x2444 <floor+0x3c>
    243c:	19 f0       	breq	.+6      	; 0x2444 <floor+0x3c>
    243e:	0e 94 cc 12 	call	0x2598	; 0x2598 <__fp_pscB>
    2442:	50 f4       	brcc	.+20     	; 0x2458 <fmod+0xc>
    2444:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_nan>
    2448:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__fp_szero>

0000244c <fmod>:
    244c:	e9 2f       	mov	r30, r25
    244e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__fp_split3>
    2452:	88 f3       	brcs	.-30     	; 0x2436 <floor+0x2e>
    2454:	55 23       	and	r21, r21
    2456:	b1 f3       	breq	.-20     	; 0x2444 <floor+0x3c>
    2458:	e7 fb       	bst	r30, 7
    245a:	62 17       	cp	r22, r18
    245c:	73 07       	cpc	r23, r19
    245e:	84 07       	cpc	r24, r20
    2460:	95 07       	cpc	r25, r21
    2462:	a8 f1       	brcs	.+106    	; 0x24ce <fmod+0x82>
    2464:	89 f3       	breq	.-30     	; 0x2448 <floor+0x40>
    2466:	e9 2f       	mov	r30, r25
    2468:	ff 27       	eor	r31, r31
    246a:	88 23       	and	r24, r24
    246c:	2a f0       	brmi	.+10     	; 0x2478 <fmod+0x2c>
    246e:	31 97       	sbiw	r30, 0x01	; 1
    2470:	66 0f       	add	r22, r22
    2472:	77 1f       	adc	r23, r23
    2474:	88 1f       	adc	r24, r24
    2476:	da f7       	brpl	.-10     	; 0x246e <fmod+0x22>
    2478:	95 2f       	mov	r25, r21
    247a:	55 27       	eor	r21, r21
    247c:	44 23       	and	r20, r20
    247e:	32 f0       	brmi	.+12     	; 0x248c <fmod+0x40>
    2480:	91 50       	subi	r25, 0x01	; 1
    2482:	50 40       	sbci	r21, 0x00	; 0
    2484:	22 0f       	add	r18, r18
    2486:	33 1f       	adc	r19, r19
    2488:	44 1f       	adc	r20, r20
    248a:	d2 f7       	brpl	.-12     	; 0x2480 <fmod+0x34>
    248c:	bb 27       	eor	r27, r27
    248e:	e9 1b       	sub	r30, r25
    2490:	f5 0b       	sbc	r31, r21
    2492:	62 1b       	sub	r22, r18
    2494:	73 0b       	sbc	r23, r19
    2496:	84 0b       	sbc	r24, r20
    2498:	b1 09       	sbc	r27, r1
    249a:	b1 f2       	breq	.-84     	; 0x2448 <floor+0x40>
    249c:	22 f4       	brpl	.+8      	; 0x24a6 <fmod+0x5a>
    249e:	62 0f       	add	r22, r18
    24a0:	73 1f       	adc	r23, r19
    24a2:	84 1f       	adc	r24, r20
    24a4:	b1 1d       	adc	r27, r1
    24a6:	31 97       	sbiw	r30, 0x01	; 1
    24a8:	2a f0       	brmi	.+10     	; 0x24b4 <fmod+0x68>
    24aa:	66 0f       	add	r22, r22
    24ac:	77 1f       	adc	r23, r23
    24ae:	88 1f       	adc	r24, r24
    24b0:	bb 1f       	adc	r27, r27
    24b2:	ef cf       	rjmp	.-34     	; 0x2492 <fmod+0x46>
    24b4:	91 50       	subi	r25, 0x01	; 1
    24b6:	50 40       	sbci	r21, 0x00	; 0
    24b8:	62 f0       	brmi	.+24     	; 0x24d2 <fmod+0x86>
    24ba:	41 f0       	breq	.+16     	; 0x24cc <fmod+0x80>
    24bc:	88 23       	and	r24, r24
    24be:	32 f0       	brmi	.+12     	; 0x24cc <fmod+0x80>
    24c0:	66 0f       	add	r22, r22
    24c2:	77 1f       	adc	r23, r23
    24c4:	88 1f       	adc	r24, r24
    24c6:	91 50       	subi	r25, 0x01	; 1
    24c8:	50 40       	sbci	r21, 0x00	; 0
    24ca:	c1 f7       	brne	.-16     	; 0x24bc <fmod+0x70>
    24cc:	93 95       	inc	r25
    24ce:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__fp_mpack>
    24d2:	86 95       	lsr	r24
    24d4:	77 95       	ror	r23
    24d6:	67 95       	ror	r22
    24d8:	9f 5f       	subi	r25, 0xFF	; 255
    24da:	d9 f7       	brne	.-10     	; 0x24d2 <fmod+0x86>
    24dc:	f7 cf       	rjmp	.-18     	; 0x24cc <fmod+0x80>

000024de <__fp_cmp>:
    24de:	99 0f       	add	r25, r25
    24e0:	00 08       	sbc	r0, r0
    24e2:	55 0f       	add	r21, r21
    24e4:	aa 0b       	sbc	r26, r26
    24e6:	e0 e8       	ldi	r30, 0x80	; 128
    24e8:	fe ef       	ldi	r31, 0xFE	; 254
    24ea:	16 16       	cp	r1, r22
    24ec:	17 06       	cpc	r1, r23
    24ee:	e8 07       	cpc	r30, r24
    24f0:	f9 07       	cpc	r31, r25
    24f2:	c0 f0       	brcs	.+48     	; 0x2524 <__fp_cmp+0x46>
    24f4:	12 16       	cp	r1, r18
    24f6:	13 06       	cpc	r1, r19
    24f8:	e4 07       	cpc	r30, r20
    24fa:	f5 07       	cpc	r31, r21
    24fc:	98 f0       	brcs	.+38     	; 0x2524 <__fp_cmp+0x46>
    24fe:	62 1b       	sub	r22, r18
    2500:	73 0b       	sbc	r23, r19
    2502:	84 0b       	sbc	r24, r20
    2504:	95 0b       	sbc	r25, r21
    2506:	39 f4       	brne	.+14     	; 0x2516 <__fp_cmp+0x38>
    2508:	0a 26       	eor	r0, r26
    250a:	61 f0       	breq	.+24     	; 0x2524 <__fp_cmp+0x46>
    250c:	23 2b       	or	r18, r19
    250e:	24 2b       	or	r18, r20
    2510:	25 2b       	or	r18, r21
    2512:	21 f4       	brne	.+8      	; 0x251c <__fp_cmp+0x3e>
    2514:	08 95       	ret
    2516:	0a 26       	eor	r0, r26
    2518:	09 f4       	brne	.+2      	; 0x251c <__fp_cmp+0x3e>
    251a:	a1 40       	sbci	r26, 0x01	; 1
    251c:	a6 95       	lsr	r26
    251e:	8f ef       	ldi	r24, 0xFF	; 255
    2520:	81 1d       	adc	r24, r1
    2522:	81 1d       	adc	r24, r1
    2524:	08 95       	ret

00002526 <__fp_inf>:
    2526:	97 f9       	bld	r25, 7
    2528:	9f 67       	ori	r25, 0x7F	; 127
    252a:	80 e8       	ldi	r24, 0x80	; 128
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	08 95       	ret

00002532 <__fp_mintl>:
    2532:	88 23       	and	r24, r24
    2534:	71 f4       	brne	.+28     	; 0x2552 <__fp_mintl+0x20>
    2536:	77 23       	and	r23, r23
    2538:	21 f0       	breq	.+8      	; 0x2542 <__fp_mintl+0x10>
    253a:	98 50       	subi	r25, 0x08	; 8
    253c:	87 2b       	or	r24, r23
    253e:	76 2f       	mov	r23, r22
    2540:	07 c0       	rjmp	.+14     	; 0x2550 <__fp_mintl+0x1e>
    2542:	66 23       	and	r22, r22
    2544:	11 f4       	brne	.+4      	; 0x254a <__fp_mintl+0x18>
    2546:	99 27       	eor	r25, r25
    2548:	0d c0       	rjmp	.+26     	; 0x2564 <__fp_mintl+0x32>
    254a:	90 51       	subi	r25, 0x10	; 16
    254c:	86 2b       	or	r24, r22
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	2a f0       	brmi	.+10     	; 0x255e <__fp_mintl+0x2c>
    2554:	9a 95       	dec	r25
    2556:	66 0f       	add	r22, r22
    2558:	77 1f       	adc	r23, r23
    255a:	88 1f       	adc	r24, r24
    255c:	da f7       	brpl	.-10     	; 0x2554 <__fp_mintl+0x22>
    255e:	88 0f       	add	r24, r24
    2560:	96 95       	lsr	r25
    2562:	87 95       	ror	r24
    2564:	97 f9       	bld	r25, 7
    2566:	08 95       	ret

00002568 <__fp_mpack>:
    2568:	9f 3f       	cpi	r25, 0xFF	; 255
    256a:	31 f0       	breq	.+12     	; 0x2578 <__fp_mpack_finite+0xc>

0000256c <__fp_mpack_finite>:
    256c:	91 50       	subi	r25, 0x01	; 1
    256e:	20 f4       	brcc	.+8      	; 0x2578 <__fp_mpack_finite+0xc>
    2570:	87 95       	ror	r24
    2572:	77 95       	ror	r23
    2574:	67 95       	ror	r22
    2576:	b7 95       	ror	r27
    2578:	88 0f       	add	r24, r24
    257a:	91 1d       	adc	r25, r1
    257c:	96 95       	lsr	r25
    257e:	87 95       	ror	r24
    2580:	97 f9       	bld	r25, 7
    2582:	08 95       	ret

00002584 <__fp_nan>:
    2584:	9f ef       	ldi	r25, 0xFF	; 255
    2586:	80 ec       	ldi	r24, 0xC0	; 192
    2588:	08 95       	ret

0000258a <__fp_pscA>:
    258a:	00 24       	eor	r0, r0
    258c:	0a 94       	dec	r0
    258e:	16 16       	cp	r1, r22
    2590:	17 06       	cpc	r1, r23
    2592:	18 06       	cpc	r1, r24
    2594:	09 06       	cpc	r0, r25
    2596:	08 95       	ret

00002598 <__fp_pscB>:
    2598:	00 24       	eor	r0, r0
    259a:	0a 94       	dec	r0
    259c:	12 16       	cp	r1, r18
    259e:	13 06       	cpc	r1, r19
    25a0:	14 06       	cpc	r1, r20
    25a2:	05 06       	cpc	r0, r21
    25a4:	08 95       	ret

000025a6 <__fp_round>:
    25a6:	09 2e       	mov	r0, r25
    25a8:	03 94       	inc	r0
    25aa:	00 0c       	add	r0, r0
    25ac:	11 f4       	brne	.+4      	; 0x25b2 <__fp_round+0xc>
    25ae:	88 23       	and	r24, r24
    25b0:	52 f0       	brmi	.+20     	; 0x25c6 <__fp_round+0x20>
    25b2:	bb 0f       	add	r27, r27
    25b4:	40 f4       	brcc	.+16     	; 0x25c6 <__fp_round+0x20>
    25b6:	bf 2b       	or	r27, r31
    25b8:	11 f4       	brne	.+4      	; 0x25be <__fp_round+0x18>
    25ba:	60 ff       	sbrs	r22, 0
    25bc:	04 c0       	rjmp	.+8      	; 0x25c6 <__fp_round+0x20>
    25be:	6f 5f       	subi	r22, 0xFF	; 255
    25c0:	7f 4f       	sbci	r23, 0xFF	; 255
    25c2:	8f 4f       	sbci	r24, 0xFF	; 255
    25c4:	9f 4f       	sbci	r25, 0xFF	; 255
    25c6:	08 95       	ret

000025c8 <__fp_split3>:
    25c8:	57 fd       	sbrc	r21, 7
    25ca:	90 58       	subi	r25, 0x80	; 128
    25cc:	44 0f       	add	r20, r20
    25ce:	55 1f       	adc	r21, r21
    25d0:	59 f0       	breq	.+22     	; 0x25e8 <__fp_splitA+0x10>
    25d2:	5f 3f       	cpi	r21, 0xFF	; 255
    25d4:	71 f0       	breq	.+28     	; 0x25f2 <__fp_splitA+0x1a>
    25d6:	47 95       	ror	r20

000025d8 <__fp_splitA>:
    25d8:	88 0f       	add	r24, r24
    25da:	97 fb       	bst	r25, 7
    25dc:	99 1f       	adc	r25, r25
    25de:	61 f0       	breq	.+24     	; 0x25f8 <__fp_splitA+0x20>
    25e0:	9f 3f       	cpi	r25, 0xFF	; 255
    25e2:	79 f0       	breq	.+30     	; 0x2602 <__fp_splitA+0x2a>
    25e4:	87 95       	ror	r24
    25e6:	08 95       	ret
    25e8:	12 16       	cp	r1, r18
    25ea:	13 06       	cpc	r1, r19
    25ec:	14 06       	cpc	r1, r20
    25ee:	55 1f       	adc	r21, r21
    25f0:	f2 cf       	rjmp	.-28     	; 0x25d6 <__fp_split3+0xe>
    25f2:	46 95       	lsr	r20
    25f4:	f1 df       	rcall	.-30     	; 0x25d8 <__fp_splitA>
    25f6:	08 c0       	rjmp	.+16     	; 0x2608 <__fp_splitA+0x30>
    25f8:	16 16       	cp	r1, r22
    25fa:	17 06       	cpc	r1, r23
    25fc:	18 06       	cpc	r1, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	f1 cf       	rjmp	.-30     	; 0x25e4 <__fp_splitA+0xc>
    2602:	86 95       	lsr	r24
    2604:	71 05       	cpc	r23, r1
    2606:	61 05       	cpc	r22, r1
    2608:	08 94       	sec
    260a:	08 95       	ret

0000260c <__fp_trunc>:
    260c:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fp_splitA>
    2610:	a0 f0       	brcs	.+40     	; 0x263a <__fp_trunc+0x2e>
    2612:	be e7       	ldi	r27, 0x7E	; 126
    2614:	b9 17       	cp	r27, r25
    2616:	88 f4       	brcc	.+34     	; 0x263a <__fp_trunc+0x2e>
    2618:	bb 27       	eor	r27, r27
    261a:	9f 38       	cpi	r25, 0x8F	; 143
    261c:	60 f4       	brcc	.+24     	; 0x2636 <__fp_trunc+0x2a>
    261e:	16 16       	cp	r1, r22
    2620:	b1 1d       	adc	r27, r1
    2622:	67 2f       	mov	r22, r23
    2624:	78 2f       	mov	r23, r24
    2626:	88 27       	eor	r24, r24
    2628:	98 5f       	subi	r25, 0xF8	; 248
    262a:	f7 cf       	rjmp	.-18     	; 0x261a <__fp_trunc+0xe>
    262c:	86 95       	lsr	r24
    262e:	77 95       	ror	r23
    2630:	67 95       	ror	r22
    2632:	b1 1d       	adc	r27, r1
    2634:	93 95       	inc	r25
    2636:	96 39       	cpi	r25, 0x96	; 150
    2638:	c8 f3       	brcs	.-14     	; 0x262c <__fp_trunc+0x20>
    263a:	08 95       	ret

0000263c <__fp_zero>:
    263c:	e8 94       	clt

0000263e <__fp_szero>:
    263e:	bb 27       	eor	r27, r27
    2640:	66 27       	eor	r22, r22
    2642:	77 27       	eor	r23, r23
    2644:	cb 01       	movw	r24, r22
    2646:	97 f9       	bld	r25, 7
    2648:	08 95       	ret

0000264a <__mulsf3>:
    264a:	0e 94 38 13 	call	0x2670	; 0x2670 <__mulsf3x>
    264e:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__fp_round>
    2652:	0e 94 c5 12 	call	0x258a	; 0x258a <__fp_pscA>
    2656:	38 f0       	brcs	.+14     	; 0x2666 <__mulsf3+0x1c>
    2658:	0e 94 cc 12 	call	0x2598	; 0x2598 <__fp_pscB>
    265c:	20 f0       	brcs	.+8      	; 0x2666 <__mulsf3+0x1c>
    265e:	95 23       	and	r25, r21
    2660:	11 f0       	breq	.+4      	; 0x2666 <__mulsf3+0x1c>
    2662:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__fp_inf>
    2666:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_nan>
    266a:	11 24       	eor	r1, r1
    266c:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__fp_szero>

00002670 <__mulsf3x>:
    2670:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__fp_split3>
    2674:	70 f3       	brcs	.-36     	; 0x2652 <__mulsf3+0x8>

00002676 <__mulsf3_pse>:
    2676:	95 9f       	mul	r25, r21
    2678:	c1 f3       	breq	.-16     	; 0x266a <__mulsf3+0x20>
    267a:	95 0f       	add	r25, r21
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	55 1f       	adc	r21, r21
    2680:	62 9f       	mul	r22, r18
    2682:	f0 01       	movw	r30, r0
    2684:	72 9f       	mul	r23, r18
    2686:	bb 27       	eor	r27, r27
    2688:	f0 0d       	add	r31, r0
    268a:	b1 1d       	adc	r27, r1
    268c:	63 9f       	mul	r22, r19
    268e:	aa 27       	eor	r26, r26
    2690:	f0 0d       	add	r31, r0
    2692:	b1 1d       	adc	r27, r1
    2694:	aa 1f       	adc	r26, r26
    2696:	64 9f       	mul	r22, r20
    2698:	66 27       	eor	r22, r22
    269a:	b0 0d       	add	r27, r0
    269c:	a1 1d       	adc	r26, r1
    269e:	66 1f       	adc	r22, r22
    26a0:	82 9f       	mul	r24, r18
    26a2:	22 27       	eor	r18, r18
    26a4:	b0 0d       	add	r27, r0
    26a6:	a1 1d       	adc	r26, r1
    26a8:	62 1f       	adc	r22, r18
    26aa:	73 9f       	mul	r23, r19
    26ac:	b0 0d       	add	r27, r0
    26ae:	a1 1d       	adc	r26, r1
    26b0:	62 1f       	adc	r22, r18
    26b2:	83 9f       	mul	r24, r19
    26b4:	a0 0d       	add	r26, r0
    26b6:	61 1d       	adc	r22, r1
    26b8:	22 1f       	adc	r18, r18
    26ba:	74 9f       	mul	r23, r20
    26bc:	33 27       	eor	r19, r19
    26be:	a0 0d       	add	r26, r0
    26c0:	61 1d       	adc	r22, r1
    26c2:	23 1f       	adc	r18, r19
    26c4:	84 9f       	mul	r24, r20
    26c6:	60 0d       	add	r22, r0
    26c8:	21 1d       	adc	r18, r1
    26ca:	82 2f       	mov	r24, r18
    26cc:	76 2f       	mov	r23, r22
    26ce:	6a 2f       	mov	r22, r26
    26d0:	11 24       	eor	r1, r1
    26d2:	9f 57       	subi	r25, 0x7F	; 127
    26d4:	50 40       	sbci	r21, 0x00	; 0
    26d6:	9a f0       	brmi	.+38     	; 0x26fe <__mulsf3_pse+0x88>
    26d8:	f1 f0       	breq	.+60     	; 0x2716 <__mulsf3_pse+0xa0>
    26da:	88 23       	and	r24, r24
    26dc:	4a f0       	brmi	.+18     	; 0x26f0 <__mulsf3_pse+0x7a>
    26de:	ee 0f       	add	r30, r30
    26e0:	ff 1f       	adc	r31, r31
    26e2:	bb 1f       	adc	r27, r27
    26e4:	66 1f       	adc	r22, r22
    26e6:	77 1f       	adc	r23, r23
    26e8:	88 1f       	adc	r24, r24
    26ea:	91 50       	subi	r25, 0x01	; 1
    26ec:	50 40       	sbci	r21, 0x00	; 0
    26ee:	a9 f7       	brne	.-22     	; 0x26da <__mulsf3_pse+0x64>
    26f0:	9e 3f       	cpi	r25, 0xFE	; 254
    26f2:	51 05       	cpc	r21, r1
    26f4:	80 f0       	brcs	.+32     	; 0x2716 <__mulsf3_pse+0xa0>
    26f6:	0c 94 93 12 	jmp	0x2526	; 0x2526 <__fp_inf>
    26fa:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__fp_szero>
    26fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2700:	e4 f3       	brlt	.-8      	; 0x26fa <__mulsf3_pse+0x84>
    2702:	98 3e       	cpi	r25, 0xE8	; 232
    2704:	d4 f3       	brlt	.-12     	; 0x26fa <__mulsf3_pse+0x84>
    2706:	86 95       	lsr	r24
    2708:	77 95       	ror	r23
    270a:	67 95       	ror	r22
    270c:	b7 95       	ror	r27
    270e:	f7 95       	ror	r31
    2710:	e7 95       	ror	r30
    2712:	9f 5f       	subi	r25, 0xFF	; 255
    2714:	c1 f7       	brne	.-16     	; 0x2706 <__mulsf3_pse+0x90>
    2716:	fe 2b       	or	r31, r30
    2718:	88 0f       	add	r24, r24
    271a:	91 1d       	adc	r25, r1
    271c:	96 95       	lsr	r25
    271e:	87 95       	ror	r24
    2720:	97 f9       	bld	r25, 7
    2722:	08 95       	ret

00002724 <__ftoa_engine>:
    2724:	28 30       	cpi	r18, 0x08	; 8
    2726:	08 f0       	brcs	.+2      	; 0x272a <__ftoa_engine+0x6>
    2728:	27 e0       	ldi	r18, 0x07	; 7
    272a:	33 27       	eor	r19, r19
    272c:	da 01       	movw	r26, r20
    272e:	99 0f       	add	r25, r25
    2730:	31 1d       	adc	r19, r1
    2732:	87 fd       	sbrc	r24, 7
    2734:	91 60       	ori	r25, 0x01	; 1
    2736:	00 96       	adiw	r24, 0x00	; 0
    2738:	61 05       	cpc	r22, r1
    273a:	71 05       	cpc	r23, r1
    273c:	39 f4       	brne	.+14     	; 0x274c <__ftoa_engine+0x28>
    273e:	32 60       	ori	r19, 0x02	; 2
    2740:	2e 5f       	subi	r18, 0xFE	; 254
    2742:	3d 93       	st	X+, r19
    2744:	30 e3       	ldi	r19, 0x30	; 48
    2746:	2a 95       	dec	r18
    2748:	e1 f7       	brne	.-8      	; 0x2742 <__ftoa_engine+0x1e>
    274a:	08 95       	ret
    274c:	9f 3f       	cpi	r25, 0xFF	; 255
    274e:	30 f0       	brcs	.+12     	; 0x275c <__ftoa_engine+0x38>
    2750:	80 38       	cpi	r24, 0x80	; 128
    2752:	71 05       	cpc	r23, r1
    2754:	61 05       	cpc	r22, r1
    2756:	09 f0       	breq	.+2      	; 0x275a <__ftoa_engine+0x36>
    2758:	3c 5f       	subi	r19, 0xFC	; 252
    275a:	3c 5f       	subi	r19, 0xFC	; 252
    275c:	3d 93       	st	X+, r19
    275e:	91 30       	cpi	r25, 0x01	; 1
    2760:	08 f0       	brcs	.+2      	; 0x2764 <__ftoa_engine+0x40>
    2762:	80 68       	ori	r24, 0x80	; 128
    2764:	91 1d       	adc	r25, r1
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	1f 93       	push	r17
    276c:	0f 93       	push	r16
    276e:	ff 92       	push	r15
    2770:	ef 92       	push	r14
    2772:	19 2f       	mov	r17, r25
    2774:	98 7f       	andi	r25, 0xF8	; 248
    2776:	96 95       	lsr	r25
    2778:	e9 2f       	mov	r30, r25
    277a:	96 95       	lsr	r25
    277c:	96 95       	lsr	r25
    277e:	e9 0f       	add	r30, r25
    2780:	ff 27       	eor	r31, r31
    2782:	e8 5f       	subi	r30, 0xF8	; 248
    2784:	fe 4f       	sbci	r31, 0xFE	; 254
    2786:	99 27       	eor	r25, r25
    2788:	33 27       	eor	r19, r19
    278a:	ee 24       	eor	r14, r14
    278c:	ff 24       	eor	r15, r15
    278e:	a7 01       	movw	r20, r14
    2790:	e7 01       	movw	r28, r14
    2792:	05 90       	lpm	r0, Z+
    2794:	08 94       	sec
    2796:	07 94       	ror	r0
    2798:	28 f4       	brcc	.+10     	; 0x27a4 <__ftoa_engine+0x80>
    279a:	36 0f       	add	r19, r22
    279c:	e7 1e       	adc	r14, r23
    279e:	f8 1e       	adc	r15, r24
    27a0:	49 1f       	adc	r20, r25
    27a2:	51 1d       	adc	r21, r1
    27a4:	66 0f       	add	r22, r22
    27a6:	77 1f       	adc	r23, r23
    27a8:	88 1f       	adc	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	06 94       	lsr	r0
    27ae:	a1 f7       	brne	.-24     	; 0x2798 <__ftoa_engine+0x74>
    27b0:	05 90       	lpm	r0, Z+
    27b2:	07 94       	ror	r0
    27b4:	28 f4       	brcc	.+10     	; 0x27c0 <__ftoa_engine+0x9c>
    27b6:	e7 0e       	add	r14, r23
    27b8:	f8 1e       	adc	r15, r24
    27ba:	49 1f       	adc	r20, r25
    27bc:	56 1f       	adc	r21, r22
    27be:	c1 1d       	adc	r28, r1
    27c0:	77 0f       	add	r23, r23
    27c2:	88 1f       	adc	r24, r24
    27c4:	99 1f       	adc	r25, r25
    27c6:	66 1f       	adc	r22, r22
    27c8:	06 94       	lsr	r0
    27ca:	a1 f7       	brne	.-24     	; 0x27b4 <__ftoa_engine+0x90>
    27cc:	05 90       	lpm	r0, Z+
    27ce:	07 94       	ror	r0
    27d0:	28 f4       	brcc	.+10     	; 0x27dc <__ftoa_engine+0xb8>
    27d2:	f8 0e       	add	r15, r24
    27d4:	49 1f       	adc	r20, r25
    27d6:	56 1f       	adc	r21, r22
    27d8:	c7 1f       	adc	r28, r23
    27da:	d1 1d       	adc	r29, r1
    27dc:	88 0f       	add	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	66 1f       	adc	r22, r22
    27e2:	77 1f       	adc	r23, r23
    27e4:	06 94       	lsr	r0
    27e6:	a1 f7       	brne	.-24     	; 0x27d0 <__ftoa_engine+0xac>
    27e8:	05 90       	lpm	r0, Z+
    27ea:	07 94       	ror	r0
    27ec:	20 f4       	brcc	.+8      	; 0x27f6 <__ftoa_engine+0xd2>
    27ee:	49 0f       	add	r20, r25
    27f0:	56 1f       	adc	r21, r22
    27f2:	c7 1f       	adc	r28, r23
    27f4:	d8 1f       	adc	r29, r24
    27f6:	99 0f       	add	r25, r25
    27f8:	66 1f       	adc	r22, r22
    27fa:	77 1f       	adc	r23, r23
    27fc:	88 1f       	adc	r24, r24
    27fe:	06 94       	lsr	r0
    2800:	a9 f7       	brne	.-22     	; 0x27ec <__ftoa_engine+0xc8>
    2802:	84 91       	lpm	r24, Z
    2804:	10 95       	com	r17
    2806:	17 70       	andi	r17, 0x07	; 7
    2808:	41 f0       	breq	.+16     	; 0x281a <__ftoa_engine+0xf6>
    280a:	d6 95       	lsr	r29
    280c:	c7 95       	ror	r28
    280e:	57 95       	ror	r21
    2810:	47 95       	ror	r20
    2812:	f7 94       	ror	r15
    2814:	e7 94       	ror	r14
    2816:	1a 95       	dec	r17
    2818:	c1 f7       	brne	.-16     	; 0x280a <__ftoa_engine+0xe6>
    281a:	ee ea       	ldi	r30, 0xAE	; 174
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	68 94       	set
    2820:	15 90       	lpm	r1, Z+
    2822:	15 91       	lpm	r17, Z+
    2824:	35 91       	lpm	r19, Z+
    2826:	65 91       	lpm	r22, Z+
    2828:	95 91       	lpm	r25, Z+
    282a:	05 90       	lpm	r0, Z+
    282c:	7f e2       	ldi	r23, 0x2F	; 47
    282e:	73 95       	inc	r23
    2830:	e1 18       	sub	r14, r1
    2832:	f1 0a       	sbc	r15, r17
    2834:	43 0b       	sbc	r20, r19
    2836:	56 0b       	sbc	r21, r22
    2838:	c9 0b       	sbc	r28, r25
    283a:	d0 09       	sbc	r29, r0
    283c:	c0 f7       	brcc	.-16     	; 0x282e <__ftoa_engine+0x10a>
    283e:	e1 0c       	add	r14, r1
    2840:	f1 1e       	adc	r15, r17
    2842:	43 1f       	adc	r20, r19
    2844:	56 1f       	adc	r21, r22
    2846:	c9 1f       	adc	r28, r25
    2848:	d0 1d       	adc	r29, r0
    284a:	7e f4       	brtc	.+30     	; 0x286a <__ftoa_engine+0x146>
    284c:	70 33       	cpi	r23, 0x30	; 48
    284e:	11 f4       	brne	.+4      	; 0x2854 <__ftoa_engine+0x130>
    2850:	8a 95       	dec	r24
    2852:	e6 cf       	rjmp	.-52     	; 0x2820 <__ftoa_engine+0xfc>
    2854:	e8 94       	clt
    2856:	01 50       	subi	r16, 0x01	; 1
    2858:	30 f0       	brcs	.+12     	; 0x2866 <__ftoa_engine+0x142>
    285a:	08 0f       	add	r16, r24
    285c:	0a f4       	brpl	.+2      	; 0x2860 <__ftoa_engine+0x13c>
    285e:	00 27       	eor	r16, r16
    2860:	02 17       	cp	r16, r18
    2862:	08 f4       	brcc	.+2      	; 0x2866 <__ftoa_engine+0x142>
    2864:	20 2f       	mov	r18, r16
    2866:	23 95       	inc	r18
    2868:	02 2f       	mov	r16, r18
    286a:	7a 33       	cpi	r23, 0x3A	; 58
    286c:	28 f0       	brcs	.+10     	; 0x2878 <__ftoa_engine+0x154>
    286e:	79 e3       	ldi	r23, 0x39	; 57
    2870:	7d 93       	st	X+, r23
    2872:	2a 95       	dec	r18
    2874:	e9 f7       	brne	.-6      	; 0x2870 <__ftoa_engine+0x14c>
    2876:	10 c0       	rjmp	.+32     	; 0x2898 <__ftoa_engine+0x174>
    2878:	7d 93       	st	X+, r23
    287a:	2a 95       	dec	r18
    287c:	89 f6       	brne	.-94     	; 0x2820 <__ftoa_engine+0xfc>
    287e:	06 94       	lsr	r0
    2880:	97 95       	ror	r25
    2882:	67 95       	ror	r22
    2884:	37 95       	ror	r19
    2886:	17 95       	ror	r17
    2888:	17 94       	ror	r1
    288a:	e1 18       	sub	r14, r1
    288c:	f1 0a       	sbc	r15, r17
    288e:	43 0b       	sbc	r20, r19
    2890:	56 0b       	sbc	r21, r22
    2892:	c9 0b       	sbc	r28, r25
    2894:	d0 09       	sbc	r29, r0
    2896:	98 f0       	brcs	.+38     	; 0x28be <__ftoa_engine+0x19a>
    2898:	23 95       	inc	r18
    289a:	7e 91       	ld	r23, -X
    289c:	73 95       	inc	r23
    289e:	7a 33       	cpi	r23, 0x3A	; 58
    28a0:	08 f0       	brcs	.+2      	; 0x28a4 <__ftoa_engine+0x180>
    28a2:	70 e3       	ldi	r23, 0x30	; 48
    28a4:	7c 93       	st	X, r23
    28a6:	20 13       	cpse	r18, r16
    28a8:	b8 f7       	brcc	.-18     	; 0x2898 <__ftoa_engine+0x174>
    28aa:	7e 91       	ld	r23, -X
    28ac:	70 61       	ori	r23, 0x10	; 16
    28ae:	7d 93       	st	X+, r23
    28b0:	30 f0       	brcs	.+12     	; 0x28be <__ftoa_engine+0x19a>
    28b2:	83 95       	inc	r24
    28b4:	71 e3       	ldi	r23, 0x31	; 49
    28b6:	7d 93       	st	X+, r23
    28b8:	70 e3       	ldi	r23, 0x30	; 48
    28ba:	2a 95       	dec	r18
    28bc:	e1 f7       	brne	.-8      	; 0x28b6 <__ftoa_engine+0x192>
    28be:	11 24       	eor	r1, r1
    28c0:	ef 90       	pop	r14
    28c2:	ff 90       	pop	r15
    28c4:	0f 91       	pop	r16
    28c6:	1f 91       	pop	r17
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	99 27       	eor	r25, r25
    28ce:	87 fd       	sbrc	r24, 7
    28d0:	90 95       	com	r25
    28d2:	08 95       	ret

000028d4 <strcpy_P>:
    28d4:	fb 01       	movw	r30, r22
    28d6:	dc 01       	movw	r26, r24
    28d8:	05 90       	lpm	r0, Z+
    28da:	0d 92       	st	X+, r0
    28dc:	00 20       	and	r0, r0
    28de:	e1 f7       	brne	.-8      	; 0x28d8 <strcpy_P+0x4>
    28e0:	08 95       	ret

000028e2 <strnlen_P>:
    28e2:	fc 01       	movw	r30, r24
    28e4:	05 90       	lpm	r0, Z+
    28e6:	61 50       	subi	r22, 0x01	; 1
    28e8:	70 40       	sbci	r23, 0x00	; 0
    28ea:	01 10       	cpse	r0, r1
    28ec:	d8 f7       	brcc	.-10     	; 0x28e4 <strnlen_P+0x2>
    28ee:	80 95       	com	r24
    28f0:	90 95       	com	r25
    28f2:	8e 0f       	add	r24, r30
    28f4:	9f 1f       	adc	r25, r31
    28f6:	08 95       	ret

000028f8 <strcpy>:
    28f8:	fb 01       	movw	r30, r22
    28fa:	dc 01       	movw	r26, r24
    28fc:	01 90       	ld	r0, Z+
    28fe:	0d 92       	st	X+, r0
    2900:	00 20       	and	r0, r0
    2902:	e1 f7       	brne	.-8      	; 0x28fc <strcpy+0x4>
    2904:	08 95       	ret

00002906 <strnlen>:
    2906:	fc 01       	movw	r30, r24
    2908:	61 50       	subi	r22, 0x01	; 1
    290a:	70 40       	sbci	r23, 0x00	; 0
    290c:	01 90       	ld	r0, Z+
    290e:	01 10       	cpse	r0, r1
    2910:	d8 f7       	brcc	.-10     	; 0x2908 <strnlen+0x2>
    2912:	80 95       	com	r24
    2914:	90 95       	com	r25
    2916:	8e 0f       	add	r24, r30
    2918:	9f 1f       	adc	r25, r31
    291a:	08 95       	ret

0000291c <fputc>:
    291c:	0f 93       	push	r16
    291e:	1f 93       	push	r17
    2920:	cf 93       	push	r28
    2922:	df 93       	push	r29
    2924:	fb 01       	movw	r30, r22
    2926:	23 81       	ldd	r18, Z+3	; 0x03
    2928:	21 fd       	sbrc	r18, 1
    292a:	03 c0       	rjmp	.+6      	; 0x2932 <fputc+0x16>
    292c:	8f ef       	ldi	r24, 0xFF	; 255
    292e:	9f ef       	ldi	r25, 0xFF	; 255
    2930:	28 c0       	rjmp	.+80     	; 0x2982 <fputc+0x66>
    2932:	22 ff       	sbrs	r18, 2
    2934:	16 c0       	rjmp	.+44     	; 0x2962 <fputc+0x46>
    2936:	46 81       	ldd	r20, Z+6	; 0x06
    2938:	57 81       	ldd	r21, Z+7	; 0x07
    293a:	24 81       	ldd	r18, Z+4	; 0x04
    293c:	35 81       	ldd	r19, Z+5	; 0x05
    293e:	42 17       	cp	r20, r18
    2940:	53 07       	cpc	r21, r19
    2942:	44 f4       	brge	.+16     	; 0x2954 <fputc+0x38>
    2944:	a0 81       	ld	r26, Z
    2946:	b1 81       	ldd	r27, Z+1	; 0x01
    2948:	9d 01       	movw	r18, r26
    294a:	2f 5f       	subi	r18, 0xFF	; 255
    294c:	3f 4f       	sbci	r19, 0xFF	; 255
    294e:	31 83       	std	Z+1, r19	; 0x01
    2950:	20 83       	st	Z, r18
    2952:	8c 93       	st	X, r24
    2954:	26 81       	ldd	r18, Z+6	; 0x06
    2956:	37 81       	ldd	r19, Z+7	; 0x07
    2958:	2f 5f       	subi	r18, 0xFF	; 255
    295a:	3f 4f       	sbci	r19, 0xFF	; 255
    295c:	37 83       	std	Z+7, r19	; 0x07
    295e:	26 83       	std	Z+6, r18	; 0x06
    2960:	10 c0       	rjmp	.+32     	; 0x2982 <fputc+0x66>
    2962:	eb 01       	movw	r28, r22
    2964:	09 2f       	mov	r16, r25
    2966:	18 2f       	mov	r17, r24
    2968:	00 84       	ldd	r0, Z+8	; 0x08
    296a:	f1 85       	ldd	r31, Z+9	; 0x09
    296c:	e0 2d       	mov	r30, r0
    296e:	09 95       	icall
    2970:	89 2b       	or	r24, r25
    2972:	e1 f6       	brne	.-72     	; 0x292c <fputc+0x10>
    2974:	8e 81       	ldd	r24, Y+6	; 0x06
    2976:	9f 81       	ldd	r25, Y+7	; 0x07
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	9f 83       	std	Y+7, r25	; 0x07
    297c:	8e 83       	std	Y+6, r24	; 0x06
    297e:	81 2f       	mov	r24, r17
    2980:	90 2f       	mov	r25, r16
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	1f 91       	pop	r17
    2988:	0f 91       	pop	r16
    298a:	08 95       	ret

0000298c <sprintf>:
    298c:	0f 93       	push	r16
    298e:	1f 93       	push	r17
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	2e 97       	sbiw	r28, 0x0e	; 14
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	0d 89       	ldd	r16, Y+21	; 0x15
    29a6:	1e 89       	ldd	r17, Y+22	; 0x16
    29a8:	86 e0       	ldi	r24, 0x06	; 6
    29aa:	8c 83       	std	Y+4, r24	; 0x04
    29ac:	1a 83       	std	Y+2, r17	; 0x02
    29ae:	09 83       	std	Y+1, r16	; 0x01
    29b0:	8f ef       	ldi	r24, 0xFF	; 255
    29b2:	9f e7       	ldi	r25, 0x7F	; 127
    29b4:	9e 83       	std	Y+6, r25	; 0x06
    29b6:	8d 83       	std	Y+5, r24	; 0x05
    29b8:	ae 01       	movw	r20, r28
    29ba:	47 5e       	subi	r20, 0xE7	; 231
    29bc:	5f 4f       	sbci	r21, 0xFF	; 255
    29be:	6f 89       	ldd	r22, Y+23	; 0x17
    29c0:	78 8d       	ldd	r23, Y+24	; 0x18
    29c2:	ce 01       	movw	r24, r28
    29c4:	01 96       	adiw	r24, 0x01	; 1
    29c6:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <vfprintf>
    29ca:	2f 81       	ldd	r18, Y+7	; 0x07
    29cc:	38 85       	ldd	r19, Y+8	; 0x08
    29ce:	f8 01       	movw	r30, r16
    29d0:	e2 0f       	add	r30, r18
    29d2:	f3 1f       	adc	r31, r19
    29d4:	10 82       	st	Z, r1
    29d6:	2e 96       	adiw	r28, 0x0e	; 14
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	df 91       	pop	r29
    29e4:	cf 91       	pop	r28
    29e6:	1f 91       	pop	r17
    29e8:	0f 91       	pop	r16
    29ea:	08 95       	ret

000029ec <__ultoa_invert>:
    29ec:	fa 01       	movw	r30, r20
    29ee:	aa 27       	eor	r26, r26
    29f0:	28 30       	cpi	r18, 0x08	; 8
    29f2:	51 f1       	breq	.+84     	; 0x2a48 <__ultoa_invert+0x5c>
    29f4:	20 31       	cpi	r18, 0x10	; 16
    29f6:	81 f1       	breq	.+96     	; 0x2a58 <__ultoa_invert+0x6c>
    29f8:	e8 94       	clt
    29fa:	6f 93       	push	r22
    29fc:	6e 7f       	andi	r22, 0xFE	; 254
    29fe:	6e 5f       	subi	r22, 0xFE	; 254
    2a00:	7f 4f       	sbci	r23, 0xFF	; 255
    2a02:	8f 4f       	sbci	r24, 0xFF	; 255
    2a04:	9f 4f       	sbci	r25, 0xFF	; 255
    2a06:	af 4f       	sbci	r26, 0xFF	; 255
    2a08:	b1 e0       	ldi	r27, 0x01	; 1
    2a0a:	3e d0       	rcall	.+124    	; 0x2a88 <__ultoa_invert+0x9c>
    2a0c:	b4 e0       	ldi	r27, 0x04	; 4
    2a0e:	3c d0       	rcall	.+120    	; 0x2a88 <__ultoa_invert+0x9c>
    2a10:	67 0f       	add	r22, r23
    2a12:	78 1f       	adc	r23, r24
    2a14:	89 1f       	adc	r24, r25
    2a16:	9a 1f       	adc	r25, r26
    2a18:	a1 1d       	adc	r26, r1
    2a1a:	68 0f       	add	r22, r24
    2a1c:	79 1f       	adc	r23, r25
    2a1e:	8a 1f       	adc	r24, r26
    2a20:	91 1d       	adc	r25, r1
    2a22:	a1 1d       	adc	r26, r1
    2a24:	6a 0f       	add	r22, r26
    2a26:	71 1d       	adc	r23, r1
    2a28:	81 1d       	adc	r24, r1
    2a2a:	91 1d       	adc	r25, r1
    2a2c:	a1 1d       	adc	r26, r1
    2a2e:	20 d0       	rcall	.+64     	; 0x2a70 <__ultoa_invert+0x84>
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <__ultoa_invert+0x48>
    2a32:	68 94       	set
    2a34:	3f 91       	pop	r19
    2a36:	2a e0       	ldi	r18, 0x0A	; 10
    2a38:	26 9f       	mul	r18, r22
    2a3a:	11 24       	eor	r1, r1
    2a3c:	30 19       	sub	r19, r0
    2a3e:	30 5d       	subi	r19, 0xD0	; 208
    2a40:	31 93       	st	Z+, r19
    2a42:	de f6       	brtc	.-74     	; 0x29fa <__ultoa_invert+0xe>
    2a44:	cf 01       	movw	r24, r30
    2a46:	08 95       	ret
    2a48:	46 2f       	mov	r20, r22
    2a4a:	47 70       	andi	r20, 0x07	; 7
    2a4c:	40 5d       	subi	r20, 0xD0	; 208
    2a4e:	41 93       	st	Z+, r20
    2a50:	b3 e0       	ldi	r27, 0x03	; 3
    2a52:	0f d0       	rcall	.+30     	; 0x2a72 <__ultoa_invert+0x86>
    2a54:	c9 f7       	brne	.-14     	; 0x2a48 <__ultoa_invert+0x5c>
    2a56:	f6 cf       	rjmp	.-20     	; 0x2a44 <__ultoa_invert+0x58>
    2a58:	46 2f       	mov	r20, r22
    2a5a:	4f 70       	andi	r20, 0x0F	; 15
    2a5c:	40 5d       	subi	r20, 0xD0	; 208
    2a5e:	4a 33       	cpi	r20, 0x3A	; 58
    2a60:	18 f0       	brcs	.+6      	; 0x2a68 <__ultoa_invert+0x7c>
    2a62:	49 5d       	subi	r20, 0xD9	; 217
    2a64:	31 fd       	sbrc	r19, 1
    2a66:	40 52       	subi	r20, 0x20	; 32
    2a68:	41 93       	st	Z+, r20
    2a6a:	02 d0       	rcall	.+4      	; 0x2a70 <__ultoa_invert+0x84>
    2a6c:	a9 f7       	brne	.-22     	; 0x2a58 <__ultoa_invert+0x6c>
    2a6e:	ea cf       	rjmp	.-44     	; 0x2a44 <__ultoa_invert+0x58>
    2a70:	b4 e0       	ldi	r27, 0x04	; 4
    2a72:	a6 95       	lsr	r26
    2a74:	97 95       	ror	r25
    2a76:	87 95       	ror	r24
    2a78:	77 95       	ror	r23
    2a7a:	67 95       	ror	r22
    2a7c:	ba 95       	dec	r27
    2a7e:	c9 f7       	brne	.-14     	; 0x2a72 <__ultoa_invert+0x86>
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	61 05       	cpc	r22, r1
    2a84:	71 05       	cpc	r23, r1
    2a86:	08 95       	ret
    2a88:	9b 01       	movw	r18, r22
    2a8a:	ac 01       	movw	r20, r24
    2a8c:	0a 2e       	mov	r0, r26
    2a8e:	06 94       	lsr	r0
    2a90:	57 95       	ror	r21
    2a92:	47 95       	ror	r20
    2a94:	37 95       	ror	r19
    2a96:	27 95       	ror	r18
    2a98:	ba 95       	dec	r27
    2a9a:	c9 f7       	brne	.-14     	; 0x2a8e <__ultoa_invert+0xa2>
    2a9c:	62 0f       	add	r22, r18
    2a9e:	73 1f       	adc	r23, r19
    2aa0:	84 1f       	adc	r24, r20
    2aa2:	95 1f       	adc	r25, r21
    2aa4:	a0 1d       	adc	r26, r0
    2aa6:	08 95       	ret

00002aa8 <_exit>:
    2aa8:	f8 94       	cli

00002aaa <__stop_program>:
    2aaa:	ff cf       	rjmp	.-2      	; 0x2aaa <__stop_program>
