
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00002962  000029f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002962  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  008001aa  008001aa  00002aa0  2**0
                  ALLOC
  3 .stab         0000321c  00000000  00000000  00002aa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014d7  00000000  00000000  00005cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007193  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000071a4  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__ctors_end>
       4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      10:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      14:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_5>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_6>
      1c:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_7>
      20:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_8>
      24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      28:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      2c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_12>
      34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_15>
      40:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      44:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      48:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      4c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      58:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      5c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      68:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      6c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      70:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      7c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      80:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      84:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	53 74       	andi	r21, 0x43	; 67
      8e:	61 72       	andi	r22, 0x21	; 33
      90:	74 69       	ori	r23, 0x94	; 148
      92:	6e 67       	ori	r22, 0x7E	; 126
      94:	20 72       	andi	r18, 0x20	; 32
      96:	61 64       	ori	r22, 0x41	; 65
      98:	69 6f       	ori	r22, 0xF9	; 249
	...

0000009b <string_intro_row1.2439>:
      9b:	2a 2a 2a 20 53 4d 36 56 46 5a 00                    *** SM6VFZ.

000000a6 <__c.2179>:
      a6:	6e 61 6e 00                                         nan.

000000aa <__c.2177>:
      aa:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ba:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ca:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      da:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ea:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      fa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     10a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     11a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     12a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     13a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     14a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     15a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     16a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     17a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     18a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     19a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf ef       	ldi	r28, 0xFF	; 255
     1ae:	d0 e1       	ldi	r29, 0x10	; 16
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	11 e0       	ldi	r17, 0x01	; 1
     1b6:	a0 e0       	ldi	r26, 0x00	; 0
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	e2 e6       	ldi	r30, 0x62	; 98
     1bc:	f9 e2       	ldi	r31, 0x29	; 41
     1be:	00 e0       	ldi	r16, 0x00	; 0
     1c0:	0b bf       	out	0x3b, r16	; 59
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x14>
     1c4:	07 90       	elpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	aa 3a       	cpi	r26, 0xAA	; 170
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0x10>

000001ce <__do_clear_bss>:
     1ce:	21 e0       	ldi	r18, 0x01	; 1
     1d0:	aa ea       	ldi	r26, 0xAA	; 170
     1d2:	b1 e0       	ldi	r27, 0x01	; 1
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	ad 3c       	cpi	r26, 0xCD	; 205
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	0e 94 1c 07 	call	0xe38	; 0xe38 <main>
     1e2:	0c 94 af 14 	jmp	0x295e	; 0x295e <_exit>

000001e6 <__bad_interrupt>:
     1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <__vector_15>:
volatile uint8_t band_timer = 255, vol_timer = 255;
volatile uint16_t bandf, tx, pll_n = 0;
volatile uint8_t rx_att;
volatile bool rffe_rx_att;

ISR(TIMER0_COMP_vect) {
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	2f 93       	push	r18
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
  if (step_timer < 500)
     1fa:	80 91 c9 01 	lds	r24, 0x01C9
     1fe:	90 91 ca 01 	lds	r25, 0x01CA
     202:	84 3f       	cpi	r24, 0xF4	; 244
     204:	91 40       	sbci	r25, 0x01	; 1
     206:	48 f4       	brcc	.+18     	; 0x21a <__vector_15+0x30>
    step_timer ++;
     208:	80 91 c9 01 	lds	r24, 0x01C9
     20c:	90 91 ca 01 	lds	r25, 0x01CA
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	90 93 ca 01 	sts	0x01CA, r25
     216:	80 93 c9 01 	sts	0x01C9, r24
}
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	2f 91       	pop	r18
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <__vector_12>:

ISR(TIMER1_COMPA_vect) {
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	8f 93       	push	r24
  timer_flag = 1;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	80 93 cb 01 	sts	0x01CB, r24
  
}
     23c:	8f 91       	pop	r24
     23e:	0f 90       	pop	r0
     240:	0f be       	out	0x3f, r0	; 63
     242:	0f 90       	pop	r0
     244:	1f 90       	pop	r1
     246:	18 95       	reti

00000248 <__vector_5>:

ISR(INT4_vect) {  // falling level on INT4
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	11 24       	eor	r1, r1
     252:	8f 93       	push	r24
  if(!(PINE & (1 << ROT1_A))) {
     254:	0c 99       	sbic	0x01, 4	; 1
     256:	15 c0       	rjmp	.+42     	; 0x282 <__vector_5+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	86 e0       	ldi	r24, 0x06	; 6
     25a:	8a 95       	dec	r24
     25c:	f1 f7       	brne	.-4      	; 0x25a <__vector_5+0x12>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <__vector_5+0x18>
    _delay_us(20);
    if (!(PINE & (1 << ROT1_B))) {
     260:	0d 99       	sbic	0x01, 5	; 1
     262:	0f c0       	rjmp	.+30     	; 0x282 <__vector_5+0x3a>
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	8a 95       	dec	r24
     268:	f1 f7       	brne	.-4      	; 0x266 <__vector_5+0x1e>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <__vector_5+0x24>
      _delay_us(20);
      if (!(PINE & (1 << ROT1_A)) && !(PINE & (1 << ROT1_B))) {
     26c:	0c 99       	sbic	0x01, 4	; 1
     26e:	09 c0       	rjmp	.+18     	; 0x282 <__vector_5+0x3a>
     270:	0d 99       	sbic	0x01, 5	; 1
     272:	07 c0       	rjmp	.+14     	; 0x282 <__vector_5+0x3a>
     274:	81 e2       	ldi	r24, 0x21	; 33
     276:	8a 95       	dec	r24
     278:	f1 f7       	brne	.-4      	; 0x276 <__vector_5+0x2e>
     27a:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x02;
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	80 93 c3 01 	sts	0x01C3, r24
      }
    }
  }
}
     282:	8f 91       	pop	r24
     284:	0f 90       	pop	r0
     286:	0f be       	out	0x3f, r0	; 63
     288:	0f 90       	pop	r0
     28a:	1f 90       	pop	r1
     28c:	18 95       	reti

0000028e <__vector_6>:

ISR(INT5_vect) {  // falling level on INT5
     28e:	1f 92       	push	r1
     290:	0f 92       	push	r0
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	8f 93       	push	r24
  if (!(PINE & (1 << ROT1_B))) {
     29a:	0d 99       	sbic	0x01, 5	; 1
     29c:	15 c0       	rjmp	.+42     	; 0x2c8 <__vector_6+0x3a>
     29e:	86 e0       	ldi	r24, 0x06	; 6
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <__vector_6+0x12>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <__vector_6+0x18>
   _delay_us(20);
    if (!(PINE & (1 << ROT1_A))) {
     2a6:	0c 99       	sbic	0x01, 4	; 1
     2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <__vector_6+0x3a>
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	8a 95       	dec	r24
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <__vector_6+0x1e>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <__vector_6+0x24>
      _delay_us(20);
      if (!(PINE & (1 << ROT1_A)) && !(PINE & (1 << ROT1_B))) {
     2b2:	0c 99       	sbic	0x01, 4	; 1
     2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <__vector_6+0x3a>
     2b6:	0d 99       	sbic	0x01, 5	; 1
     2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <__vector_6+0x3a>
     2ba:	81 e2       	ldi	r24, 0x21	; 33
     2bc:	8a 95       	dec	r24
     2be:	f1 f7       	brne	.-4      	; 0x2bc <__vector_6+0x2e>
     2c0:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x01;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 93 c3 01 	sts	0x01C3, r24
      }
    }
  }
}
     2c8:	8f 91       	pop	r24
     2ca:	0f 90       	pop	r0
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	0f 90       	pop	r0
     2d0:	1f 90       	pop	r1
     2d2:	18 95       	reti

000002d4 <__vector_7>:

ISR(INT6_vect) {  // falling level on INT6
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	8f 93       	push	r24
  if(!(PINE & (1 << VOLROT_A))) {
     2e0:	0e 99       	sbic	0x01, 6	; 1
     2e2:	15 c0       	rjmp	.+42     	; 0x30e <__vector_7+0x3a>
     2e4:	86 e0       	ldi	r24, 0x06	; 6
     2e6:	8a 95       	dec	r24
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <__vector_7+0x12>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <__vector_7+0x18>
    _delay_us(20);
    if (!(PINE & (1 << VOLROT_B))) {
     2ec:	0f 99       	sbic	0x01, 7	; 1
     2ee:	0f c0       	rjmp	.+30     	; 0x30e <__vector_7+0x3a>
     2f0:	86 e0       	ldi	r24, 0x06	; 6
     2f2:	8a 95       	dec	r24
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <__vector_7+0x1e>
     2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <__vector_7+0x24>
      _delay_us(20);
      if (!(PINE & (1 << VOLROT_A)) && !(PINE & (1 << VOLROT_B))) {
     2f8:	0e 99       	sbic	0x01, 6	; 1
     2fa:	09 c0       	rjmp	.+18     	; 0x30e <__vector_7+0x3a>
     2fc:	0f 99       	sbic	0x01, 7	; 1
     2fe:	07 c0       	rjmp	.+14     	; 0x30e <__vector_7+0x3a>
     300:	81 e2       	ldi	r24, 0x21	; 33
     302:	8a 95       	dec	r24
     304:	f1 f7       	brne	.-4      	; 0x302 <__vector_7+0x2e>
     306:	00 00       	nop
	_delay_us(100);
	vol_flag = 0x02;
     308:	82 e0       	ldi	r24, 0x02	; 2
     30a:	80 93 c4 01 	sts	0x01C4, r24
      }
    }
  }
}
     30e:	8f 91       	pop	r24
     310:	0f 90       	pop	r0
     312:	0f be       	out	0x3f, r0	; 63
     314:	0f 90       	pop	r0
     316:	1f 90       	pop	r1
     318:	18 95       	reti

0000031a <__vector_8>:

ISR(INT7_vect) {  // falling level on INT7
     31a:	1f 92       	push	r1
     31c:	0f 92       	push	r0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	0f 92       	push	r0
     322:	11 24       	eor	r1, r1
     324:	8f 93       	push	r24
  if (!(PINE & (1 << VOLROT_B))) {
     326:	0f 99       	sbic	0x01, 7	; 1
     328:	15 c0       	rjmp	.+42     	; 0x354 <__vector_8+0x3a>
     32a:	86 e0       	ldi	r24, 0x06	; 6
     32c:	8a 95       	dec	r24
     32e:	f1 f7       	brne	.-4      	; 0x32c <__vector_8+0x12>
     330:	00 c0       	rjmp	.+0      	; 0x332 <__vector_8+0x18>
    _delay_us(20);
    if (!(PINE & (1 << VOLROT_A))) {
     332:	0e 99       	sbic	0x01, 6	; 1
     334:	0f c0       	rjmp	.+30     	; 0x354 <__vector_8+0x3a>
     336:	86 e0       	ldi	r24, 0x06	; 6
     338:	8a 95       	dec	r24
     33a:	f1 f7       	brne	.-4      	; 0x338 <__vector_8+0x1e>
     33c:	00 c0       	rjmp	.+0      	; 0x33e <__vector_8+0x24>
      _delay_us(20);
      if (!(PINE & (1 << VOLROT_A)) && !(PINE & (1 << VOLROT_B))) {
     33e:	0e 99       	sbic	0x01, 6	; 1
     340:	09 c0       	rjmp	.+18     	; 0x354 <__vector_8+0x3a>
     342:	0f 99       	sbic	0x01, 7	; 1
     344:	07 c0       	rjmp	.+14     	; 0x354 <__vector_8+0x3a>
     346:	81 e2       	ldi	r24, 0x21	; 33
     348:	8a 95       	dec	r24
     34a:	f1 f7       	brne	.-4      	; 0x348 <__vector_8+0x2e>
     34c:	00 00       	nop
	_delay_us(100);
	vol_flag = 0x01;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	80 93 c4 01 	sts	0x01C4, r24
      }
    }
  }
}
     354:	8f 91       	pop	r24
     356:	0f 90       	pop	r0
     358:	0f be       	out	0x3f, r0	; 63
     35a:	0f 90       	pop	r0
     35c:	1f 90       	pop	r1
     35e:	18 95       	reti

00000360 <TWIinit>:

void TWIinit(void) {
  TWBR = 0x45;
     360:	85 e4       	ldi	r24, 0x45	; 69
     362:	80 93 70 00 	sts	0x0070, r24
  TWCR = (1 << TWEN);
     366:	84 e0       	ldi	r24, 0x04	; 4
     368:	80 93 74 00 	sts	0x0074, r24
     36c:	08 95       	ret

0000036e <TWIStart>:
}

void TWIStart(void) {
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     36e:	84 ea       	ldi	r24, 0xA4	; 164
     370:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     374:	80 91 74 00 	lds	r24, 0x0074
     378:	87 ff       	sbrs	r24, 7
     37a:	fc cf       	rjmp	.-8      	; 0x374 <TWIStart+0x6>
}
     37c:	08 95       	ret

0000037e <TWIStop>:

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     37e:	84 e9       	ldi	r24, 0x94	; 148
     380:	80 93 74 00 	sts	0x0074, r24
     384:	08 95       	ret

00000386 <TWIWrite>:
}

void TWIWrite(uint8_t u8data) {
  TWDR = u8data;
     386:	80 93 73 00 	sts	0x0073, r24
  TWCR = (1<<TWINT)|(1<<TWEN);
     38a:	84 e8       	ldi	r24, 0x84	; 132
     38c:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     390:	80 91 74 00 	lds	r24, 0x0074
     394:	87 ff       	sbrs	r24, 7
     396:	fc cf       	rjmp	.-8      	; 0x390 <TWIWrite+0xa>
}
     398:	08 95       	ret

0000039a <TWIReadACK>:

uint8_t TWIReadACK(void) {
  TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     39a:	84 ec       	ldi	r24, 0xC4	; 196
     39c:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     3a0:	80 91 74 00 	lds	r24, 0x0074
     3a4:	87 ff       	sbrs	r24, 7
     3a6:	fc cf       	rjmp	.-8      	; 0x3a0 <TWIReadACK+0x6>
  return TWDR;
     3a8:	80 91 73 00 	lds	r24, 0x0073
}
     3ac:	08 95       	ret

000003ae <TWIReadNACK>:

//read byte with NACK
uint8_t TWIReadNACK(void) {
  TWCR = (1<<TWINT)|(1<<TWEN);
     3ae:	84 e8       	ldi	r24, 0x84	; 132
     3b0:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     3b4:	80 91 74 00 	lds	r24, 0x0074
     3b8:	87 ff       	sbrs	r24, 7
     3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <TWIReadNACK+0x6>
  return TWDR;
     3bc:	80 91 73 00 	lds	r24, 0x0073
}
     3c0:	08 95       	ret

000003c2 <TWIGetStatus>:

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     3c2:	80 91 71 00 	lds	r24, 0x0071
  return status;
}
     3c6:	88 7f       	andi	r24, 0xF8	; 248
     3c8:	08 95       	ret

000003ca <TWI_write_byte>:

uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	1f 92       	push	r1
     3d2:	cd b7       	in	r28, 0x3d	; 61
     3d4:	de b7       	in	r29, 0x3e	; 62
     3d6:	16 2f       	mov	r17, r22

  TWIStart();
     3d8:	89 83       	std	Y+1, r24	; 0x01
     3da:	0e 94 b7 01 	call	0x36e	; 0x36e <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     3de:	90 91 71 00 	lds	r25, 0x0071
     3e2:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	98 30       	cpi	r25, 0x08	; 8
     3e8:	29 f0       	breq	.+10     	; 0x3f4 <TWI_write_byte+0x2a>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     3ea:	84 e9       	ldi	r24, 0x94	; 148
     3ec:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	1e c0       	rjmp	.+60     	; 0x430 <TWI_write_byte+0x66>
  }
  TWIWrite(addr << 1);
     3f4:	88 0f       	add	r24, r24
     3f6:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     3fa:	90 91 71 00 	lds	r25, 0x0071
     3fe:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     400:	98 31       	cpi	r25, 0x18	; 24
     402:	29 f0       	breq	.+10     	; 0x40e <TWI_write_byte+0x44>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     404:	84 e9       	ldi	r24, 0x94	; 148
     406:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	11 c0       	rjmp	.+34     	; 0x430 <TWI_write_byte+0x66>
  }  
  TWIWrite(data);
     40e:	81 2f       	mov	r24, r17
     410:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     414:	80 91 71 00 	lds	r24, 0x0071
     418:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;
  }  
  TWIWrite(data);
  if (TWIGetStatus() != 0x28) {
     41a:	88 32       	cpi	r24, 0x28	; 40
     41c:	29 f0       	breq	.+10     	; 0x428 <TWI_write_byte+0x5e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     41e:	84 e9       	ldi	r24, 0x94	; 148
     420:	80 93 74 00 	sts	0x0074, r24
    return 0x02;
  }  
  TWIWrite(data);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     424:	83 e0       	ldi	r24, 0x03	; 3
     426:	04 c0       	rjmp	.+8      	; 0x430 <TWI_write_byte+0x66>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     428:	84 e9       	ldi	r24, 0x94	; 148
     42a:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIStop();
  return 0x00;
     42e:	80 e0       	ldi	r24, 0x00	; 0
}
     430:	0f 90       	pop	r0
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	08 95       	ret

0000043a <TWI_read_byte>:

uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	1f 92       	push	r1
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	8b 01       	movw	r16, r22

  TWIStart();
     44a:	89 83       	std	Y+1, r24	; 0x01
     44c:	0e 94 b7 01 	call	0x36e	; 0x36e <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     450:	90 91 71 00 	lds	r25, 0x0071
     454:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     456:	89 81       	ldd	r24, Y+1	; 0x01
     458:	98 30       	cpi	r25, 0x08	; 8
     45a:	29 f0       	breq	.+10     	; 0x466 <TWI_read_byte+0x2c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     45c:	84 e9       	ldi	r24, 0x94	; 148
     45e:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	16 c0       	rjmp	.+44     	; 0x492 <TWI_read_byte+0x58>
  }
  TWIWrite((addr << 1) | 0x01);
     466:	88 0f       	add	r24, r24
     468:	81 60       	ori	r24, 0x01	; 1
     46a:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     46e:	80 91 71 00 	lds	r24, 0x0071
     472:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite((addr << 1) | 0x01);
  if (TWIGetStatus() != 0x40) {
     474:	80 34       	cpi	r24, 0x40	; 64
     476:	29 f0       	breq	.+10     	; 0x482 <TWI_read_byte+0x48>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     478:	84 e9       	ldi	r24, 0x94	; 148
     47a:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite((addr << 1) | 0x01);
  if (TWIGetStatus() != 0x40) {
    TWIStop();
    return 0x02;
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	08 c0       	rjmp	.+16     	; 0x492 <TWI_read_byte+0x58>
  }
  *data = TWIReadNACK();
     482:	0e 94 d7 01 	call	0x3ae	; 0x3ae <TWIReadNACK>
     486:	f8 01       	movw	r30, r16
     488:	80 83       	st	Z, r24
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     48a:	84 e9       	ldi	r24, 0x94	; 148
     48c:	80 93 74 00 	sts	0x0074, r24
     490:	80 e0       	ldi	r24, 0x00	; 0
    return 0x02;
  }
  *data = TWIReadNACK();
  TWIStop();
  return 0x00;
}
     492:	0f 90       	pop	r0
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	08 95       	ret

0000049e <TWI_write_word>:

uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	1f 92       	push	r1
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	16 2f       	mov	r17, r22
     4ae:	07 2f       	mov	r16, r23

  TWIStart();
     4b0:	89 83       	std	Y+1, r24	; 0x01
     4b2:	0e 94 b7 01 	call	0x36e	; 0x36e <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     4b6:	90 91 71 00 	lds	r25, 0x0071
     4ba:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	98 30       	cpi	r25, 0x08	; 8
     4c0:	29 f0       	breq	.+10     	; 0x4cc <TWI_write_word+0x2e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4c2:	84 e9       	ldi	r24, 0x94	; 148
     4c4:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	2b c0       	rjmp	.+86     	; 0x522 <TWI_write_word+0x84>
  }
  TWIWrite(addr << 1);
     4cc:	88 0f       	add	r24, r24
     4ce:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     4d2:	90 91 71 00 	lds	r25, 0x0071
     4d6:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     4d8:	98 31       	cpi	r25, 0x18	; 24
     4da:	29 f0       	breq	.+10     	; 0x4e6 <TWI_write_word+0x48>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4dc:	84 e9       	ldi	r24, 0x94	; 148
     4de:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     4e2:	82 e0       	ldi	r24, 0x02	; 2
     4e4:	1e c0       	rjmp	.+60     	; 0x522 <TWI_write_word+0x84>
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
     4e6:	80 2f       	mov	r24, r16
     4e8:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     4ec:	90 91 71 00 	lds	r25, 0x0071
     4f0:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
  if (TWIGetStatus() != 0x28) {
     4f2:	98 32       	cpi	r25, 0x28	; 40
     4f4:	29 f0       	breq	.+10     	; 0x500 <TWI_write_word+0x62>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4f6:	84 e9       	ldi	r24, 0x94	; 148
     4f8:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     4fc:	83 e0       	ldi	r24, 0x03	; 3
     4fe:	11 c0       	rjmp	.+34     	; 0x522 <TWI_write_word+0x84>
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
     500:	81 2f       	mov	r24, r17
     502:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     506:	80 91 71 00 	lds	r24, 0x0071
     50a:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
  if (TWIGetStatus() != 0x28) {
     50c:	88 32       	cpi	r24, 0x28	; 40
     50e:	29 f0       	breq	.+10     	; 0x51a <TWI_write_word+0x7c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     510:	84 e9       	ldi	r24, 0x94	; 148
     512:	80 93 74 00 	sts	0x0074, r24
    return 0x03;
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	04 c0       	rjmp	.+8      	; 0x522 <TWI_write_word+0x84>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     51a:	84 e9       	ldi	r24, 0x94	; 148
     51c:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     520:	80 e0       	ldi	r24, 0x00	; 0
}
     522:	0f 90       	pop	r0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	1f 91       	pop	r17
     52a:	0f 91       	pop	r16
     52c:	08 95       	ret

0000052e <TWI_write_3bytes>:

uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	1f 92       	push	r1
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	16 2f       	mov	r17, r22
     540:	04 2f       	mov	r16, r20
     542:	f2 2e       	mov	r15, r18

  TWIStart();
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	0e 94 b7 01 	call	0x36e	; 0x36e <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     54a:	90 91 71 00 	lds	r25, 0x0071
     54e:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     550:	89 81       	ldd	r24, Y+1	; 0x01
     552:	98 30       	cpi	r25, 0x08	; 8
     554:	29 f0       	breq	.+10     	; 0x560 <TWI_write_3bytes+0x32>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     556:	84 e9       	ldi	r24, 0x94	; 148
     558:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	33 c0       	rjmp	.+102    	; 0x5c6 <TWI_write_3bytes+0x98>
  }
  TWIWrite(addr << 1);
     560:	88 0f       	add	r24, r24
     562:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     566:	90 91 71 00 	lds	r25, 0x0071
     56a:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     56c:	98 31       	cpi	r25, 0x18	; 24
     56e:	29 f0       	breq	.+10     	; 0x57a <TWI_write_3bytes+0x4c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     570:	84 e9       	ldi	r24, 0x94	; 148
     572:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	26 c0       	rjmp	.+76     	; 0x5c6 <TWI_write_3bytes+0x98>
  }
  TWIWrite(byte1);
     57a:	81 2f       	mov	r24, r17
     57c:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     580:	90 91 71 00 	lds	r25, 0x0071
     584:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     586:	98 32       	cpi	r25, 0x28	; 40
     588:	29 f0       	breq	.+10     	; 0x594 <TWI_write_3bytes+0x66>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     58a:	84 e9       	ldi	r24, 0x94	; 148
     58c:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     590:	83 e0       	ldi	r24, 0x03	; 3
     592:	19 c0       	rjmp	.+50     	; 0x5c6 <TWI_write_3bytes+0x98>
  }
  TWIWrite(byte2);
     594:	80 2f       	mov	r24, r16
     596:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     59a:	90 91 71 00 	lds	r25, 0x0071
     59e:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     5a0:	98 32       	cpi	r25, 0x28	; 40
     5a2:	41 f4       	brne	.+16     	; 0x5b4 <TWI_write_3bytes+0x86>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     5a4:	8f 2d       	mov	r24, r15
     5a6:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     5aa:	80 91 71 00 	lds	r24, 0x0071
     5ae:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     5b0:	88 32       	cpi	r24, 0x28	; 40
     5b2:	29 f0       	breq	.+10     	; 0x5be <TWI_write_3bytes+0x90>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5b4:	84 e9       	ldi	r24, 0x94	; 148
     5b6:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     5ba:	84 e0       	ldi	r24, 0x04	; 4
     5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <TWI_write_3bytes+0x98>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5be:	84 e9       	ldi	r24, 0x94	; 148
     5c0:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     5c4:	80 e0       	ldi	r24, 0x00	; 0
}
     5c6:	0f 90       	pop	r0
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	08 95       	ret

000005d4 <TWI_write_4bytes>:

uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	1f 92       	push	r1
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	16 2f       	mov	r17, r22
     5e8:	f4 2e       	mov	r15, r20
     5ea:	e2 2e       	mov	r14, r18

  TWIStart();
     5ec:	89 83       	std	Y+1, r24	; 0x01
     5ee:	0e 94 b7 01 	call	0x36e	; 0x36e <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     5f2:	90 91 71 00 	lds	r25, 0x0071
     5f6:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     5f8:	89 81       	ldd	r24, Y+1	; 0x01
     5fa:	98 30       	cpi	r25, 0x08	; 8
     5fc:	29 f0       	breq	.+10     	; 0x608 <TWI_write_4bytes+0x34>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5fe:	84 e9       	ldi	r24, 0x94	; 148
     600:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	3b c0       	rjmp	.+118    	; 0x67e <TWI_write_4bytes+0xaa>
  }
  TWIWrite(addr << 1);
     608:	88 0f       	add	r24, r24
     60a:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     60e:	90 91 71 00 	lds	r25, 0x0071
     612:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     614:	98 31       	cpi	r25, 0x18	; 24
     616:	29 f0       	breq	.+10     	; 0x622 <TWI_write_4bytes+0x4e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     618:	84 e9       	ldi	r24, 0x94	; 148
     61a:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	2e c0       	rjmp	.+92     	; 0x67e <TWI_write_4bytes+0xaa>
  }
  TWIWrite(byte1);
     622:	81 2f       	mov	r24, r17
     624:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     628:	90 91 71 00 	lds	r25, 0x0071
     62c:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     62e:	98 32       	cpi	r25, 0x28	; 40
     630:	29 f0       	breq	.+10     	; 0x63c <TWI_write_4bytes+0x68>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     632:	84 e9       	ldi	r24, 0x94	; 148
     634:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     638:	83 e0       	ldi	r24, 0x03	; 3
     63a:	21 c0       	rjmp	.+66     	; 0x67e <TWI_write_4bytes+0xaa>
  }
  TWIWrite(byte2);
     63c:	8f 2d       	mov	r24, r15
     63e:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     642:	90 91 71 00 	lds	r25, 0x0071
     646:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     648:	98 32       	cpi	r25, 0x28	; 40
     64a:	81 f4       	brne	.+32     	; 0x66c <TWI_write_4bytes+0x98>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     64c:	8e 2d       	mov	r24, r14
     64e:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     652:	90 91 71 00 	lds	r25, 0x0071
     656:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     658:	98 32       	cpi	r25, 0x28	; 40
     65a:	41 f4       	brne	.+16     	; 0x66c <TWI_write_4bytes+0x98>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
     65c:	80 2f       	mov	r24, r16
     65e:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     662:	80 91 71 00 	lds	r24, 0x0071
     666:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
     668:	88 32       	cpi	r24, 0x28	; 40
     66a:	29 f0       	breq	.+10     	; 0x676 <TWI_write_4bytes+0xa2>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     66c:	84 e9       	ldi	r24, 0x94	; 148
     66e:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     672:	84 e0       	ldi	r24, 0x04	; 4
     674:	04 c0       	rjmp	.+8      	; 0x67e <TWI_write_4bytes+0xaa>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     676:	84 e9       	ldi	r24, 0x94	; 148
     678:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     67c:	80 e0       	ldi	r24, 0x00	; 0
}
     67e:	0f 90       	pop	r0
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	08 95       	ret

0000068e <TWI_write_5bytes>:

uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	1f 92       	push	r1
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	16 2f       	mov	r17, r22
     6a4:	f4 2e       	mov	r15, r20
     6a6:	d2 2e       	mov	r13, r18

  TWIStart();
     6a8:	89 83       	std	Y+1, r24	; 0x01
     6aa:	0e 94 b7 01 	call	0x36e	; 0x36e <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6ae:	90 91 71 00 	lds	r25, 0x0071
     6b2:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	98 30       	cpi	r25, 0x08	; 8
     6b8:	29 f0       	breq	.+10     	; 0x6c4 <TWI_write_5bytes+0x36>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6ba:	84 e9       	ldi	r24, 0x94	; 148
     6bc:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	43 c0       	rjmp	.+134    	; 0x74a <TWI_write_5bytes+0xbc>
  }
  TWIWrite(addr << 1);
     6c4:	88 0f       	add	r24, r24
     6c6:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6ca:	90 91 71 00 	lds	r25, 0x0071
     6ce:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     6d0:	98 31       	cpi	r25, 0x18	; 24
     6d2:	29 f0       	breq	.+10     	; 0x6de <TWI_write_5bytes+0x50>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6d4:	84 e9       	ldi	r24, 0x94	; 148
     6d6:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	36 c0       	rjmp	.+108    	; 0x74a <TWI_write_5bytes+0xbc>
  }
  TWIWrite(byte1);
     6de:	81 2f       	mov	r24, r17
     6e0:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6e4:	90 91 71 00 	lds	r25, 0x0071
     6e8:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     6ea:	98 32       	cpi	r25, 0x28	; 40
     6ec:	29 f0       	breq	.+10     	; 0x6f8 <TWI_write_5bytes+0x6a>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6ee:	84 e9       	ldi	r24, 0x94	; 148
     6f0:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	29 c0       	rjmp	.+82     	; 0x74a <TWI_write_5bytes+0xbc>
  }
  TWIWrite(byte2);
     6f8:	8f 2d       	mov	r24, r15
     6fa:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6fe:	90 91 71 00 	lds	r25, 0x0071
     702:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     704:	98 32       	cpi	r25, 0x28	; 40
     706:	c1 f4       	brne	.+48     	; 0x738 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     708:	8d 2d       	mov	r24, r13
     70a:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     70e:	90 91 71 00 	lds	r25, 0x0071
     712:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     714:	98 32       	cpi	r25, 0x28	; 40
     716:	81 f4       	brne	.+32     	; 0x738 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
     718:	80 2f       	mov	r24, r16
     71a:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     71e:	90 91 71 00 	lds	r25, 0x0071
     722:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
     724:	98 32       	cpi	r25, 0x28	; 40
     726:	41 f4       	brne	.+16     	; 0x738 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte5);
     728:	8e 2d       	mov	r24, r14
     72a:	0e 94 c3 01 	call	0x386	; 0x386 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     72e:	80 91 71 00 	lds	r24, 0x0071
     732:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte5);
  if (TWIGetStatus() != 0x28) {
     734:	88 32       	cpi	r24, 0x28	; 40
     736:	29 f0       	breq	.+10     	; 0x742 <TWI_write_5bytes+0xb4>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     738:	84 e9       	ldi	r24, 0x94	; 148
     73a:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte5);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     73e:	84 e0       	ldi	r24, 0x04	; 4
     740:	04 c0       	rjmp	.+8      	; 0x74a <TWI_write_5bytes+0xbc>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     742:	84 e9       	ldi	r24, 0x94	; 148
     744:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     748:	80 e0       	ldi	r24, 0x00	; 0
}
     74a:	0f 90       	pop	r0
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	08 95       	ret

0000075c <updateVolume>:

uint8_t updateVolume(uint8_t vol) {
     75c:	ef 92       	push	r14
     75e:	0f 93       	push	r16
  
  uint8_t addr, err;

  addr = 0x80; // Address for audio conf

  err = TWI_write_5bytes(fpga_addr, addr, 0x00, 0x00, 0x00, vol);
     760:	e8 2e       	mov	r14, r24
     762:	00 e0       	ldi	r16, 0x00	; 0
     764:	20 e0       	ldi	r18, 0x00	; 0
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	60 e8       	ldi	r22, 0x80	; 128
     76a:	83 e2       	ldi	r24, 0x23	; 35
     76c:	0e 94 47 03 	call	0x68e	; 0x68e <TWI_write_5bytes>
  if(err)
    return err;
  return 0x00;
}
     770:	0f 91       	pop	r16
     772:	ef 90       	pop	r14
     774:	08 95       	ret

00000776 <readClar>:

uint16_t readClar(void) {
  return (ADC);
     776:	84 b1       	in	r24, 0x04	; 4
     778:	95 b1       	in	r25, 0x05	; 5
}
     77a:	08 95       	ret

0000077c <updateRFFE>:

uint8_t updateRFFE(void) {
  uint8_t err;
  uint16_t rxatt;

  if (rx_att)
     77c:	40 91 c1 01 	lds	r20, 0x01C1
    rxatt = 0x0001;
  else
    rxatt = 0x0000;

  err = TWI_write_word(pll_addr,(pll_n & 0x0fff) | (tx << 15) | (bandf << 14) | (rxatt << 13));
     780:	80 91 aa 01 	lds	r24, 0x01AA
     784:	90 91 ab 01 	lds	r25, 0x01AB
     788:	60 91 c6 01 	lds	r22, 0x01C6
     78c:	70 91 c7 01 	lds	r23, 0x01C7
     790:	20 91 be 01 	lds	r18, 0x01BE
     794:	30 91 bf 01 	lds	r19, 0x01BF
     798:	77 27       	eor	r23, r23
     79a:	66 95       	lsr	r22
     79c:	77 95       	ror	r23
     79e:	66 27       	eor	r22, r22
     7a0:	9f 70       	andi	r25, 0x0F	; 15
     7a2:	68 2b       	or	r22, r24
     7a4:	79 2b       	or	r23, r25
     7a6:	30 e4       	ldi	r19, 0x40	; 64
     7a8:	23 9f       	mul	r18, r19
     7aa:	30 2d       	mov	r19, r0
     7ac:	22 27       	eor	r18, r18
     7ae:	11 24       	eor	r1, r1
     7b0:	62 2b       	or	r22, r18
     7b2:	73 2b       	or	r23, r19

uint8_t updateRFFE(void) {
  uint8_t err;
  uint16_t rxatt;

  if (rx_att)
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	41 11       	cpse	r20, r1
     7b8:	01 c0       	rjmp	.+2      	; 0x7bc <updateRFFE+0x40>
     7ba:	20 e0       	ldi	r18, 0x00	; 0
    rxatt = 0x0001;
  else
    rxatt = 0x0000;

  err = TWI_write_word(pll_addr,(pll_n & 0x0fff) | (tx << 15) | (bandf << 14) | (rxatt << 13));
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	92 2f       	mov	r25, r18
     7c2:	92 95       	swap	r25
     7c4:	99 0f       	add	r25, r25
     7c6:	90 7e       	andi	r25, 0xE0	; 224
     7c8:	68 2b       	or	r22, r24
     7ca:	79 2b       	or	r23, r25
     7cc:	82 e2       	ldi	r24, 0x22	; 34
     7ce:	0e 94 4f 02 	call	0x49e	; 0x49e <TWI_write_word>
  if (err)
     7d2:	88 23       	and	r24, r24
     7d4:	11 f0       	breq	.+4      	; 0x7da <updateRFFE+0x5e>
    return err+5;
     7d6:	8b 5f       	subi	r24, 0xFB	; 251
     7d8:	08 95       	ret
  return 0x00;
     7da:	80 e0       	ldi	r24, 0x00	; 0
} 
     7dc:	08 95       	ret

000007de <updateFreq>:
  
uint8_t updateFreq(double freq, int8_t clar, uint8_t all_update) {
     7de:	4f 92       	push	r4
     7e0:	5f 92       	push	r5
     7e2:	6f 92       	push	r6
     7e4:	7f 92       	push	r7
     7e6:	af 92       	push	r10
     7e8:	bf 92       	push	r11
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	1f 92       	push	r1
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	14 2f       	mov	r17, r20
  //   char buffer[60];
  uint8_t byte1, byte2, byte3, byte4, byte5, err;
  uint16_t pll_n_ = pll_n;
     802:	a0 90 aa 01 	lds	r10, 0x01AA
     806:	b0 90 ab 01 	lds	r11, 0x01AB
    else
      freq_lo = (double)((freq_MHz - 1152)*1000 + 21400 + freq_kHz);
    bandf = 1;
    }*/

  if (all_update) {
     80a:	22 23       	and	r18, r18
     80c:	09 f4       	brne	.+2      	; 0x810 <updateFreq+0x32>
     80e:	ba c0       	rjmp	.+372    	; 0x984 <updateFreq+0x1a6>
    freq_lo = freq + (double)21400;
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e3       	ldi	r19, 0x30	; 48
     814:	47 ea       	ldi	r20, 0xA7	; 167
     816:	56 e4       	ldi	r21, 0x46	; 70
     818:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__addsf3>
     81c:	6b 01       	movw	r12, r22
     81e:	7c 01       	movw	r14, r24
    bandf = 1;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	90 93 bf 01 	sts	0x01BF, r25
     828:	80 93 be 01 	sts	0x01BE, r24

    if (mode == USB) {
     82c:	80 91 c5 01 	lds	r24, 0x01C5
     830:	83 30       	cpi	r24, 0x03	; 3
     832:	29 f4       	brne	.+10     	; 0x83e <updateFreq+0x60>
      freq_lo += (double)1.8;
     834:	26 e6       	ldi	r18, 0x66	; 102
     836:	36 e6       	ldi	r19, 0x66	; 102
     838:	46 ee       	ldi	r20, 0xE6	; 230
     83a:	5f e3       	ldi	r21, 0x3F	; 63
     83c:	08 c0       	rjmp	.+16     	; 0x84e <updateFreq+0x70>
    }
    else if (mode == CW) {
     83e:	80 91 c5 01 	lds	r24, 0x01C5
     842:	85 30       	cpi	r24, 0x05	; 5
     844:	49 f4       	brne	.+18     	; 0x858 <updateFreq+0x7a>
      freq_lo += (double)0.9;
     846:	26 e6       	ldi	r18, 0x66	; 102
     848:	36 e6       	ldi	r19, 0x66	; 102
     84a:	46 e6       	ldi	r20, 0x66	; 102
     84c:	5f e3       	ldi	r21, 0x3F	; 63
     84e:	c7 01       	movw	r24, r14
     850:	b6 01       	movw	r22, r12
     852:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__addsf3>
     856:	10 c0       	rjmp	.+32     	; 0x878 <updateFreq+0x9a>
    }
    else if (mode == CWN) {
     858:	80 91 c5 01 	lds	r24, 0x01C5
     85c:	86 30       	cpi	r24, 0x06	; 6
     85e:	71 f0       	breq	.+28     	; 0x87c <updateFreq+0x9e>
      //freq_lo += (double)0.9;
    }
    else if (mode == LSB ) {
     860:	80 91 c5 01 	lds	r24, 0x01C5
     864:	81 30       	cpi	r24, 0x01	; 1
     866:	51 f4       	brne	.+20     	; 0x87c <updateFreq+0x9e>
      freq_lo -= (double)1.8;
     868:	26 e6       	ldi	r18, 0x66	; 102
     86a:	36 e6       	ldi	r19, 0x66	; 102
     86c:	46 ee       	ldi	r20, 0xE6	; 230
     86e:	5f e3       	ldi	r21, 0x3F	; 63
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__subsf3>
     878:	6b 01       	movw	r12, r22
     87a:	7c 01       	movw	r14, r24
    }

    pll_n_ = (uint16_t)lround(freq_lo/(double)100);  // 100 kHz step
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	48 ec       	ldi	r20, 0xC8	; 200
     882:	52 e4       	ldi	r21, 0x42	; 66
     884:	c7 01       	movw	r24, r14
     886:	b6 01       	movw	r22, r12
     888:	0e 94 47 10 	call	0x208e	; 0x208e <__divsf3>
     88c:	0e 94 4d 12 	call	0x249a	; 0x249a <lround>
     890:	2b 01       	movw	r4, r22
     892:	3c 01       	movw	r6, r24
     894:	5b 01       	movw	r10, r22
    ref_freq = 170*freq_lo/pll_n_;  // 170 ref divider value
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	4a e2       	ldi	r20, 0x2A	; 42
     89c:	53 e4       	ldi	r21, 0x43	; 67
     89e:	c7 01       	movw	r24, r14
     8a0:	b6 01       	movw	r22, r12
     8a2:	0e 94 80 12 	call	0x2500	; 0x2500 <__mulsf3>
     8a6:	6b 01       	movw	r12, r22
     8a8:	7c 01       	movw	r14, r24
     8aa:	b2 01       	movw	r22, r4
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 ef 10 	call	0x21de	; 0x21de <__floatunsisf>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 47 10 	call	0x208e	; 0x208e <__divsf3>
    ftw = ref_freq*(double)279.62026666667; // 20MHz,25bit: 279.620266667 19.2MHz,22bit: 36.4088889
     8c0:	25 e6       	ldi	r18, 0x65	; 101
     8c2:	3f ec       	ldi	r19, 0xCF	; 207
     8c4:	4b e8       	ldi	r20, 0x8B	; 139
     8c6:	53 e4       	ldi	r21, 0x43	; 67
     8c8:	0e 94 80 12 	call	0x2500	; 0x2500 <__mulsf3>
     8cc:	6b 01       	movw	r12, r22
     8ce:	7c 01       	movw	r14, r24
    ftw_toptop = floor(ftw/(double)16777216);
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e8       	ldi	r20, 0x80	; 128
     8d6:	53 e3       	ldi	r21, 0x33	; 51
     8d8:	0e 94 80 12 	call	0x2500	; 0x2500 <__mulsf3>
     8dc:	0e 94 2c 11 	call	0x2258	; 0x2258 <floor>
     8e0:	60 93 b8 01 	sts	0x01B8, r22
     8e4:	70 93 b9 01 	sts	0x01B9, r23
     8e8:	80 93 ba 01 	sts	0x01BA, r24
     8ec:	90 93 bb 01 	sts	0x01BB, r25
    ftw_topbot = floor((ftw-ftw_toptop*(double)16777216)/(double)65536);
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e8       	ldi	r20, 0x80	; 128
     8f6:	5b e4       	ldi	r21, 0x4B	; 75
     8f8:	0e 94 80 12 	call	0x2500	; 0x2500 <__mulsf3>
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	c7 01       	movw	r24, r14
     902:	b6 01       	movw	r22, r12
     904:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__subsf3>
     908:	2b 01       	movw	r4, r22
     90a:	3c 01       	movw	r6, r24
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	40 e8       	ldi	r20, 0x80	; 128
     912:	57 e3       	ldi	r21, 0x37	; 55
     914:	0e 94 80 12 	call	0x2500	; 0x2500 <__mulsf3>
     918:	0e 94 2c 11 	call	0x2258	; 0x2258 <floor>
     91c:	60 93 b4 01 	sts	0x01B4, r22
     920:	70 93 b5 01 	sts	0x01B5, r23
     924:	80 93 b6 01 	sts	0x01B6, r24
     928:	90 93 b7 01 	sts	0x01B7, r25
    ftw_bottop = floor((ftw-ftw_toptop*(double)16777216-ftw_topbot*(double)65536)/(double)256);
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e8       	ldi	r20, 0x80	; 128
     932:	57 e4       	ldi	r21, 0x47	; 71
     934:	0e 94 80 12 	call	0x2500	; 0x2500 <__mulsf3>
     938:	9b 01       	movw	r18, r22
     93a:	ac 01       	movw	r20, r24
     93c:	c3 01       	movw	r24, r6
     93e:	b2 01       	movw	r22, r4
     940:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__subsf3>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e8       	ldi	r20, 0x80	; 128
     94a:	5b e3       	ldi	r21, 0x3B	; 59
     94c:	0e 94 80 12 	call	0x2500	; 0x2500 <__mulsf3>
     950:	0e 94 2c 11 	call	0x2258	; 0x2258 <floor>
     954:	60 93 b0 01 	sts	0x01B0, r22
     958:	70 93 b1 01 	sts	0x01B1, r23
     95c:	80 93 b2 01 	sts	0x01B2, r24
     960:	90 93 b3 01 	sts	0x01B3, r25
    ftw_botbot = fmod(ftw,256);
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e8       	ldi	r20, 0x80	; 128
     96a:	53 e4       	ldi	r21, 0x43	; 67
     96c:	c7 01       	movw	r24, r14
     96e:	b6 01       	movw	r22, r12
     970:	0e 94 4e 11 	call	0x229c	; 0x229c <fmod>
     974:	60 93 ac 01 	sts	0x01AC, r22
     978:	70 93 ad 01 	sts	0x01AD, r23
     97c:	80 93 ae 01 	sts	0x01AE, r24
     980:	90 93 af 01 	sts	0x01AF, r25

  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
  byte5 = (uint8_t)ftw_botbot;
     984:	60 91 ac 01 	lds	r22, 0x01AC
     988:	70 91 ad 01 	lds	r23, 0x01AD
     98c:	80 91 ae 01 	lds	r24, 0x01AE
     990:	90 91 af 01 	lds	r25, 0x01AF
     994:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     998:	e6 2e       	mov	r14, r22
  clar = -(clar+1);  // For arch with LO above RF freq

  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
     99a:	60 91 b0 01 	lds	r22, 0x01B0
     99e:	70 91 b1 01 	lds	r23, 0x01B1
     9a2:	80 91 b2 01 	lds	r24, 0x01B2
     9a6:	90 91 b3 01 	lds	r25, 0x01B3
     9aa:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     9ae:	06 2f       	mov	r16, r22

  clar = -(clar+1);  // For arch with LO above RF freq

  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
  byte3 = (uint8_t)ftw_topbot;
     9b0:	60 91 b4 01 	lds	r22, 0x01B4
     9b4:	70 91 b5 01 	lds	r23, 0x01B5
     9b8:	80 91 b6 01 	lds	r24, 0x01B6
     9bc:	90 91 b7 01 	lds	r25, 0x01B7
     9c0:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     9c4:	26 2f       	mov	r18, r22
    ftw_topbot = floor((ftw-ftw_toptop*(double)16777216)/(double)65536);
    ftw_bottop = floor((ftw-ftw_toptop*(double)16777216-ftw_topbot*(double)65536)/(double)256);
    ftw_botbot = fmod(ftw,256);
  }

  clar = -(clar+1);  // For arch with LO above RF freq
     9c6:	10 95       	com	r17

  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
     9c8:	1e 7f       	andi	r17, 0xFE	; 254
     9ca:	60 91 b8 01 	lds	r22, 0x01B8
     9ce:	70 91 b9 01 	lds	r23, 0x01B9
     9d2:	80 91 ba 01 	lds	r24, 0x01BA
     9d6:	90 91 bb 01 	lds	r25, 0x01BB
     9da:	29 83       	std	Y+1, r18	; 0x01
     9dc:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
     9e0:	41 2f       	mov	r20, r17
     9e2:	46 2b       	or	r20, r22
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
  byte5 = (uint8_t)ftw_botbot;

  err = TWI_write_5bytes(fpga_addr, byte1, byte2, byte3, byte4, byte5);
     9e4:	29 81       	ldd	r18, Y+1	; 0x01
     9e6:	60 ec       	ldi	r22, 0xC0	; 192
     9e8:	83 e2       	ldi	r24, 0x23	; 35
     9ea:	0e 94 47 03 	call	0x68e	; 0x68e <TWI_write_5bytes>
  if(err)
     9ee:	81 11       	cpse	r24, r1
     9f0:	16 c0       	rjmp	.+44     	; 0xa1e <updateFreq+0x240>
     9f2:	80 e1       	ldi	r24, 0x10	; 16
     9f4:	8a 95       	dec	r24
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <updateFreq+0x216>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <updateFreq+0x21c>
    return err;
 
  _delay_us(50);
  if (pll_n != pll_n_) {
     9fa:	80 91 aa 01 	lds	r24, 0x01AA
     9fe:	90 91 ab 01 	lds	r25, 0x01AB
     a02:	8a 15       	cp	r24, r10
     a04:	9b 05       	cpc	r25, r11
     a06:	11 f4       	brne	.+4      	; 0xa0c <updateFreq+0x22e>
    pll_n = pll_n_;
    err = updateRFFE();
    if (err)
      return err+5;
  }
  return 0x00;
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	09 c0       	rjmp	.+18     	; 0xa1e <updateFreq+0x240>
  if(err)
    return err;
 
  _delay_us(50);
  if (pll_n != pll_n_) {
    pll_n = pll_n_;
     a0c:	b0 92 ab 01 	sts	0x01AB, r11
     a10:	a0 92 aa 01 	sts	0x01AA, r10
    err = updateRFFE();
     a14:	0e 94 be 03 	call	0x77c	; 0x77c <updateRFFE>
    if (err)
     a18:	88 23       	and	r24, r24
     a1a:	b1 f3       	breq	.-20     	; 0xa08 <updateFreq+0x22a>
      return err+5;
     a1c:	8b 5f       	subi	r24, 0xFB	; 251
  }
  return 0x00;
}
     a1e:	0f 90       	pop	r0
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	df 90       	pop	r13
     a2e:	cf 90       	pop	r12
     a30:	bf 90       	pop	r11
     a32:	af 90       	pop	r10
     a34:	7f 90       	pop	r7
     a36:	6f 90       	pop	r6
     a38:	5f 90       	pop	r5
     a3a:	4f 90       	pop	r4
     a3c:	08 95       	ret

00000a3e <updateSettings>:

uint8_t updateSettings (void) {
     a3e:	ef 92       	push	r14
     a40:	0f 93       	push	r16

  uint8_t err;
  uint8_t byte1, byte2, byte3, byte4, byte5;

  switch (mode) {  
     a42:	90 91 c5 01 	lds	r25, 0x01C5
     a46:	95 30       	cpi	r25, 0x05	; 5
     a48:	81 f1       	breq	.+96     	; 0xaaa <updateSettings+0x6c>
     a4a:	28 f4       	brcc	.+10     	; 0xa56 <updateSettings+0x18>
     a4c:	91 30       	cpi	r25, 0x01	; 1
     a4e:	e1 f0       	breq	.+56     	; 0xa88 <updateSettings+0x4a>
     a50:	93 30       	cpi	r25, 0x03	; 3
     a52:	59 f1       	breq	.+86     	; 0xaaa <updateSettings+0x6c>
     a54:	5c c0       	rjmp	.+184    	; 0xb0e <updateSettings+0xd0>
     a56:	98 30       	cpi	r25, 0x08	; 8
     a58:	c9 f1       	breq	.+114    	; 0xacc <updateSettings+0x8e>
     a5a:	9a 30       	cpi	r25, 0x0A	; 10
     a5c:	09 f4       	brne	.+2      	; 0xa60 <updateSettings+0x22>
     a5e:	47 c0       	rjmp	.+142    	; 0xaee <updateSettings+0xb0>
     a60:	96 30       	cpi	r25, 0x06	; 6
     a62:	09 f0       	breq	.+2      	; 0xa66 <updateSettings+0x28>
     a64:	54 c0       	rjmp	.+168    	; 0xb0e <updateSettings+0xd0>
    byte4 = 0x00;
    byte5 = 0x00;
    break;
  case CWN:
    byte1 = 0b01100000; // Set narrow USB (LO+)
    byte2 = (tx_att << 6)|(rx_att << 3)|0x01;
     a66:	80 91 c8 01 	lds	r24, 0x01C8
     a6a:	90 91 c1 01 	lds	r25, 0x01C1
     a6e:	20 e4       	ldi	r18, 0x40	; 64
     a70:	82 9f       	mul	r24, r18
     a72:	a0 01       	movw	r20, r0
     a74:	11 24       	eor	r1, r1
     a76:	28 e0       	ldi	r18, 0x08	; 8
     a78:	92 9f       	mul	r25, r18
     a7a:	c0 01       	movw	r24, r0
     a7c:	11 24       	eor	r1, r1
     a7e:	84 2b       	or	r24, r20
     a80:	48 2f       	mov	r20, r24
     a82:	41 60       	ori	r20, 0x01	; 1
    byte3 = 0x08;
    byte4 = 0x00;
    byte5 = 0x00;
    break;
  case CWN:
    byte1 = 0b01100000; // Set narrow USB (LO+)
     a84:	60 e6       	ldi	r22, 0x60	; 96
    byte2 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte3 = 0x08;
    byte4 = 0x00;
    byte5 = 0x00;
    break;
     a86:	43 c0       	rjmp	.+134    	; 0xb0e <updateSettings+0xd0>
  uint8_t byte1, byte2, byte3, byte4, byte5;

  switch (mode) {  
  case LSB:
    byte1 = 0b01111000; // Set USB (LO+)
    byte2 = (tx_att << 6)|(rx_att << 3)|0x01;
     a88:	80 91 c8 01 	lds	r24, 0x01C8
     a8c:	90 91 c1 01 	lds	r25, 0x01C1
     a90:	20 e4       	ldi	r18, 0x40	; 64
     a92:	82 9f       	mul	r24, r18
     a94:	a0 01       	movw	r20, r0
     a96:	11 24       	eor	r1, r1
     a98:	28 e0       	ldi	r18, 0x08	; 8
     a9a:	92 9f       	mul	r25, r18
     a9c:	c0 01       	movw	r24, r0
     a9e:	11 24       	eor	r1, r1
     aa0:	84 2b       	or	r24, r20
     aa2:	48 2f       	mov	r20, r24
     aa4:	41 60       	ori	r20, 0x01	; 1
  uint8_t err;
  uint8_t byte1, byte2, byte3, byte4, byte5;

  switch (mode) {  
  case LSB:
    byte1 = 0b01111000; // Set USB (LO+)
     aa6:	68 e7       	ldi	r22, 0x78	; 120
    byte2 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte3 = 0x08;
    byte4 = 0x00;
    byte5 = 0x00;
    break;
     aa8:	32 c0       	rjmp	.+100    	; 0xb0e <updateSettings+0xd0>
    byte4 = 0x00;
    byte5 = 0x00;
    break;
  case CW:
    byte1 = 0b01110000; // Set USB (LO+) 
    byte2 = (tx_att << 6)|(rx_att << 3)|0x01;
     aaa:	80 91 c8 01 	lds	r24, 0x01C8
     aae:	90 91 c1 01 	lds	r25, 0x01C1
     ab2:	20 e4       	ldi	r18, 0x40	; 64
     ab4:	82 9f       	mul	r24, r18
     ab6:	a0 01       	movw	r20, r0
     ab8:	11 24       	eor	r1, r1
     aba:	28 e0       	ldi	r18, 0x08	; 8
     abc:	92 9f       	mul	r25, r18
     abe:	c0 01       	movw	r24, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	84 2b       	or	r24, r20
     ac4:	48 2f       	mov	r20, r24
     ac6:	41 60       	ori	r20, 0x01	; 1
    byte3 = 0x08;
    byte4 = 0x00;
    byte5 = 0x00;
    break;
  case CW:
    byte1 = 0b01110000; // Set USB (LO+) 
     ac8:	60 e7       	ldi	r22, 0x70	; 112
    byte2 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte3 = 0x08;
    byte4 = 0x00;
    byte5 = 0x00;
    break;
     aca:	21 c0       	rjmp	.+66     	; 0xb0e <updateSettings+0xd0>
    byte4 = 0x00;
    byte5 = 0x00;
    break;
  case AM:
    byte1 = 0b01000000;
    byte2 = (tx_att << 6)|(rx_att << 3)|0x01;
     acc:	80 91 c8 01 	lds	r24, 0x01C8
     ad0:	90 91 c1 01 	lds	r25, 0x01C1
     ad4:	20 e4       	ldi	r18, 0x40	; 64
     ad6:	82 9f       	mul	r24, r18
     ad8:	a0 01       	movw	r20, r0
     ada:	11 24       	eor	r1, r1
     adc:	28 e0       	ldi	r18, 0x08	; 8
     ade:	92 9f       	mul	r25, r18
     ae0:	c0 01       	movw	r24, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	84 2b       	or	r24, r20
     ae6:	48 2f       	mov	r20, r24
     ae8:	41 60       	ori	r20, 0x01	; 1
    byte3 = 0x08;
    byte4 = 0x00;
    byte5 = 0x00;
    break;
  case AM:
    byte1 = 0b01000000;
     aea:	60 e4       	ldi	r22, 0x40	; 64
    byte2 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte3 = 0x08;
    byte4 = 0x00;
    byte5 = 0x00;
    break;
     aec:	10 c0       	rjmp	.+32     	; 0xb0e <updateSettings+0xd0>
  case FM:
    byte1 = 0b01000001;
    byte2 = (tx_att << 6)|(rx_att << 3)|0x01;
     aee:	80 91 c8 01 	lds	r24, 0x01C8
     af2:	90 91 c1 01 	lds	r25, 0x01C1
     af6:	20 e4       	ldi	r18, 0x40	; 64
     af8:	82 9f       	mul	r24, r18
     afa:	a0 01       	movw	r20, r0
     afc:	11 24       	eor	r1, r1
     afe:	28 e0       	ldi	r18, 0x08	; 8
     b00:	92 9f       	mul	r25, r18
     b02:	c0 01       	movw	r24, r0
     b04:	11 24       	eor	r1, r1
     b06:	84 2b       	or	r24, r20
     b08:	48 2f       	mov	r20, r24
     b0a:	41 60       	ori	r20, 0x01	; 1
    byte3 = 0x08;
    byte4 = 0x00;
    byte5 = 0x00;
    break;
  case FM:
    byte1 = 0b01000001;
     b0c:	61 e4       	ldi	r22, 0x41	; 65
    byte4 = 0x00;
    byte5 = 0x00;
  }
  

  err = TWI_write_5bytes(fpga_addr, byte1, byte2, byte3, byte4, byte5);
     b0e:	e1 2c       	mov	r14, r1
     b10:	00 e0       	ldi	r16, 0x00	; 0
     b12:	28 e0       	ldi	r18, 0x08	; 8
     b14:	83 e2       	ldi	r24, 0x23	; 35
     b16:	0e 94 47 03 	call	0x68e	; 0x68e <TWI_write_5bytes>
  if (err)
    return err;

  return 0x00;

}
     b1a:	0f 91       	pop	r16
     b1c:	ef 90       	pop	r14
     b1e:	08 95       	ret

00000b20 <adcInit>:

void adcInit(void) {
  ADCSRA = (1 << ADEN) | (1 << ADFR) | (1 << ADPS2) | (1 << ADPS1); // Free run, /64 -> 77 kHz
     b20:	86 ea       	ldi	r24, 0xA6	; 166
     b22:	86 b9       	out	0x06, r24	; 6
  ADMUX = 0x43; // ADC3, AVCC ref
     b24:	83 e4       	ldi	r24, 0x43	; 67
     b26:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= (1 << ADSC); // Start conversion
     b28:	36 9a       	sbi	0x06, 6	; 6
     b2a:	08 95       	ret

00000b2c <Timer0Init>:

}

void Timer0Init(void) {

  TCCR0 = 0x0f; // CTC mode, 1024 prescaler
     b2c:	8f e0       	ldi	r24, 0x0F	; 15
     b2e:	83 bf       	out	0x33, r24	; 51
  OCR0 = (uint8_t)10; // 1000000/(1024*10) = 100 Hz, 10ms
     b30:	8a e0       	ldi	r24, 0x0A	; 10
     b32:	81 bf       	out	0x31, r24	; 49
  TIMSK |= (1 << OCIE0); // Interrupt at compare match
     b34:	87 b7       	in	r24, 0x37	; 55
     b36:	82 60       	ori	r24, 0x02	; 2
     b38:	87 bf       	out	0x37, r24	; 55
     b3a:	08 95       	ret

00000b3c <Timer1Init>:
}

void Timer1Init(void) {

  TCCR1A = 0x00;  
     b3c:	1f bc       	out	0x2f, r1	; 47
  TCCR1B = 0x0b; // CTC mode, 64 prescaler
     b3e:	8b e0       	ldi	r24, 0x0B	; 11
     b40:	8e bd       	out	0x2e, r24	; 46
  OCR1A = (uint16_t)1563; // 1000000/(64*1563) = 10 Hz, 100ms
     b42:	8b e1       	ldi	r24, 0x1B	; 27
     b44:	96 e0       	ldi	r25, 0x06	; 6
     b46:	9b bd       	out	0x2b, r25	; 43
     b48:	8a bd       	out	0x2a, r24	; 42
  TIMSK |= (1 << OCIE1A); // Interrupt at compare match
     b4a:	87 b7       	in	r24, 0x37	; 55
     b4c:	80 61       	ori	r24, 0x10	; 16
     b4e:	87 bf       	out	0x37, r24	; 55
     b50:	08 95       	ret

00000b52 <lcd_e_port_low>:
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     b52:	e5 e6       	ldi	r30, 0x65	; 101
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8d 7f       	andi	r24, 0xFD	; 253
     b5a:	80 83       	st	Z, r24
     b5c:	08 95       	ret

00000b5e <lcd_e_port_high>:
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     b5e:	e5 e6       	ldi	r30, 0x65	; 101
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	82 60       	ori	r24, 0x02	; 2
     b66:	80 83       	st	Z, r24
     b68:	08 95       	ret

00000b6a <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if RW_LINE_IMPLEMENTED==1
static uint8_t lcd_read(uint8_t rs)
  {
     b6a:	af 92       	push	r10
     b6c:	bf 92       	push	r11
     b6e:	cf 92       	push	r12
     b70:	df 92       	push	r13
     b72:	ef 92       	push	r14
     b74:	ff 92       	push	r15
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	1f 92       	push	r1
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    
    #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
    if (rs)
     b84:	88 23       	and	r24, r24
     b86:	21 f0       	breq	.+8      	; 0xb90 <lcd_read+0x26>
      lcd_waitbusy();
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	0e 94 2b 06 	call	0xc56	; 0xc56 <lcd_waitbusy>
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
      if (PrevCmdInvolvedAddressCounter)
     b90:	90 91 bc 01 	lds	r25, 0x01BC
     b94:	99 23       	and	r25, r25
     b96:	29 f0       	breq	.+10     	; 0xba2 <lcd_read+0x38>
        {
          Delay_us(5);
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <lcd_read+0x30>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <lcd_read+0x32>
     b9c:	00 00       	nop
          PrevCmdInvolvedAddressCounter=0;
     b9e:	10 92 bc 01 	sts	0x01BC, r1
        }
    #endif

    if (rs)
     ba2:	88 23       	and	r24, r24
     ba4:	29 f0       	breq	.+10     	; 0xbb0 <lcd_read+0x46>
      {
        lcd_rs_port_high();                             // RS=1: Read Data
     ba6:	97 9a       	sbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 bc 01 	sts	0x01BC, r24
     bae:	01 c0       	rjmp	.+2      	; 0xbb2 <lcd_read+0x48>
        #endif
      }
    else lcd_rs_port_low();                           // RS=0: Read Busy Flag
     bb0:	97 98       	cbi	0x12, 7	; 18

    
    lcd_rw_port_high();                               // RW=1: Read Mode
     bb2:	80 91 65 00 	lds	r24, 0x0065
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	80 93 65 00 	sts	0x0065, r24
      lcd_db7_port_high();                            // Pins High (Inactive)
      lcd_db6_port_high();
      lcd_db5_port_high();
      lcd_db4_port_high();
    #else //using 8-Bit-Mode
      lcd_db7_ddr_low();                              // Configure Data Pins as Input
     bbc:	a7 98       	cbi	0x14, 7	; 20
      lcd_db6_ddr_low();
     bbe:	a6 98       	cbi	0x14, 6	; 20
      lcd_db5_ddr_low();
     bc0:	a5 98       	cbi	0x14, 5	; 20
      lcd_db4_ddr_low();
     bc2:	a4 98       	cbi	0x14, 4	; 20
      lcd_db3_ddr_low();
     bc4:	a3 98       	cbi	0x14, 3	; 20
      lcd_db2_ddr_low();
     bc6:	a2 98       	cbi	0x14, 2	; 20
      lcd_db1_ddr_low();
     bc8:	a1 98       	cbi	0x14, 1	; 20
      lcd_db0_ddr_low();
     bca:	a0 98       	cbi	0x14, 0	; 20

      lcd_e_port_high();
     bcc:	0e 94 af 05 	call	0xb5e	; 0xb5e <lcd_e_port_high>
      Delay_ns(500);
     bd0:	00 00       	nop

      data=lcd_db7_pin_get() << 7 | lcd_db6_pin_get() << 6 |
     bd2:	e3 b2       	in	r14, 0x13	; 19
     bd4:	c3 b2       	in	r12, 0x13	; 19
           lcd_db5_pin_get() << 5 | lcd_db4_pin_get() << 4 |
     bd6:	f3 b2       	in	r15, 0x13	; 19
     bd8:	03 b3       	in	r16, 0x13	; 19
           lcd_db3_pin_get() << 3 | lcd_db2_pin_get() << 2 |
     bda:	13 b3       	in	r17, 0x13	; 19
     bdc:	b3 b2       	in	r11, 0x13	; 19
           lcd_db1_pin_get() << 1 | lcd_db0_pin_get();
     bde:	a3 b2       	in	r10, 0x13	; 19
     be0:	d3 b2       	in	r13, 0x13	; 19

      lcd_e_port_low();
     be2:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_e_port_low>

      lcd_db7_ddr_high();                             // Configure Data Pins as Output
     be6:	a7 9a       	sbi	0x14, 7	; 20
      lcd_db6_ddr_high();
     be8:	a6 9a       	sbi	0x14, 6	; 20
      lcd_db5_ddr_high();
     bea:	a5 9a       	sbi	0x14, 5	; 20
      lcd_db4_ddr_high();
     bec:	a4 9a       	sbi	0x14, 4	; 20
      lcd_db3_ddr_high();
     bee:	a3 9a       	sbi	0x14, 3	; 20
      lcd_db2_ddr_high();
     bf0:	a2 9a       	sbi	0x14, 2	; 20
      lcd_db1_ddr_high();
     bf2:	a1 9a       	sbi	0x14, 1	; 20
      lcd_db0_ddr_high();
     bf4:	a0 9a       	sbi	0x14, 0	; 20

      lcd_db7_port_high();                            // Pins High (Inactive)
     bf6:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
     bf8:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
     bfa:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
     bfc:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db3_port_high();
     bfe:	ab 9a       	sbi	0x15, 3	; 21
      lcd_db2_port_high();
     c00:	aa 9a       	sbi	0x15, 2	; 21
      lcd_db1_port_high();
     c02:	a9 9a       	sbi	0x15, 1	; 21
      lcd_db0_port_high();
     c04:	a8 9a       	sbi	0x15, 0	; 21
    #endif
    
    lcd_rw_port_low();
     c06:	80 91 65 00 	lds	r24, 0x0065
     c0a:	8e 7f       	andi	r24, 0xFE	; 254
     c0c:	80 93 65 00 	sts	0x0065, r24
      lcd_db0_ddr_low();

      lcd_e_port_high();
      Delay_ns(500);

      data=lcd_db7_pin_get() << 7 | lcd_db6_pin_get() << 6 |
     c10:	8c 2d       	mov	r24, r12
     c12:	80 74       	andi	r24, 0x40	; 64
     c14:	9e 2d       	mov	r25, r14
     c16:	90 78       	andi	r25, 0x80	; 128
     c18:	e8 2e       	mov	r14, r24
     c1a:	e9 2a       	or	r14, r25
     c1c:	9f 2d       	mov	r25, r15
     c1e:	90 72       	andi	r25, 0x20	; 32
     c20:	fe 2c       	mov	r15, r14
     c22:	f9 2a       	or	r15, r25
     c24:	00 71       	andi	r16, 0x10	; 16
     c26:	0f 29       	or	r16, r15
     c28:	18 70       	andi	r17, 0x08	; 8
     c2a:	10 2b       	or	r17, r16
     c2c:	8b 2d       	mov	r24, r11
     c2e:	84 70       	andi	r24, 0x04	; 4
     c30:	81 2b       	or	r24, r17
     c32:	9a 2d       	mov	r25, r10
     c34:	92 70       	andi	r25, 0x02	; 2
     c36:	98 2b       	or	r25, r24
           lcd_db5_pin_get() << 5 | lcd_db4_pin_get() << 4 |
           lcd_db3_pin_get() << 3 | lcd_db2_pin_get() << 2 |
           lcd_db1_pin_get() << 1 | lcd_db0_pin_get();
     c38:	8d 2d       	mov	r24, r13
     c3a:	81 70       	andi	r24, 0x01	; 1
    if (rs)
      Delay_us(40);
    else Delay_us(1);
    #endif
    return data;
  }
     c3c:	89 2b       	or	r24, r25
     c3e:	0f 90       	pop	r0
     c40:	df 91       	pop	r29
     c42:	cf 91       	pop	r28
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	cf 90       	pop	r12
     c50:	bf 90       	pop	r11
     c52:	af 90       	pop	r10
     c54:	08 95       	ret

00000c56 <lcd_waitbusy>:
*************************************************************************/
#if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
static uint8_t lcd_read(uint8_t rs);

static void lcd_waitbusy(void)
  {
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
    register uint8_t c;
    unsigned int ul1=0;

    while ( ((c=lcd_read(0)) & (1<<LCD_BUSY)) && ul1<((F_CPU/16384>=16)?F_CPU/16384:16))     // Wait Until Busy Flag is Cleared
     c5a:	ce e3       	ldi	r28, 0x3E	; 62
     c5c:	d0 e0       	ldi	r29, 0x00	; 0
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	0e 94 b5 05 	call	0xb6a	; 0xb6a <lcd_read>
     c64:	87 ff       	sbrs	r24, 7
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <lcd_waitbusy+0x16>
     c68:	21 97       	sbiw	r28, 0x01	; 1
     c6a:	c9 f7       	brne	.-14     	; 0xc5e <lcd_waitbusy+0x8>
      ul1++;
  }
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <lcd_write>:
          rs     1: write data
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs)
  {
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	00 d0       	rcall	.+0      	; 0xc78 <lcd_write+0x6>
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
    #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
      lcd_waitbusy();
     c7c:	6a 83       	std	Y+2, r22	; 0x02
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	0e 94 2b 06 	call	0xc56	; 0xc56 <lcd_waitbusy>
      if (PrevCmdInvolvedAddressCounter)
     c84:	90 91 bc 01 	lds	r25, 0x01BC
     c88:	6a 81       	ldd	r22, Y+2	; 0x02
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	99 23       	and	r25, r25
     c8e:	29 f0       	breq	.+10     	; 0xc9a <lcd_write+0x28>
        {
          Delay_us(5);
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <lcd_write+0x20>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <lcd_write+0x22>
     c94:	00 00       	nop
          PrevCmdInvolvedAddressCounter=0;
     c96:	10 92 bc 01 	sts	0x01BC, r1
        }
    #endif

    if (rs)
     c9a:	66 23       	and	r22, r22
     c9c:	29 f0       	breq	.+10     	; 0xca8 <lcd_write+0x36>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
     c9e:	97 9a       	sbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=1;
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	90 93 bc 01 	sts	0x01BC, r25
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <lcd_write+0x3c>
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
     ca8:	97 98       	cbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=0;
     caa:	10 92 bc 01 	sts	0x01BC, r1
      lcd_db6_port_high();
      lcd_db5_port_high();
      lcd_db4_port_high();

    #else //using 8-Bit_Mode
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
     cae:	87 ff       	sbrs	r24, 7
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <lcd_write+0x44>
     cb2:	af 9a       	sbi	0x15, 7	; 21
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <lcd_write+0x46>
     cb6:	af 98       	cbi	0x15, 7	; 21
      lcd_db6_port_set(data&_BV(6));
     cb8:	86 ff       	sbrs	r24, 6
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <lcd_write+0x4e>
     cbc:	ae 9a       	sbi	0x15, 6	; 21
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <lcd_write+0x50>
     cc0:	ae 98       	cbi	0x15, 6	; 21
      lcd_db5_port_set(data&_BV(5));
     cc2:	85 ff       	sbrs	r24, 5
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <lcd_write+0x58>
     cc6:	ad 9a       	sbi	0x15, 5	; 21
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <lcd_write+0x5a>
     cca:	ad 98       	cbi	0x15, 5	; 21
      lcd_db4_port_set(data&_BV(4));
     ccc:	84 ff       	sbrs	r24, 4
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <lcd_write+0x62>
     cd0:	ac 9a       	sbi	0x15, 4	; 21
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <lcd_write+0x64>
     cd4:	ac 98       	cbi	0x15, 4	; 21
      lcd_db3_port_set(data&_BV(3));                  //Output High Nibble
     cd6:	83 ff       	sbrs	r24, 3
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <lcd_write+0x6c>
     cda:	ab 9a       	sbi	0x15, 3	; 21
     cdc:	01 c0       	rjmp	.+2      	; 0xce0 <lcd_write+0x6e>
     cde:	ab 98       	cbi	0x15, 3	; 21
      lcd_db2_port_set(data&_BV(2));
     ce0:	82 ff       	sbrs	r24, 2
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <lcd_write+0x76>
     ce4:	aa 9a       	sbi	0x15, 2	; 21
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <lcd_write+0x78>
     ce8:	aa 98       	cbi	0x15, 2	; 21
      lcd_db1_port_set(data&_BV(1));
     cea:	81 ff       	sbrs	r24, 1
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <lcd_write+0x80>
     cee:	a9 9a       	sbi	0x15, 1	; 21
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <lcd_write+0x82>
     cf2:	a9 98       	cbi	0x15, 1	; 21
      lcd_db0_port_set(data&_BV(0));
     cf4:	80 ff       	sbrs	r24, 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <lcd_write+0x8a>
     cf8:	a8 9a       	sbi	0x15, 0	; 21
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <lcd_write+0x8c>
     cfc:	a8 98       	cbi	0x15, 0	; 21

      Delay_ns(100);
     cfe:	00 00       	nop
      lcd_e_port_high();
     d00:	0e 94 af 05 	call	0xb5e	; 0xb5e <lcd_e_port_high>
      Delay_ns(500);
     d04:	00 00       	nop
      lcd_e_port_low();
     d06:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_e_port_low>

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
     d0a:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
     d0c:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
     d0e:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
     d10:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db3_port_high();
     d12:	ab 9a       	sbi	0x15, 3	; 21
      lcd_db2_port_high();
     d14:	aa 9a       	sbi	0x15, 2	; 21
      lcd_db1_port_high();
     d16:	a9 9a       	sbi	0x15, 1	; 21
      lcd_db0_port_high();
     d18:	a8 9a       	sbi	0x15, 0	; 21
    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
        Delay_us(1640);
      else Delay_us(40);
    #endif
  }
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	08 95       	ret

00000d24 <lcd_getc>:
    return data;
  }

uint8_t lcd_getc()
  {
    return lcd_read(1);
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <lcd_read>

00000d2a <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	0c 94 39 06 	jmp	0xc72	; 0xc72 <lcd_write>

00000d30 <lcd_goto>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
     d30:	80 58       	subi	r24, 0x80	; 128
     d32:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <lcd_command>

00000d36 <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <lcd_command>

00000d3c <lcd_home>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
  {
    lcd_command(1<<LCD_HOME);
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <lcd_command>

00000d42 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	0c 94 39 06 	jmp	0xc72	; 0xc72 <lcd_write>

00000d48 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	ec 01       	movw	r28, r24
    register char c;

    while ((c=*s++)) 
     d4e:	89 91       	ld	r24, Y+
     d50:	88 23       	and	r24, r24
     d52:	19 f0       	breq	.+6      	; 0xd5a <lcd_puts+0x12>
      lcd_putc(c);
     d54:	0e 94 a1 06 	call	0xd42	; 0xd42 <lcd_putc>
     d58:	fa cf       	rjmp	.-12     	; 0xd4e <lcd_puts+0x6>
  }
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	fc 01       	movw	r30, r24
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
     d66:	84 91       	lpm	r24, Z
     d68:	ef 01       	movw	r28, r30
     d6a:	21 96       	adiw	r28, 0x01	; 1
     d6c:	88 23       	and	r24, r24
     d6e:	21 f0       	breq	.+8      	; 0xd78 <lcd_puts_P+0x18>
      lcd_putc(c);
     d70:	0e 94 a1 06 	call	0xd42	; 0xd42 <lcd_putc>
     d74:	fe 01       	movw	r30, r28
     d76:	f7 cf       	rjmp	.-18     	; 0xd66 <lcd_puts_P+0x6>
  }
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <lcd_init>:
     d7e:	e4 e6       	ldi	r30, 0x64	; 100
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	82 60       	ori	r24, 0x02	; 2
     d86:	80 83       	st	Z, r24
     d88:	8f 9a       	sbi	0x11, 7	; 17
     d8a:	80 81       	ld	r24, Z
     d8c:	81 60       	ori	r24, 0x01	; 1
     d8e:	80 83       	st	Z, r24
     d90:	a7 9a       	sbi	0x14, 7	; 20
     d92:	a6 9a       	sbi	0x14, 6	; 20
     d94:	a5 9a       	sbi	0x14, 5	; 20
     d96:	a4 9a       	sbi	0x14, 4	; 20
     d98:	a3 9a       	sbi	0x14, 3	; 20
     d9a:	a2 9a       	sbi	0x14, 2	; 20
     d9c:	a1 9a       	sbi	0x14, 1	; 20
     d9e:	a0 9a       	sbi	0x14, 0	; 20
     da0:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_e_port_low>
     da4:	97 98       	cbi	0x12, 7	; 18
     da6:	e5 e6       	ldi	r30, 0x65	; 101
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8e 7f       	andi	r24, 0xFE	; 254
     dae:	80 83       	st	Z, r24
     db0:	af 9a       	sbi	0x15, 7	; 21
     db2:	ae 9a       	sbi	0x15, 6	; 21
     db4:	ad 9a       	sbi	0x15, 5	; 21
     db6:	ac 9a       	sbi	0x15, 4	; 21
     db8:	ab 9a       	sbi	0x15, 3	; 21
     dba:	aa 9a       	sbi	0x15, 2	; 21
     dbc:	a9 9a       	sbi	0x15, 1	; 21
     dbe:	a8 9a       	sbi	0x15, 0	; 21
     dc0:	85 ea       	ldi	r24, 0xA5	; 165
     dc2:	9e e0       	ldi	r25, 0x0E	; 14
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	f1 f7       	brne	.-4      	; 0xdc4 <lcd_init+0x46>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <lcd_init+0x4c>
     dca:	00 00       	nop
     dcc:	af 98       	cbi	0x15, 7	; 21
     dce:	ae 98       	cbi	0x15, 6	; 21
     dd0:	00 00       	nop
     dd2:	0e 94 af 05 	call	0xb5e	; 0xb5e <lcd_e_port_high>
     dd6:	00 00       	nop
     dd8:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_e_port_low>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	94 e0       	ldi	r25, 0x04	; 4
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	f1 f7       	brne	.-4      	; 0xde0 <lcd_init+0x62>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <lcd_init+0x68>
     de6:	00 00       	nop
     de8:	0e 94 af 05 	call	0xb5e	; 0xb5e <lcd_e_port_high>
     dec:	00 00       	nop
     dee:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_e_port_low>
     df2:	91 e2       	ldi	r25, 0x21	; 33
     df4:	9a 95       	dec	r25
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <lcd_init+0x76>
     df8:	00 00       	nop
     dfa:	0e 94 af 05 	call	0xb5e	; 0xb5e <lcd_e_port_high>
     dfe:	00 00       	nop
     e00:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_e_port_low>
     e04:	8d e0       	ldi	r24, 0x0D	; 13
     e06:	8a 95       	dec	r24
     e08:	f1 f7       	brne	.-4      	; 0xe06 <lcd_init+0x88>
     e0a:	00 00       	nop
     e0c:	aa 98       	cbi	0x15, 2	; 21
     e0e:	00 00       	nop
     e10:	0e 94 af 05 	call	0xb5e	; 0xb5e <lcd_e_port_high>
     e14:	00 00       	nop
     e16:	0e 94 a9 05 	call	0xb52	; 0xb52 <lcd_e_port_low>
     e1a:	9d e0       	ldi	r25, 0x0D	; 13
     e1c:	9a 95       	dec	r25
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <lcd_init+0x9e>
     e20:	00 00       	nop
     e22:	88 e0       	ldi	r24, 0x08	; 8
     e24:	0e 94 95 06 	call	0xd2a	; 0xd2a <lcd_command>
     e28:	0e 94 9b 06 	call	0xd36	; 0xd36 <lcd_clrscr>
     e2c:	86 e0       	ldi	r24, 0x06	; 6
     e2e:	0e 94 95 06 	call	0xd2a	; 0xd2a <lcd_command>
     e32:	8c e0       	ldi	r24, 0x0C	; 12
     e34:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <lcd_command>

00000e38 <main>:
}

int main(void)
{
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	c6 54       	subi	r28, 0x46	; 70
     e42:	d1 09       	sbc	r29, r1
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
  uint16_t steps;
  
  static const char string_intro_row1[] PROGMEM = "*** SM6VFZ";
  static const char string_intro_row2[] PROGMEM = "Starting radio";

  DDRA = 0xFF;
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xFF;
     e52:	87 bb       	out	0x17, r24	; 23
  DDRC = 0xFF;
     e54:	84 bb       	out	0x14, r24	; 20
  DDRD = 0xFF;
     e56:	81 bb       	out	0x11, r24	; 17
  DDRE = ~(uint8_t)((1 << ROT1_A)|(1 << ROT1_B)|(1 << VOLROT_A)|(1 << VOLROT_B)|(1 << FREQ_BUTTON));
     e58:	97 e0       	ldi	r25, 0x07	; 7
     e5a:	92 b9       	out	0x02, r25	; 2
  DDRF = ~(uint8_t)((1 << VOL_BUTTON)|(1 << MODE_BUTTON)|(1 << BAND_BUTTON)|(1 << CLAR_POT)|(1 << MENU_BUTTON));
     e5c:	90 ee       	ldi	r25, 0xE0	; 224
     e5e:	90 93 61 00 	sts	0x0061, r25
  DDRG = 0xFF;  
     e62:	80 93 64 00 	sts	0x0064, r24
	
  PORTA = 0x00;
     e66:	1b ba       	out	0x1b, r1	; 27
  PORTB = 0x00;
     e68:	18 ba       	out	0x18, r1	; 24
  PORTC = 0x00;
     e6a:	15 ba       	out	0x15, r1	; 21
  PORTD = (uint8_t)(1 << PD2); // PD2 = I2C pull-up
     e6c:	84 e0       	ldi	r24, 0x04	; 4
     e6e:	82 bb       	out	0x12, r24	; 18
  PORTE = (uint8_t)((1 << ROT1_A)|(1 << ROT1_B)|(1 << VOLROT_A)|(1 << VOLROT_B)|(1 << FREQ_BUTTON));
     e70:	88 ef       	ldi	r24, 0xF8	; 248
     e72:	83 b9       	out	0x03, r24	; 3
  PORTF = (uint8_t)((1 << VOL_BUTTON)|(1 << MODE_BUTTON)|(1 << BAND_BUTTON)|(1 << MODE_BUTTON));
     e74:	83 e1       	ldi	r24, 0x13	; 19
     e76:	80 93 62 00 	sts	0x0062, r24
  PORTG = 0x00;
     e7a:	10 92 65 00 	sts	0x0065, r1
	
  // turn off the analog comparator
  ACSR = 0x40U;
     e7e:	80 e4       	ldi	r24, 0x40	; 64
     e80:	88 b9       	out	0x08, r24	; 8
	
  // turn off SPI, TWI and USART0
  //PRR  = 0x86U;
	
  EICRA = 0x00;
     e82:	10 92 6a 00 	sts	0x006A, r1
  EICRB = (1<<ISC41)|(1<<ISC51)|(1<<ISC61)|(1<<ISC71);
     e86:	8a ea       	ldi	r24, 0xAA	; 170
     e88:	8a bf       	out	0x3a, r24	; 58

  EIMSK = (1 << INTF4)|(1 << INTF5)|(1 << INTF6)|(1 << INTF7);
     e8a:	80 ef       	ldi	r24, 0xF0	; 240
     e8c:	89 bf       	out	0x39, r24	; 57
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	a8 95       	wdr
     e94:	81 b5       	in	r24, 0x21	; 33
     e96:	88 61       	ori	r24, 0x18	; 24
     e98:	81 bd       	out	0x21, r24	; 33
     e9a:	11 bc       	out	0x21, r1	; 33
     e9c:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e9e:	2f e9       	ldi	r18, 0x9F	; 159
     ea0:	36 e8       	ldi	r19, 0x86	; 134
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	21 50       	subi	r18, 0x01	; 1
     ea6:	30 40       	sbci	r19, 0x00	; 0
     ea8:	80 40       	sbci	r24, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <main+0x6c>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <main+0x76>
     eae:	00 00       	nop

  wdt_disable();

  _delay_ms(500);

  TIMSK = 0;
     eb0:	17 be       	out	0x37, r1	; 55
  Timer0Init();
     eb2:	0e 94 96 05 	call	0xb2c	; 0xb2c <Timer0Init>
  Timer1Init();
     eb6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <Timer1Init>
  TWIinit();
     eba:	0e 94 b0 01 	call	0x360	; 0x360 <TWIinit>
  lcd_init();
     ebe:	0e 94 bf 06 	call	0xd7e	; 0xd7e <lcd_init>
  lcd_clrscr();
     ec2:	0e 94 9b 06 	call	0xd36	; 0xd36 <lcd_clrscr>
  adcInit();
     ec6:	0e 94 90 05 	call	0xb20	; 0xb20 <adcInit>
     eca:	af e4       	ldi	r26, 0x4F	; 79
     ecc:	b3 ec       	ldi	r27, 0xC3	; 195
     ece:	11 97       	sbiw	r26, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <main+0x96>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <main+0x9c>
     ed4:	00 00       	nop

  _delay_ms(200);

  strcpy_P(buffer, string_intro_row1);
     ed6:	6b e9       	ldi	r22, 0x9B	; 155
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	9e 01       	movw	r18, r28
     edc:	2f 5f       	subi	r18, 0xFF	; 255
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
     ee0:	69 01       	movw	r12, r18
     ee2:	c9 01       	movw	r24, r18
     ee4:	0e 94 c5 13 	call	0x278a	; 0x278a <strcpy_P>
  lcd_puts(buffer);
     ee8:	c6 01       	movw	r24, r12
     eea:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
  lcd_goto(0x40);
     eee:	80 e4       	ldi	r24, 0x40	; 64
     ef0:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
  strcpy_P(buffer, string_intro_row2);
     ef4:	6c e8       	ldi	r22, 0x8C	; 140
     ef6:	70 e0       	ldi	r23, 0x00	; 0
     ef8:	c6 01       	movw	r24, r12
     efa:	0e 94 c5 13 	call	0x278a	; 0x278a <strcpy_P>
  lcd_puts(buffer);
     efe:	c6 01       	movw	r24, r12
     f00:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>

  rot_flag = 0x01;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 93 c3 01 	sts	0x01C3, r24
  mode_flag = 0x01;
     f0a:	80 93 c0 01 	sts	0x01C0, r24
  band_flag = 0x02;
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	80 93 c2 01 	sts	0x01C2, r24
  timer_flag = 0x00;
     f14:	10 92 cb 01 	sts	0x01CB, r1

  band = 10;
     f18:	8a e0       	ldi	r24, 0x0A	; 10
     f1a:	80 93 bd 01 	sts	0x01BD, r24
  step_timer = 255;
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	90 93 ca 01 	sts	0x01CA, r25
     f26:	80 93 c9 01 	sts	0x01C9, r24
  steps = 0;
  last_dir = 0x00;
  mode = 0x00;
     f2a:	10 92 c5 01 	sts	0x01C5, r1
  tx = 0x0000;
     f2e:	10 92 c7 01 	sts	0x01C7, r1
     f32:	10 92 c6 01 	sts	0x01C6, r1
  rx_att = 0x00;
     f36:	10 92 c1 01 	sts	0x01C1, r1
  tx_att = 0x00;
     f3a:	10 92 c8 01 	sts	0x01C8, r1
  rffe_rx_att = false;
     f3e:	10 92 cc 01 	sts	0x01CC, r1

  err = updateVolume(vol);
     f42:	88 e1       	ldi	r24, 0x18	; 24
     f44:	0e 94 ae 03 	call	0x75c	; 0x75c <updateVolume>
     f48:	3f e7       	ldi	r19, 0x7F	; 127
     f4a:	8a e1       	ldi	r24, 0x1A	; 26
     f4c:	96 e0       	ldi	r25, 0x06	; 6
     f4e:	31 50       	subi	r19, 0x01	; 1
     f50:	80 40       	sbci	r24, 0x00	; 0
     f52:	90 40       	sbci	r25, 0x00	; 0
     f54:	e1 f7       	brne	.-8      	; 0xf4e <main+0x116>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <main+0x120>
     f58:	00 00       	nop
  
  _delay_ms(2000);

  lcd_clrscr();
     f5a:	0e 94 9b 06 	call	0xd36	; 0xd36 <lcd_clrscr>
  
  sei();
     f5e:	78 94       	sei
  band_flag = 0x02;
  timer_flag = 0x00;

  band = 10;
  step_timer = 255;
  steps = 0;
     f60:	61 2c       	mov	r6, r1
     f62:	71 2c       	mov	r7, r1
  int freq_offset; // offset in MHz for display
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
  uint8_t last_dir;
  uint8_t tx_last = 255;
  uint8_t vol = 0x18;
     f64:	38 e1       	ldi	r19, 0x18	; 24
     f66:	93 2e       	mov	r9, r19
  int8_t clar = 0;
  int freq_offset; // offset in MHz for display
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
  uint8_t last_dir;
  uint8_t tx_last = 255;
     f68:	af ef       	ldi	r26, 0xFF	; 255
     f6a:	ae af       	std	Y+62, r26	; 0x3e
  timer_flag = 0x00;

  band = 10;
  step_timer = 255;
  steps = 0;
  last_dir = 0x00;
     f6c:	23 96       	adiw	r28, 0x03	; 3
     f6e:	1f ae       	std	Y+63, r1	; 0x3f
     f70:	23 97       	sbiw	r28, 0x03	; 3
  double freq, freq_last;  // kHz part
  int16_t clarval, clarval_last;
  int8_t clar = 0;
  int freq_offset; // offset in MHz for display
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
     f72:	a1 2c       	mov	r10, r1
     f74:	b1 2c       	mov	r11, r1
  lcd_clrscr();
  
  sei();

  while (1) {
    if (timer_flag) {
     f76:	80 91 cb 01 	lds	r24, 0x01CB
     f7a:	88 23       	and	r24, r24
     f7c:	09 f4       	brne	.+2      	; 0xf80 <main+0x148>
     f7e:	6e c1       	rjmp	.+732    	; 0x125c <__stack+0x15d>
	  lcd_freq();
	}
	clarval_last = clarval;
      }

      if (vol_timer < 255)
     f80:	80 91 00 01 	lds	r24, 0x0100
     f84:	8f 3f       	cpi	r24, 0xFF	; 255
     f86:	29 f0       	breq	.+10     	; 0xf92 <main+0x15a>
	vol_timer ++;
     f88:	80 91 00 01 	lds	r24, 0x0100
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	80 93 00 01 	sts	0x0100, r24

      // Band button

      if (band_timer < 9) { // Recently pressed ?
     f92:	80 91 01 01 	lds	r24, 0x0101
     f96:	89 30       	cpi	r24, 0x09	; 9
     f98:	d8 f4       	brcc	.+54     	; 0xfd0 <main+0x198>
	band_timer ++;
     f9a:	80 91 01 01 	lds	r24, 0x0101
     f9e:	8f 5f       	subi	r24, 0xFF	; 255
     fa0:	80 93 01 01 	sts	0x0101, r24
	if ((band_timer < 9) && (PINF & (1 << BAND_BUTTON))) {
     fa4:	80 91 01 01 	lds	r24, 0x0101
     fa8:	89 30       	cpi	r24, 0x09	; 9
     faa:	40 f4       	brcc	.+16     	; 0xfbc <main+0x184>
     fac:	00 9b       	sbis	0x00, 0	; 0
     fae:	06 c0       	rjmp	.+12     	; 0xfbc <main+0x184>
	  band_flag = 0x01; // short press
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	80 93 c2 01 	sts	0x01C2, r24
	  band_timer = 255;
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	80 93 01 01 	sts	0x0101, r24
	}
	if ((band_timer == 9) && (!(PINF & (1 << BAND_BUTTON)))) 
     fbc:	80 91 01 01 	lds	r24, 0x0101
     fc0:	89 30       	cpi	r24, 0x09	; 9
     fc2:	49 f4       	brne	.+18     	; 0xfd6 <main+0x19e>
     fc4:	00 99       	sbic	0x00, 0	; 0
     fc6:	07 c0       	rjmp	.+14     	; 0xfd6 <main+0x19e>
	  band_flag = 0x02; // long press
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	80 93 c2 01 	sts	0x01C2, r24
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <main+0x19e>
      }
      else if (!(PINF & (1 << BAND_BUTTON))) {  // New press
     fd0:	00 9b       	sbis	0x00, 0	; 0
	band_timer = 0;
     fd2:	10 92 01 01 	sts	0x0101, r1
      }

      // Mode button

      if (!(PINF & (1 << MODE_BUTTON))) {
     fd6:	01 99       	sbic	0x00, 1	; 0
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <main+0x1a8>
	mode_flag = 0x01;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 c0 01 	sts	0x01C0, r24
      }
      
      // Update frequency if necessary:
      if (freq != freq_last) {
     fe0:	28 2d       	mov	r18, r8
     fe2:	3f ad       	ldd	r19, Y+63	; 0x3f
     fe4:	21 96       	adiw	r28, 0x01	; 1
     fe6:	4f ad       	ldd	r20, Y+63	; 0x3f
     fe8:	21 97       	sbiw	r28, 0x01	; 1
     fea:	22 96       	adiw	r28, 0x02	; 2
     fec:	5f ad       	ldd	r21, Y+63	; 0x3f
     fee:	22 97       	sbiw	r28, 0x02	; 2
     ff0:	61 2f       	mov	r22, r17
     ff2:	70 2f       	mov	r23, r16
     ff4:	8f 2d       	mov	r24, r15
     ff6:	9e 2d       	mov	r25, r14
     ff8:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <main+0x1ca>
    1000:	80 c0       	rjmp	.+256    	; 0x1102 <__stack+0x3>
	lcd_freq();
    1002:	84 e0       	ldi	r24, 0x04	; 4
    1004:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	4a e7       	ldi	r20, 0x7A	; 122
    100e:	54 e4       	ldi	r21, 0x44	; 68
    1010:	61 2f       	mov	r22, r17
    1012:	70 2f       	mov	r23, r16
    1014:	8f 2d       	mov	r24, r15
    1016:	9e 2d       	mov	r25, r14
    1018:	0e 94 4e 11 	call	0x229c	; 0x229c <fmod>
    101c:	6f af       	std	Y+63, r22	; 0x3f
    101e:	87 2e       	mov	r8, r23
    1020:	21 96       	adiw	r28, 0x01	; 1
    1022:	8f af       	std	Y+63, r24	; 0x3f
    1024:	21 97       	sbiw	r28, 0x01	; 1
    1026:	22 96       	adiw	r28, 0x02	; 2
    1028:	9f af       	std	Y+63, r25	; 0x3f
    102a:	22 97       	sbiw	r28, 0x02	; 2
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	4a e7       	ldi	r20, 0x7A	; 122
    1032:	54 e4       	ldi	r21, 0x44	; 68
    1034:	61 2f       	mov	r22, r17
    1036:	70 2f       	mov	r23, r16
    1038:	8f 2d       	mov	r24, r15
    103a:	9e 2d       	mov	r25, r14
    103c:	0e 94 47 10 	call	0x208e	; 0x208e <__divsf3>
    1040:	1b 01       	movw	r2, r22
    1042:	2c 01       	movw	r4, r24
    1044:	60 e0       	ldi	r22, 0x00	; 0
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	cb 01       	movw	r24, r22
    104a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__floatsisf>
    104e:	9b 01       	movw	r18, r22
    1050:	ac 01       	movw	r20, r24
    1052:	c2 01       	movw	r24, r4
    1054:	b1 01       	movw	r22, r2
    1056:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__addsf3>
    105a:	0e 94 2c 11 	call	0x2258	; 0x2258 <floor>
    105e:	22 96       	adiw	r28, 0x02	; 2
    1060:	bf ad       	ldd	r27, Y+63	; 0x3f
    1062:	22 97       	sbiw	r28, 0x02	; 2
    1064:	bf 93       	push	r27
    1066:	21 96       	adiw	r28, 0x01	; 1
    1068:	2f ad       	ldd	r18, Y+63	; 0x3f
    106a:	21 97       	sbiw	r28, 0x01	; 1
    106c:	2f 93       	push	r18
    106e:	8f 92       	push	r8
    1070:	3f ad       	ldd	r19, Y+63	; 0x3f
    1072:	3f 93       	push	r19
    1074:	0e 94 b9 10 	call	0x2172	; 0x2172 <__fixsfsi>
    1078:	7f 93       	push	r23
    107a:	6f 93       	push	r22
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	9f 93       	push	r25
    1082:	8f 93       	push	r24
    1084:	df 92       	push	r13
    1086:	cf 92       	push	r12
    1088:	0e 94 21 14 	call	0x2842	; 0x2842 <sprintf>
    108c:	c6 01       	movw	r24, r12
    108e:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
    1092:	8f e0       	ldi	r24, 0x0F	; 15
    1094:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
    1098:	68 e3       	ldi	r22, 0x38	; 56
    109a:	71 e0       	ldi	r23, 0x01	; 1
    109c:	c6 01       	movw	r24, r12
    109e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <strcpy>
    10a2:	c6 01       	movw	r24, r12
    10a4:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
	err = updateFreq(freq,clar,1);
    10a8:	21 e0       	ldi	r18, 0x01	; 1
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	61 2f       	mov	r22, r17
    10ae:	70 2f       	mov	r23, r16
    10b0:	8f 2d       	mov	r24, r15
    10b2:	9e 2d       	mov	r25, r14
    10b4:	0e 94 ef 03 	call	0x7de	; 0x7de <updateFreq>
	if (err) {
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	88 23       	and	r24, r24
    10c4:	b1 f0       	breq	.+44     	; 0x10f2 <main+0x2ba>
	  sprintf(buffer,"Err %x         ",err);
    10c6:	1f 92       	push	r1
    10c8:	8f 93       	push	r24
    10ca:	81 e1       	ldi	r24, 0x11	; 17
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	9f 93       	push	r25
    10d0:	8f 93       	push	r24
    10d2:	df 92       	push	r13
    10d4:	cf 92       	push	r12
    10d6:	0e 94 21 14 	call	0x2842	; 0x2842 <sprintf>
	  lcd_goto(0x40);
    10da:	80 e4       	ldi	r24, 0x40	; 64
    10dc:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	  lcd_puts(buffer);	
    10e0:	c6 01       	movw	r24, r12
    10e2:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
	}
	freq_last = freq;
    10f2:	81 2e       	mov	r8, r17
    10f4:	0f af       	std	Y+63, r16	; 0x3f
    10f6:	21 96       	adiw	r28, 0x01	; 1
    10f8:	ff ae       	std	Y+63, r15	; 0x3f
    10fa:	21 97       	sbiw	r28, 0x01	; 1
    10fc:	22 96       	adiw	r28, 0x02	; 2
    10fe:	ef ae       	std	Y+63, r14	; 0x3f
    1100:	22 97       	sbiw	r28, 0x02	; 2
      }

      // Read RSSI and status:
      err = TWI_read_byte(fpga_addr, &data);
    1102:	be 01       	movw	r22, r28
    1104:	63 5c       	subi	r22, 0xC3	; 195
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	83 e2       	ldi	r24, 0x23	; 35
    110a:	0e 94 1d 02 	call	0x43a	; 0x43a <TWI_read_byte>
      if ((data & 0x80) && (tx_last != 1)) { // Shift to TX ?
    110e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1110:	87 ff       	sbrs	r24, 7
    1112:	10 c0       	rjmp	.+32     	; 0x1134 <__stack+0x35>
    1114:	be ad       	ldd	r27, Y+62	; 0x3e
    1116:	b1 30       	cpi	r27, 0x01	; 1
    1118:	c9 f0       	breq	.+50     	; 0x114c <__stack+0x4d>
	tx = 0x0001;
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	90 93 c7 01 	sts	0x01C7, r25
    1122:	80 93 c6 01 	sts	0x01C6, r24
	updateRFFE();
    1126:	0e 94 be 03 	call	0x77c	; 0x77c <updateRFFE>
	PORTD |= (1 << LED_RED);
    112a:	96 9a       	sbi	0x12, 6	; 18
	PORTD &= ~(1 << LED_GREEN);
    112c:	95 98       	cbi	0x12, 5	; 18
	tx_last = 1;
    112e:	21 e0       	ldi	r18, 0x01	; 1
    1130:	2e af       	std	Y+62, r18	; 0x3e
    1132:	0c c0       	rjmp	.+24     	; 0x114c <__stack+0x4d>
      }
      else if (!(data & 0x80) && (tx_last != 0)) { // Shift to RX ?
    1134:	3e ad       	ldd	r19, Y+62	; 0x3e
    1136:	33 23       	and	r19, r19
    1138:	49 f0       	breq	.+18     	; 0x114c <__stack+0x4d>
	tx = 0x0000;
    113a:	10 92 c7 01 	sts	0x01C7, r1
    113e:	10 92 c6 01 	sts	0x01C6, r1
	updateRFFE();
    1142:	0e 94 be 03 	call	0x77c	; 0x77c <updateRFFE>
	PORTD |= (1 << LED_GREEN);
    1146:	95 9a       	sbi	0x12, 5	; 18
	PORTD &= ~(1 << LED_RED);
    1148:	96 98       	cbi	0x12, 6	; 18
	tx_last = 0;
    114a:	1e ae       	std	Y+62, r1	; 0x3e
      }

      rssi = (0x3f & data); 
    114c:	8d ad       	ldd	r24, Y+61	; 0x3d
    114e:	8f 73       	andi	r24, 0x3F	; 63
    1150:	b8 16       	cp	r11, r24
    1152:	08 f4       	brcc	.+2      	; 0x1156 <__stack+0x57>
    1154:	b8 2e       	mov	r11, r24
      if (rssi_max < rssi) 
	rssi_max = rssi;
      rssi_count ++;
    1156:	a3 94       	inc	r10
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
    1158:	80 91 cc 01 	lds	r24, 0x01CC
    115c:	81 11       	cpse	r24, r1
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <__stack+0x67>
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	8a 15       	cp	r24, r10
    1164:	48 f0       	brcs	.+18     	; 0x1178 <__stack+0x79>
    1166:	80 91 cc 01 	lds	r24, 0x01CC
    116a:	88 23       	and	r24, r24
    116c:	09 f4       	brne	.+2      	; 0x1170 <__stack+0x71>
    116e:	73 c0       	rjmp	.+230    	; 0x1256 <__stack+0x157>
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	9a 15       	cp	r25, r10
    1174:	08 f0       	brcs	.+2      	; 0x1178 <__stack+0x79>
    1176:	6f c0       	rjmp	.+222    	; 0x1256 <__stack+0x157>
	rssi_count = 0;
	if (rssi_max < 4)
    1178:	a3 e0       	ldi	r26, 0x03	; 3
    117a:	ab 15       	cp	r26, r11
    117c:	18 f4       	brcc	.+6      	; 0x1184 <__stack+0x85>
	  rssi = 0;
	else 
	  rssi = rssi_max - 4;
    117e:	8c ef       	ldi	r24, 0xFC	; 252
    1180:	8b 0d       	add	r24, r11
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <__stack+0x87>
	rssi_max = rssi;
      rssi_count ++;
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
	rssi_count = 0;
	if (rssi_max < 4)
	  rssi = 0;
    1184:	80 e0       	ldi	r24, 0x00	; 0
	else 
	  rssi = rssi_max - 4;
	rssi_max = 0;

	if (vol_timer < 10); // Don't print if vol info
    1186:	90 91 00 01 	lds	r25, 0x0100
    118a:	9a 30       	cpi	r25, 0x0A	; 10
    118c:	08 f4       	brcc	.+2      	; 0x1190 <__stack+0x91>
    118e:	61 c0       	rjmp	.+194    	; 0x1252 <__stack+0x153>
	else if (rffe_rx_att && (rssi>9)) {
    1190:	90 91 cc 01 	lds	r25, 0x01CC
    1194:	99 23       	and	r25, r25
    1196:	29 f0       	breq	.+10     	; 0x11a2 <__stack+0xa3>
    1198:	8a 30       	cpi	r24, 0x0A	; 10
    119a:	18 f0       	brcs	.+6      	; 0x11a2 <__stack+0xa3>
	  sprintf(buffer,"S---9+++   ");
    119c:	61 e2       	ldi	r22, 0x21	; 33
    119e:	71 e0       	ldi	r23, 0x01	; 1
    11a0:	49 c0       	rjmp	.+146    	; 0x1234 <__stack+0x135>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rffe_rx_att && (rssi < 10)) {
    11a2:	90 91 cc 01 	lds	r25, 0x01CC
    11a6:	99 23       	and	r25, r25
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <__stack+0xb5>
    11aa:	8a 30       	cpi	r24, 0x0A	; 10
    11ac:	88 f4       	brcc	.+34     	; 0x11d0 <__stack+0xd1>
	  rffe_rx_att = false;
    11ae:	10 92 cc 01 	sts	0x01CC, r1
    11b2:	4d c0       	rjmp	.+154    	; 0x124e <__stack+0x14f>
	  err = updateRFFE();
	}
	else if (rssi < 2) { 
    11b4:	82 30       	cpi	r24, 0x02	; 2
    11b6:	28 f4       	brcc	.+10     	; 0x11c2 <__stack+0xc3>
	  sprintf(buffer,"S%d         ",rssi);
    11b8:	1f 92       	push	r1
    11ba:	8f 93       	push	r24
    11bc:	8d e2       	ldi	r24, 0x2D	; 45
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <__stack+0xeb>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 4) {
    11c2:	84 30       	cpi	r24, 0x04	; 4
    11c4:	28 f4       	brcc	.+10     	; 0x11d0 <__stack+0xd1>
	  sprintf(buffer,"S-%d        ",rssi);
    11c6:	1f 92       	push	r1
    11c8:	8f 93       	push	r24
    11ca:	8a e3       	ldi	r24, 0x3A	; 58
    11cc:	91 e0       	ldi	r25, 0x01	; 1
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <__stack+0xeb>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
 	}
	else if (rssi < 6) {
    11d0:	86 30       	cpi	r24, 0x06	; 6
    11d2:	28 f4       	brcc	.+10     	; 0x11de <__stack+0xdf>
	  sprintf(buffer,"S--%d       ",rssi);
    11d4:	1f 92       	push	r1
    11d6:	8f 93       	push	r24
    11d8:	87 e4       	ldi	r24, 0x47	; 71
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <__stack+0xeb>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 8) {
    11de:	88 30       	cpi	r24, 0x08	; 8
    11e0:	38 f4       	brcc	.+14     	; 0x11f0 <__stack+0xf1>
	  sprintf(buffer,"S---%d      ",rssi);
    11e2:	1f 92       	push	r1
    11e4:	8f 93       	push	r24
    11e6:	84 e5       	ldi	r24, 0x54	; 84
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	9f 93       	push	r25
    11ec:	8f 93       	push	r24
    11ee:	08 c0       	rjmp	.+16     	; 0x1200 <__stack+0x101>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 10) {
    11f0:	8a 30       	cpi	r24, 0x0A	; 10
    11f2:	b8 f4       	brcc	.+46     	; 0x1222 <__stack+0x123>
	  sprintf(buffer,"S----%d     ",rssi);
    11f4:	1f 92       	push	r1
    11f6:	8f 93       	push	r24
    11f8:	a1 e6       	ldi	r26, 0x61	; 97
    11fa:	b1 e0       	ldi	r27, 0x01	; 1
    11fc:	bf 93       	push	r27
    11fe:	af 93       	push	r26
    1200:	df 92       	push	r13
    1202:	cf 92       	push	r12
    1204:	0e 94 21 14 	call	0x2842	; 0x2842 <sprintf>
	  lcd_goto(0x40);
    1208:	80 e4       	ldi	r24, 0x40	; 64
    120a:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	  lcd_puts(buffer);
    120e:	c6 01       	movw	r24, r12
    1210:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	18 c0       	rjmp	.+48     	; 0x1252 <__stack+0x153>
	}
	else if (rssi < 12) {
    1222:	8c 30       	cpi	r24, 0x0C	; 12
    1224:	18 f4       	brcc	.+6      	; 0x122c <__stack+0x12d>
	  sprintf(buffer,"S----9+    ");
    1226:	6e e6       	ldi	r22, 0x6E	; 110
    1228:	71 e0       	ldi	r23, 0x01	; 1
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <__stack+0x135>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 13 ){
    122c:	8c 30       	cpi	r24, 0x0C	; 12
    122e:	61 f4       	brne	.+24     	; 0x1248 <__stack+0x149>
	  sprintf(buffer,"S----9++   ");
    1230:	6a e7       	ldi	r22, 0x7A	; 122
    1232:	71 e0       	ldi	r23, 0x01	; 1
    1234:	c6 01       	movw	r24, r12
    1236:	0e 94 d7 13 	call	0x27ae	; 0x27ae <strcpy>
	  lcd_goto(0x40);
    123a:	80 e4       	ldi	r24, 0x40	; 64
    123c:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	  lcd_puts(buffer);
    1240:	c6 01       	movw	r24, r12
    1242:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
    1246:	05 c0       	rjmp	.+10     	; 0x1252 <__stack+0x153>
	}
	else {
	  rffe_rx_att = true;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	80 93 cc 01 	sts	0x01CC, r24
	  err = updateRFFE();
    124e:	0e 94 be 03 	call	0x77c	; 0x77c <updateRFFE>
      rssi = (0x3f & data); 
      if (rssi_max < rssi) 
	rssi_max = rssi;
      rssi_count ++;
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
	rssi_count = 0;
    1252:	a1 2c       	mov	r10, r1
	if (rssi_max < 4)
	  rssi = 0;
	else 
	  rssi = rssi_max - 4;
	rssi_max = 0;
    1254:	b1 2c       	mov	r11, r1
	  rffe_rx_att = true;
	  err = updateRFFE();
	}
	rssi = 0;
      }
      timer_flag = 0;
    1256:	10 92 cb 01 	sts	0x01CB, r1
    125a:	64 c0       	rjmp	.+200    	; 0x1324 <__stack+0x225>
    }
    else if (mode_flag) {
    125c:	80 91 c0 01 	lds	r24, 0x01C0
    1260:	88 23       	and	r24, r24
    1262:	09 f4       	brne	.+2      	; 0x1266 <__stack+0x167>
    1264:	5f c0       	rjmp	.+190    	; 0x1324 <__stack+0x225>
      switch (mode) {
    1266:	80 91 c5 01 	lds	r24, 0x01C5
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 f0       	breq	.+36     	; 0x1292 <__stack+0x193>
    126e:	20 f0       	brcs	.+8      	; 0x1278 <__stack+0x179>
    1270:	85 30       	cpi	r24, 0x05	; 5
    1272:	d9 f0       	breq	.+54     	; 0x12aa <__stack+0x1ab>
    1274:	86 30       	cpi	r24, 0x06	; 6
    1276:	29 f1       	breq	.+74     	; 0x12c2 <__stack+0x1c3>
      case LSB:
	mode = USB;
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	80 93 c5 01 	sts	0x01C5, r24
	if (!updateSettings()) { 
    127e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <updateSettings>
    1282:	81 11       	cpse	r24, r1
    1284:	3f c0       	rjmp	.+126    	; 0x1304 <__stack+0x205>
	  lcd_goto(0x00);
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	  sprintf(buffer,"USB ");
    128c:	66 e8       	ldi	r22, 0x86	; 134
    128e:	71 e0       	ldi	r23, 0x01	; 1
    1290:	33 c0       	rjmp	.+102    	; 0x12f8 <__stack+0x1f9>
	  lcd_puts(buffer);
	}
	break;
      case USB:
	mode = CW;
    1292:	85 e0       	ldi	r24, 0x05	; 5
    1294:	80 93 c5 01 	sts	0x01C5, r24
	if(!updateSettings()) {
    1298:	0e 94 1f 05 	call	0xa3e	; 0xa3e <updateSettings>
    129c:	81 11       	cpse	r24, r1
    129e:	32 c0       	rjmp	.+100    	; 0x1304 <__stack+0x205>
	  lcd_goto(0x00);
    12a0:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	  sprintf(buffer,"CW  ");
    12a4:	6b e8       	ldi	r22, 0x8B	; 139
    12a6:	71 e0       	ldi	r23, 0x01	; 1
    12a8:	27 c0       	rjmp	.+78     	; 0x12f8 <__stack+0x1f9>
	  lcd_puts(buffer);
	}
	break;
      case CW:
	mode = CWN;
    12aa:	86 e0       	ldi	r24, 0x06	; 6
    12ac:	80 93 c5 01 	sts	0x01C5, r24
	if(!updateSettings()) {
    12b0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <updateSettings>
    12b4:	81 11       	cpse	r24, r1
    12b6:	26 c0       	rjmp	.+76     	; 0x1304 <__stack+0x205>
	  lcd_goto(0x00);
    12b8:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	  sprintf(buffer,"CWN ");
    12bc:	60 e9       	ldi	r22, 0x90	; 144
    12be:	71 e0       	ldi	r23, 0x01	; 1
    12c0:	1b c0       	rjmp	.+54     	; 0x12f8 <__stack+0x1f9>
	  lcd_puts(buffer);
	}
	break;
      case CWN:
	if (band < 200) {
    12c2:	80 91 bd 01 	lds	r24, 0x01BD
    12c6:	88 3c       	cpi	r24, 0xC8	; 200
    12c8:	60 f4       	brcc	.+24     	; 0x12e2 <__stack+0x1e3>
	  mode = AM;
    12ca:	88 e0       	ldi	r24, 0x08	; 8
    12cc:	80 93 c5 01 	sts	0x01C5, r24
	  if(!updateSettings()) {
    12d0:	0e 94 1f 05 	call	0xa3e	; 0xa3e <updateSettings>
    12d4:	81 11       	cpse	r24, r1
    12d6:	16 c0       	rjmp	.+44     	; 0x1304 <__stack+0x205>
	    lcd_goto(0x00);
    12d8:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	    sprintf(buffer,"AM  ");
    12dc:	65 e9       	ldi	r22, 0x95	; 149
    12de:	71 e0       	ldi	r23, 0x01	; 1
    12e0:	0b c0       	rjmp	.+22     	; 0x12f8 <__stack+0x1f9>
	    lcd_puts(buffer);
	  }
	}
	else {
	  mode = FM;
    12e2:	8a e0       	ldi	r24, 0x0A	; 10
    12e4:	80 93 c5 01 	sts	0x01C5, r24
	  if(!updateSettings()) {
    12e8:	0e 94 1f 05 	call	0xa3e	; 0xa3e <updateSettings>
    12ec:	81 11       	cpse	r24, r1
    12ee:	0a c0       	rjmp	.+20     	; 0x1304 <__stack+0x205>
	    lcd_goto(0x00);
    12f0:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	    sprintf(buffer,"FM  ");
    12f4:	6a e9       	ldi	r22, 0x9A	; 154
    12f6:	71 e0       	ldi	r23, 0x01	; 1
    12f8:	c6 01       	movw	r24, r12
    12fa:	0e 94 d7 13 	call	0x27ae	; 0x27ae <strcpy>
	    lcd_puts(buffer);
    12fe:	c6 01       	movw	r24, r12
    1300:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
    1304:	83 e2       	ldi	r24, 0x23	; 35
    1306:	94 ef       	ldi	r25, 0xF4	; 244
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <__stack+0x209>
    130c:	00 c0       	rjmp	.+0      	; 0x130e <__stack+0x20f>
    130e:	00 00       	nop
	  lcd_puts(buffer);
	}
	break;
      }
      _delay_ms(250);
      err = updateFreq(freq,clar,1);  // To shift +/-
    1310:	21 e0       	ldi	r18, 0x01	; 1
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	61 2f       	mov	r22, r17
    1316:	70 2f       	mov	r23, r16
    1318:	8f 2d       	mov	r24, r15
    131a:	9e 2d       	mov	r25, r14
    131c:	0e 94 ef 03 	call	0x7de	; 0x7de <updateFreq>
      mode_flag = 0x00;
    1320:	10 92 c0 01 	sts	0x01C0, r1
    }

    if (band_flag) {
    1324:	80 91 c2 01 	lds	r24, 0x01C2
    1328:	88 23       	and	r24, r24
    132a:	09 f4       	brne	.+2      	; 0x132e <__stack+0x22f>
    132c:	4b c1       	rjmp	.+662    	; 0x15c4 <__stack+0x4c5>
      if (band_flag == 0x02) { // long press
    132e:	80 91 c2 01 	lds	r24, 0x01C2
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	09 f4       	brne	.+2      	; 0x1338 <__stack+0x239>
    1336:	a2 c0       	rjmp	.+324    	; 0x147c <__stack+0x37d>
	}
#endif
      }
      else {
#ifdef HF_HAM
	if (freq<3500)
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 ec       	ldi	r19, 0xC0	; 192
    133c:	4a e5       	ldi	r20, 0x5A	; 90
    133e:	55 e4       	ldi	r21, 0x45	; 69
    1340:	61 2f       	mov	r22, r17
    1342:	70 2f       	mov	r23, r16
    1344:	8f 2d       	mov	r24, r15
    1346:	9e 2d       	mov	r25, r14
    1348:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    134c:	87 fd       	sbrc	r24, 7
    134e:	67 c0       	rjmp	.+206    	; 0x141e <__stack+0x31f>
	  freq = 3510;
	else if(freq<7000)
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 ec       	ldi	r19, 0xC0	; 192
    1354:	4a ed       	ldi	r20, 0xDA	; 218
    1356:	55 e4       	ldi	r21, 0x45	; 69
    1358:	61 2f       	mov	r22, r17
    135a:	70 2f       	mov	r23, r16
    135c:	8f 2d       	mov	r24, r15
    135e:	9e 2d       	mov	r25, r14
    1360:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1364:	87 fd       	sbrc	r24, 7
    1366:	60 c0       	rjmp	.+192    	; 0x1428 <__stack+0x329>
	  freq = 7010;
	else if(freq<10100)
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 ed       	ldi	r19, 0xD0	; 208
    136c:	4d e1       	ldi	r20, 0x1D	; 29
    136e:	56 e4       	ldi	r21, 0x46	; 70
    1370:	61 2f       	mov	r22, r17
    1372:	70 2f       	mov	r23, r16
    1374:	8f 2d       	mov	r24, r15
    1376:	9e 2d       	mov	r25, r14
    1378:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    137c:	87 fd       	sbrc	r24, 7
    137e:	5b c0       	rjmp	.+182    	; 0x1436 <__stack+0x337>
	  freq = 10110;
	else if(freq<14000)
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 ec       	ldi	r19, 0xC0	; 192
    1384:	4a e5       	ldi	r20, 0x5A	; 90
    1386:	56 e4       	ldi	r21, 0x46	; 70
    1388:	61 2f       	mov	r22, r17
    138a:	70 2f       	mov	r23, r16
    138c:	8f 2d       	mov	r24, r15
    138e:	9e 2d       	mov	r25, r14
    1390:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    1394:	87 fd       	sbrc	r24, 7
    1396:	54 c0       	rjmp	.+168    	; 0x1440 <__stack+0x341>
	  freq = 14010;
	else if(freq<18068)
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	38 e2       	ldi	r19, 0x28	; 40
    139c:	4d e8       	ldi	r20, 0x8D	; 141
    139e:	56 e4       	ldi	r21, 0x46	; 70
    13a0:	61 2f       	mov	r22, r17
    13a2:	70 2f       	mov	r23, r16
    13a4:	8f 2d       	mov	r24, r15
    13a6:	9e 2d       	mov	r25, r14
    13a8:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    13ac:	87 fd       	sbrc	r24, 7
    13ae:	4d c0       	rjmp	.+154    	; 0x144a <__stack+0x34b>
	  freq = 18078;
	else if(freq<21000)
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e1       	ldi	r19, 0x10	; 16
    13b4:	44 ea       	ldi	r20, 0xA4	; 164
    13b6:	56 e4       	ldi	r21, 0x46	; 70
    13b8:	61 2f       	mov	r22, r17
    13ba:	70 2f       	mov	r23, r16
    13bc:	8f 2d       	mov	r24, r15
    13be:	9e 2d       	mov	r25, r14
    13c0:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    13c4:	87 fd       	sbrc	r24, 7
    13c6:	46 c0       	rjmp	.+140    	; 0x1454 <__stack+0x355>
	  freq = 21010;
	else if(freq<24890)
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	34 e7       	ldi	r19, 0x74	; 116
    13cc:	42 ec       	ldi	r20, 0xC2	; 194
    13ce:	56 e4       	ldi	r21, 0x46	; 70
    13d0:	61 2f       	mov	r22, r17
    13d2:	70 2f       	mov	r23, r16
    13d4:	8f 2d       	mov	r24, r15
    13d6:	9e 2d       	mov	r25, r14
    13d8:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    13dc:	87 fd       	sbrc	r24, 7
    13de:	3f c0       	rjmp	.+126    	; 0x145e <__stack+0x35f>
	  freq = 24900;
	else if(freq<28000)
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 ec       	ldi	r19, 0xC0	; 192
    13e4:	4a ed       	ldi	r20, 0xDA	; 218
    13e6:	56 e4       	ldi	r21, 0x46	; 70
    13e8:	61 2f       	mov	r22, r17
    13ea:	70 2f       	mov	r23, r16
    13ec:	8f 2d       	mov	r24, r15
    13ee:	9e 2d       	mov	r25, r14
    13f0:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
    13f4:	87 fd       	sbrc	r24, 7
    13f6:	38 c0       	rjmp	.+112    	; 0x1468 <__stack+0x369>
	  freq = 28010;
	else if(freq<28500)
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	38 ea       	ldi	r19, 0xA8	; 168
    13fc:	4e ed       	ldi	r20, 0xDE	; 222
    13fe:	56 e4       	ldi	r21, 0x46	; 70
    1400:	61 2f       	mov	r22, r17
    1402:	70 2f       	mov	r23, r16
    1404:	8f 2d       	mov	r24, r15
    1406:	9e 2d       	mov	r25, r14
    1408:	0e 94 42 10 	call	0x2084	; 0x2084 <__cmpsf2>
	  freq = 28600;
    140c:	10 e0       	ldi	r17, 0x00	; 0
	  freq = 21010;
	else if(freq<24890)
	  freq = 24900;
	else if(freq<28000)
	  freq = 28010;
	else if(freq<28500)
    140e:	87 fd       	sbrc	r24, 7
    1410:	30 c0       	rjmp	.+96     	; 0x1472 <__stack+0x373>
	  freq = 28600;
	else
	  freq = 1810;
    1412:	00 e4       	ldi	r16, 0x40	; 64
    1414:	92 ee       	ldi	r25, 0xE2	; 226
    1416:	f9 2e       	mov	r15, r25
    1418:	24 e4       	ldi	r18, 0x44	; 68
    141a:	e2 2e       	mov	r14, r18
    141c:	2f c0       	rjmp	.+94     	; 0x147c <__stack+0x37d>
#endif
      }
      else {
#ifdef HF_HAM
	if (freq<3500)
	  freq = 3510;
    141e:	10 e0       	ldi	r17, 0x00	; 0
    1420:	00 e6       	ldi	r16, 0x60	; 96
    1422:	8b e5       	ldi	r24, 0x5B	; 91
    1424:	f8 2e       	mov	r15, r24
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <__stack+0x331>
	else if(freq<7000)
	  freq = 7010;
    1428:	10 e0       	ldi	r17, 0x00	; 0
    142a:	00 e1       	ldi	r16, 0x10	; 16
    142c:	bb ed       	ldi	r27, 0xDB	; 219
    142e:	fb 2e       	mov	r15, r27
    1430:	a5 e4       	ldi	r26, 0x45	; 69
    1432:	ea 2e       	mov	r14, r26
    1434:	23 c0       	rjmp	.+70     	; 0x147c <__stack+0x37d>
	else if(freq<10100)
	  freq = 10110;
    1436:	10 e0       	ldi	r17, 0x00	; 0
    1438:	08 ef       	ldi	r16, 0xF8	; 248
    143a:	fd e1       	ldi	r31, 0x1D	; 29
    143c:	ff 2e       	mov	r15, r31
    143e:	1c c0       	rjmp	.+56     	; 0x1478 <__stack+0x379>
	else if(freq<14000)
	  freq = 14010;
    1440:	10 e0       	ldi	r17, 0x00	; 0
    1442:	08 ee       	ldi	r16, 0xE8	; 232
    1444:	ea e5       	ldi	r30, 0x5A	; 90
    1446:	fe 2e       	mov	r15, r30
    1448:	17 c0       	rjmp	.+46     	; 0x1478 <__stack+0x379>
	else if(freq<18068)
	  freq = 18078;
    144a:	10 e0       	ldi	r17, 0x00	; 0
    144c:	0c e3       	ldi	r16, 0x3C	; 60
    144e:	7d e8       	ldi	r23, 0x8D	; 141
    1450:	f7 2e       	mov	r15, r23
    1452:	12 c0       	rjmp	.+36     	; 0x1478 <__stack+0x379>
	else if(freq<21000)
	  freq = 21010;
    1454:	10 e0       	ldi	r17, 0x00	; 0
    1456:	04 e2       	ldi	r16, 0x24	; 36
    1458:	64 ea       	ldi	r22, 0xA4	; 164
    145a:	f6 2e       	mov	r15, r22
    145c:	0d c0       	rjmp	.+26     	; 0x1478 <__stack+0x379>
	else if(freq<24890)
	  freq = 24900;
    145e:	10 e0       	ldi	r17, 0x00	; 0
    1460:	08 e8       	ldi	r16, 0x88	; 136
    1462:	52 ec       	ldi	r21, 0xC2	; 194
    1464:	f5 2e       	mov	r15, r21
    1466:	08 c0       	rjmp	.+16     	; 0x1478 <__stack+0x379>
	else if(freq<28000)
	  freq = 28010;
    1468:	10 e0       	ldi	r17, 0x00	; 0
    146a:	04 ed       	ldi	r16, 0xD4	; 212
    146c:	4a ed       	ldi	r20, 0xDA	; 218
    146e:	f4 2e       	mov	r15, r20
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <__stack+0x379>
	else if(freq<28500)
	  freq = 28600;
    1472:	00 e7       	ldi	r16, 0x70	; 112
    1474:	3f ed       	ldi	r19, 0xDF	; 223
    1476:	f3 2e       	mov	r15, r19
    1478:	26 e4       	ldi	r18, 0x46	; 70
    147a:	e2 2e       	mov	r14, r18
      else if(freq<150000)
	freq = 144200;
#endif
      }

      lcd_freq();
    147c:	84 e0       	ldi	r24, 0x04	; 4
    147e:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	4a e7       	ldi	r20, 0x7A	; 122
    1488:	54 e4       	ldi	r21, 0x44	; 68
    148a:	61 2f       	mov	r22, r17
    148c:	70 2f       	mov	r23, r16
    148e:	8f 2d       	mov	r24, r15
    1490:	9e 2d       	mov	r25, r14
    1492:	0e 94 4e 11 	call	0x229c	; 0x229c <fmod>
    1496:	24 96       	adiw	r28, 0x04	; 4
    1498:	6f af       	std	Y+63, r22	; 0x3f
    149a:	24 97       	sbiw	r28, 0x04	; 4
    149c:	25 96       	adiw	r28, 0x05	; 5
    149e:	7f af       	std	Y+63, r23	; 0x3f
    14a0:	25 97       	sbiw	r28, 0x05	; 5
    14a2:	26 96       	adiw	r28, 0x06	; 6
    14a4:	8f af       	std	Y+63, r24	; 0x3f
    14a6:	26 97       	sbiw	r28, 0x06	; 6
    14a8:	27 96       	adiw	r28, 0x07	; 7
    14aa:	9f af       	std	Y+63, r25	; 0x3f
    14ac:	27 97       	sbiw	r28, 0x07	; 7
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4a e7       	ldi	r20, 0x7A	; 122
    14b4:	54 e4       	ldi	r21, 0x44	; 68
    14b6:	61 2f       	mov	r22, r17
    14b8:	70 2f       	mov	r23, r16
    14ba:	8f 2d       	mov	r24, r15
    14bc:	9e 2d       	mov	r25, r14
    14be:	0e 94 47 10 	call	0x208e	; 0x208e <__divsf3>
    14c2:	1b 01       	movw	r2, r22
    14c4:	2c 01       	movw	r4, r24
    14c6:	60 e0       	ldi	r22, 0x00	; 0
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	cb 01       	movw	r24, r22
    14cc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <__floatsisf>
    14d0:	9b 01       	movw	r18, r22
    14d2:	ac 01       	movw	r20, r24
    14d4:	c2 01       	movw	r24, r4
    14d6:	b1 01       	movw	r22, r2
    14d8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__addsf3>
    14dc:	0e 94 2c 11 	call	0x2258	; 0x2258 <floor>
    14e0:	27 96       	adiw	r28, 0x07	; 7
    14e2:	af ad       	ldd	r26, Y+63	; 0x3f
    14e4:	27 97       	sbiw	r28, 0x07	; 7
    14e6:	af 93       	push	r26
    14e8:	26 96       	adiw	r28, 0x06	; 6
    14ea:	bf ad       	ldd	r27, Y+63	; 0x3f
    14ec:	26 97       	sbiw	r28, 0x06	; 6
    14ee:	bf 93       	push	r27
    14f0:	25 96       	adiw	r28, 0x05	; 5
    14f2:	2f ad       	ldd	r18, Y+63	; 0x3f
    14f4:	25 97       	sbiw	r28, 0x05	; 5
    14f6:	2f 93       	push	r18
    14f8:	24 96       	adiw	r28, 0x04	; 4
    14fa:	3f ad       	ldd	r19, Y+63	; 0x3f
    14fc:	24 97       	sbiw	r28, 0x04	; 4
    14fe:	3f 93       	push	r19
    1500:	0e 94 b9 10 	call	0x2172	; 0x2172 <__fixsfsi>
    1504:	7f 93       	push	r23
    1506:	6f 93       	push	r22
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	9f 93       	push	r25
    150e:	8f 93       	push	r24
    1510:	df 92       	push	r13
    1512:	cf 92       	push	r12
    1514:	0e 94 21 14 	call	0x2842	; 0x2842 <sprintf>
    1518:	c6 01       	movw	r24, r12
    151a:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
    151e:	8f e0       	ldi	r24, 0x0F	; 15
    1520:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
    1524:	68 e3       	ldi	r22, 0x38	; 56
    1526:	71 e0       	ldi	r23, 0x01	; 1
    1528:	c6 01       	movw	r24, r12
    152a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <strcpy>
    152e:	c6 01       	movw	r24, r12
    1530:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
      err = updateFreq(freq,clar,1);
    1534:	21 e0       	ldi	r18, 0x01	; 1
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	61 2f       	mov	r22, r17
    153a:	70 2f       	mov	r23, r16
    153c:	8f 2d       	mov	r24, r15
    153e:	9e 2d       	mov	r25, r14
    1540:	0e 94 ef 03 	call	0x7de	; 0x7de <updateFreq>
      if (err) {
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	88 23       	and	r24, r24
    1550:	b1 f0       	breq	.+44     	; 0x157e <__stack+0x47f>
	sprintf(buffer,"Err %x         ",err);
    1552:	1f 92       	push	r1
    1554:	8f 93       	push	r24
    1556:	81 e1       	ldi	r24, 0x11	; 17
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	9f 93       	push	r25
    155c:	8f 93       	push	r24
    155e:	df 92       	push	r13
    1560:	cf 92       	push	r12
    1562:	0e 94 21 14 	call	0x2842	; 0x2842 <sprintf>
	lcd_goto(0x40);
    1566:	80 e4       	ldi	r24, 0x40	; 64
    1568:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	lcd_puts(buffer);	
    156c:	c6 01       	movw	r24, r12
    156e:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
      }      
      err = updateSettings();
    157e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <updateSettings>
      if (err) {
    1582:	88 23       	and	r24, r24
    1584:	b1 f0       	breq	.+44     	; 0x15b2 <__stack+0x4b3>
	sprintf(buffer,"Err %x         ",err);
    1586:	1f 92       	push	r1
    1588:	8f 93       	push	r24
    158a:	81 e1       	ldi	r24, 0x11	; 17
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	9f 93       	push	r25
    1590:	8f 93       	push	r24
    1592:	df 92       	push	r13
    1594:	cf 92       	push	r12
    1596:	0e 94 21 14 	call	0x2842	; 0x2842 <sprintf>
	lcd_goto(0x40);
    159a:	80 e4       	ldi	r24, 0x40	; 64
    159c:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	lcd_puts(buffer);	
    15a0:	c6 01       	movw	r24, r12
    15a2:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	8f e4       	ldi	r24, 0x4F	; 79
    15b4:	93 ec       	ldi	r25, 0xC3	; 195
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <__stack+0x4b7>
    15ba:	00 c0       	rjmp	.+0      	; 0x15bc <__stack+0x4bd>
    15bc:	00 00       	nop
      }      
      _delay_ms(200);
      band_flag = 0x00;
    15be:	10 92 c2 01 	sts	0x01C2, r1
    15c2:	d9 cc       	rjmp	.-1614   	; 0xf76 <main+0x13e>
    }
    else if (rot_flag) {
    15c4:	80 91 c3 01 	lds	r24, 0x01C3
    15c8:	88 23       	and	r24, r24
    15ca:	09 f4       	brne	.+2      	; 0x15ce <__stack+0x4cf>
    15cc:	f6 c0       	rjmp	.+492    	; 0x17ba <__stack+0x6bb>
      if (rot_flag != last_dir) {
    15ce:	80 91 c3 01 	lds	r24, 0x01C3
    15d2:	23 96       	adiw	r28, 0x03	; 3
    15d4:	9f ad       	ldd	r25, Y+63	; 0x3f
    15d6:	23 97       	sbiw	r28, 0x03	; 3
    15d8:	89 17       	cp	r24, r25
    15da:	49 f0       	breq	.+18     	; 0x15ee <__stack+0x4ef>
	steps = 0;
	step_timer = 0;
    15dc:	10 92 ca 01 	sts	0x01CA, r1
    15e0:	10 92 c9 01 	sts	0x01C9, r1
	last_dir = rot_flag;
    15e4:	80 91 c3 01 	lds	r24, 0x01C3
      _delay_ms(200);
      band_flag = 0x00;
    }
    else if (rot_flag) {
      if (rot_flag != last_dir) {
	steps = 0;
    15e8:	61 2c       	mov	r6, r1
    15ea:	71 2c       	mov	r7, r1
    15ec:	e0 c0       	rjmp	.+448    	; 0x17ae <__stack+0x6af>
	step_timer = 0;
	last_dir = rot_flag;
      }
      else if (rot_flag == 0x01) {
    15ee:	90 91 c3 01 	lds	r25, 0x01C3
    15f2:	91 30       	cpi	r25, 0x01	; 1
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <__stack+0x4f9>
    15f6:	66 c0       	rjmp	.+204    	; 0x16c4 <__stack+0x5c5>
	if (step_timer < 30) {
    15f8:	80 91 c9 01 	lds	r24, 0x01C9
    15fc:	90 91 ca 01 	lds	r25, 0x01CA
	  step_timer = 0;
    1600:	10 92 ca 01 	sts	0x01CA, r1
    1604:	10 92 c9 01 	sts	0x01C9, r1
	steps = 0;
	step_timer = 0;
	last_dir = rot_flag;
      }
      else if (rot_flag == 0x01) {
	if (step_timer < 30) {
    1608:	4e 97       	sbiw	r24, 0x1e	; 30
    160a:	48 f4       	brcc	.+18     	; 0x161e <__stack+0x51f>
	  step_timer = 0;
	  steps ++;
    160c:	af ef       	ldi	r26, 0xFF	; 255
    160e:	6a 1a       	sub	r6, r26
    1610:	7a 0a       	sbc	r7, r26
	else {
	  step_timer = 0;
	  steps = 1;
	}
	
	if (steps > 500) {
    1612:	b5 ef       	ldi	r27, 0xF5	; 245
    1614:	6b 16       	cp	r6, r27
    1616:	b1 e0       	ldi	r27, 0x01	; 1
    1618:	7b 06       	cpc	r7, r27
    161a:	28 f4       	brcc	.+10     	; 0x1626 <__stack+0x527>
    161c:	16 c0       	rjmp	.+44     	; 0x164a <__stack+0x54b>
	  step_timer = 0;
	  steps ++;
	}
	else {
	  step_timer = 0;
	  steps = 1;
    161e:	66 24       	eor	r6, r6
    1620:	63 94       	inc	r6
    1622:	71 2c       	mov	r7, r1
    1624:	2d c0       	rjmp	.+90     	; 0x1680 <__stack+0x581>
	}
	
	if (steps > 500) {
	  if (mode == AM)
    1626:	80 91 c5 01 	lds	r24, 0x01C5
    162a:	88 30       	cpi	r24, 0x08	; 8
    162c:	29 f4       	brne	.+10     	; 0x1638 <__stack+0x539>
	    freq += 20;
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 ea       	ldi	r20, 0xA0	; 160
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	3a c0       	rjmp	.+116    	; 0x16ac <__stack+0x5ad>
	  else if (mode == FM)
    1638:	80 91 c5 01 	lds	r24, 0x01C5
    163c:	8a 30       	cpi	r24, 0x0A	; 10
    163e:	21 f5       	brne	.+72     	; 0x1688 <__stack+0x589>
	    freq += 50;
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	48 e4       	ldi	r20, 0x48	; 72
    1646:	52 e4       	ldi	r21, 0x42	; 66
    1648:	31 c0       	rjmp	.+98     	; 0x16ac <__stack+0x5ad>
	  else
	    freq += 1;
	}
	else if (steps > 150) {
    164a:	27 e9       	ldi	r18, 0x97	; 151
    164c:	62 16       	cp	r6, r18
    164e:	71 04       	cpc	r7, r1
    1650:	b8 f0       	brcs	.+46     	; 0x1680 <__stack+0x581>
	  if (mode == AM)
    1652:	80 91 c5 01 	lds	r24, 0x01C5
    1656:	88 30       	cpi	r24, 0x08	; 8
    1658:	29 f4       	brne	.+10     	; 0x1664 <__stack+0x565>
	    freq += 5;
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	40 ea       	ldi	r20, 0xA0	; 160
    1660:	50 e4       	ldi	r21, 0x40	; 64
    1662:	24 c0       	rjmp	.+72     	; 0x16ac <__stack+0x5ad>
	  else if (mode == FM)
    1664:	80 91 c5 01 	lds	r24, 0x01C5
    1668:	8a 30       	cpi	r24, 0x0A	; 10
    166a:	29 f4       	brne	.+10     	; 0x1676 <__stack+0x577>
	    freq += 25;
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	48 ec       	ldi	r20, 0xC8	; 200
    1672:	51 e4       	ldi	r21, 0x41	; 65
    1674:	1b c0       	rjmp	.+54     	; 0x16ac <__stack+0x5ad>
	  else
	    freq += 0.5;
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	16 c0       	rjmp	.+44     	; 0x16ac <__stack+0x5ad>
	}
	else {
	  if (mode == AM)
    1680:	80 91 c5 01 	lds	r24, 0x01C5
    1684:	88 30       	cpi	r24, 0x08	; 8
    1686:	29 f4       	brne	.+10     	; 0x1692 <__stack+0x593>
	    freq += 1;
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	40 e8       	ldi	r20, 0x80	; 128
    168e:	5f e3       	ldi	r21, 0x3F	; 63
    1690:	0d c0       	rjmp	.+26     	; 0x16ac <__stack+0x5ad>
	  else if (mode == FM)
    1692:	80 91 c5 01 	lds	r24, 0x01C5
    1696:	8a 30       	cpi	r24, 0x0A	; 10
    1698:	29 f4       	brne	.+10     	; 0x16a4 <__stack+0x5a5>
	    freq += 2.5;
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e2       	ldi	r20, 0x20	; 32
    16a0:	50 e4       	ldi	r21, 0x40	; 64
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <__stack+0x5ad>
	  else
	    freq+=0.05;
    16a4:	2d ec       	ldi	r18, 0xCD	; 205
    16a6:	3c ec       	ldi	r19, 0xCC	; 204
    16a8:	4c e4       	ldi	r20, 0x4C	; 76
    16aa:	5d e3       	ldi	r21, 0x3D	; 61
    16ac:	61 2f       	mov	r22, r17
    16ae:	70 2f       	mov	r23, r16
    16b0:	8f 2d       	mov	r24, r15
    16b2:	9e 2d       	mov	r25, r14
    16b4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__addsf3>
    16b8:	16 2f       	mov	r17, r22
    16ba:	07 2f       	mov	r16, r23
    16bc:	f8 2e       	mov	r15, r24
    16be:	e9 2e       	mov	r14, r25
	}
	last_dir = 0x01;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	75 c0       	rjmp	.+234    	; 0x17ae <__stack+0x6af>
      }
      else if (rot_flag == 0x02) {
    16c4:	90 91 c3 01 	lds	r25, 0x01C3
    16c8:	92 30       	cpi	r25, 0x02	; 2
    16ca:	09 f0       	breq	.+2      	; 0x16ce <__stack+0x5cf>
    16cc:	70 c0       	rjmp	.+224    	; 0x17ae <__stack+0x6af>
	if ((step_timer < 30) && (last_dir == rot_flag)) {
    16ce:	80 91 c9 01 	lds	r24, 0x01C9
    16d2:	90 91 ca 01 	lds	r25, 0x01CA
    16d6:	4e 97       	sbiw	r24, 0x1e	; 30
    16d8:	a0 f4       	brcc	.+40     	; 0x1702 <__stack+0x603>
    16da:	80 91 c3 01 	lds	r24, 0x01C3
    16de:	23 96       	adiw	r28, 0x03	; 3
    16e0:	3f ad       	ldd	r19, Y+63	; 0x3f
    16e2:	23 97       	sbiw	r28, 0x03	; 3
    16e4:	38 13       	cpse	r19, r24
    16e6:	0d c0       	rjmp	.+26     	; 0x1702 <__stack+0x603>
	  step_timer = 0;
    16e8:	10 92 ca 01 	sts	0x01CA, r1
    16ec:	10 92 c9 01 	sts	0x01C9, r1
	  steps ++;
    16f0:	8f ef       	ldi	r24, 0xFF	; 255
    16f2:	68 1a       	sub	r6, r24
    16f4:	78 0a       	sbc	r7, r24
	else {
	  step_timer = 0;
	  steps = 1;
	}
	
	if (steps > 500) {
    16f6:	95 ef       	ldi	r25, 0xF5	; 245
    16f8:	69 16       	cp	r6, r25
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	79 06       	cpc	r7, r25
    16fe:	48 f4       	brcc	.+18     	; 0x1712 <__stack+0x613>
    1700:	1a c0       	rjmp	.+52     	; 0x1736 <__stack+0x637>
	if ((step_timer < 30) && (last_dir == rot_flag)) {
	  step_timer = 0;
	  steps ++;
	}
	else {
	  step_timer = 0;
    1702:	10 92 ca 01 	sts	0x01CA, r1
    1706:	10 92 c9 01 	sts	0x01C9, r1
	  steps = 1;
    170a:	66 24       	eor	r6, r6
    170c:	63 94       	inc	r6
    170e:	71 2c       	mov	r7, r1
    1710:	2d c0       	rjmp	.+90     	; 0x176c <__stack+0x66d>
	}
	
	if (steps > 500) {
	  if (mode == AM)
    1712:	80 91 c5 01 	lds	r24, 0x01C5
    1716:	88 30       	cpi	r24, 0x08	; 8
    1718:	29 f4       	brne	.+10     	; 0x1724 <__stack+0x625>
	    freq -= 20;
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 ea       	ldi	r20, 0xA0	; 160
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	3a c0       	rjmp	.+116    	; 0x1798 <__stack+0x699>
	  else if (mode == FM)
    1724:	80 91 c5 01 	lds	r24, 0x01C5
    1728:	8a 30       	cpi	r24, 0x0A	; 10
    172a:	21 f5       	brne	.+72     	; 0x1774 <__stack+0x675>
	    freq -= 50;
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	48 e4       	ldi	r20, 0x48	; 72
    1732:	52 e4       	ldi	r21, 0x42	; 66
    1734:	31 c0       	rjmp	.+98     	; 0x1798 <__stack+0x699>
	  else
	    freq -= 1;
	}
	else if (steps > 150) {
    1736:	a7 e9       	ldi	r26, 0x97	; 151
    1738:	6a 16       	cp	r6, r26
    173a:	71 04       	cpc	r7, r1
    173c:	b8 f0       	brcs	.+46     	; 0x176c <__stack+0x66d>
	  if (mode == AM)
    173e:	80 91 c5 01 	lds	r24, 0x01C5
    1742:	88 30       	cpi	r24, 0x08	; 8
    1744:	29 f4       	brne	.+10     	; 0x1750 <__stack+0x651>
	    freq -= 5;
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 ea       	ldi	r20, 0xA0	; 160
    174c:	50 e4       	ldi	r21, 0x40	; 64
    174e:	24 c0       	rjmp	.+72     	; 0x1798 <__stack+0x699>
	  else if (mode == FM)
    1750:	80 91 c5 01 	lds	r24, 0x01C5
    1754:	8a 30       	cpi	r24, 0x0A	; 10
    1756:	29 f4       	brne	.+10     	; 0x1762 <__stack+0x663>
	    freq -= 25;
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	48 ec       	ldi	r20, 0xC8	; 200
    175e:	51 e4       	ldi	r21, 0x41	; 65
    1760:	1b c0       	rjmp	.+54     	; 0x1798 <__stack+0x699>
	  else
	    freq -= 0.5;
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	5f e3       	ldi	r21, 0x3F	; 63
    176a:	16 c0       	rjmp	.+44     	; 0x1798 <__stack+0x699>
	}
	else {
	  if (mode == AM)
    176c:	80 91 c5 01 	lds	r24, 0x01C5
    1770:	88 30       	cpi	r24, 0x08	; 8
    1772:	29 f4       	brne	.+10     	; 0x177e <__stack+0x67f>
	    freq -= 1;
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	40 e8       	ldi	r20, 0x80	; 128
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <__stack+0x699>
	  else if (mode == FM)
    177e:	80 91 c5 01 	lds	r24, 0x01C5
    1782:	8a 30       	cpi	r24, 0x0A	; 10
    1784:	29 f4       	brne	.+10     	; 0x1790 <__stack+0x691>
	    freq -= 2.5;
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e2       	ldi	r20, 0x20	; 32
    178c:	50 e4       	ldi	r21, 0x40	; 64
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <__stack+0x699>
	  else
	    freq-=0.05;
    1790:	2d ec       	ldi	r18, 0xCD	; 205
    1792:	3c ec       	ldi	r19, 0xCC	; 204
    1794:	4c e4       	ldi	r20, 0x4C	; 76
    1796:	5d e3       	ldi	r21, 0x3D	; 61
    1798:	61 2f       	mov	r22, r17
    179a:	70 2f       	mov	r23, r16
    179c:	8f 2d       	mov	r24, r15
    179e:	9e 2d       	mov	r25, r14
    17a0:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <__subsf3>
    17a4:	16 2f       	mov	r17, r22
    17a6:	07 2f       	mov	r16, r23
    17a8:	f8 2e       	mov	r15, r24
    17aa:	e9 2e       	mov	r14, r25
	}
      last_dir = 0x02;
    17ac:	82 e0       	ldi	r24, 0x02	; 2
      }
      //_delay_ms(30);

      rot_flag = 0x00;
    17ae:	10 92 c3 01 	sts	0x01C3, r1
    17b2:	23 96       	adiw	r28, 0x03	; 3
    17b4:	8f af       	std	Y+63, r24	; 0x3f
    17b6:	23 97       	sbiw	r28, 0x03	; 3
    17b8:	de cb       	rjmp	.-2116   	; 0xf76 <main+0x13e>
    }
    else if (vol_flag) {
    17ba:	80 91 c4 01 	lds	r24, 0x01C4
    17be:	88 23       	and	r24, r24
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <__stack+0x6c5>
    17c2:	d9 cb       	rjmp	.-2126   	; 0xf76 <main+0x13e>
      if (vol_timer > 1) {
    17c4:	80 91 00 01 	lds	r24, 0x0100
    17c8:	82 30       	cpi	r24, 0x02	; 2
    17ca:	08 f4       	brcc	.+2      	; 0x17ce <__stack+0x6cf>
    17cc:	46 c0       	rjmp	.+140    	; 0x185a <__stack+0x75b>
	if (vol_flag == 0x01) {
    17ce:	80 91 c4 01 	lds	r24, 0x01C4
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	29 f4       	brne	.+10     	; 0x17e0 <__stack+0x6e1>
	  if(vol<31)
    17d6:	be e1       	ldi	r27, 0x1E	; 30
    17d8:	b9 15       	cp	r27, r9
    17da:	40 f0       	brcs	.+16     	; 0x17ec <__stack+0x6ed>
	    vol ++; // Higher means lower 
    17dc:	93 94       	inc	r9
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <__stack+0x6ed>
	  sprintf(buffer,"Vol %d    ", 31-vol);
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (vol_flag == 0x02) {
    17e0:	80 91 c4 01 	lds	r24, 0x01C4
    17e4:	82 30       	cpi	r24, 0x02	; 2
    17e6:	e1 f4       	brne	.+56     	; 0x1820 <__stack+0x721>
	  if(vol>0)
    17e8:	91 10       	cpse	r9, r1
	    vol --;
    17ea:	9a 94       	dec	r9
	  sprintf(buffer,"Vol %d    ", 31-vol);
    17ec:	8f e1       	ldi	r24, 0x1F	; 31
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	89 19       	sub	r24, r9
    17f2:	91 09       	sbc	r25, r1
    17f4:	9f 93       	push	r25
    17f6:	8f 93       	push	r24
    17f8:	8f e9       	ldi	r24, 0x9F	; 159
    17fa:	91 e0       	ldi	r25, 0x01	; 1
    17fc:	9f 93       	push	r25
    17fe:	8f 93       	push	r24
    1800:	df 92       	push	r13
    1802:	cf 92       	push	r12
    1804:	0e 94 21 14 	call	0x2842	; 0x2842 <sprintf>
	  lcd_goto(0x40);
    1808:	80 e4       	ldi	r24, 0x40	; 64
    180a:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	  lcd_puts(buffer);
    180e:	c6 01       	movw	r24, r12
    1810:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
	}

	err = updateVolume(vol);
    1820:	89 2d       	mov	r24, r9
    1822:	0e 94 ae 03 	call	0x75c	; 0x75c <updateVolume>

	if (err) {
    1826:	88 23       	and	r24, r24
    1828:	b1 f0       	breq	.+44     	; 0x1856 <__stack+0x757>
	  sprintf(buffer,"Err %x         ",err);
    182a:	1f 92       	push	r1
    182c:	8f 93       	push	r24
    182e:	81 e1       	ldi	r24, 0x11	; 17
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	9f 93       	push	r25
    1834:	8f 93       	push	r24
    1836:	df 92       	push	r13
    1838:	cf 92       	push	r12
    183a:	0e 94 21 14 	call	0x2842	; 0x2842 <sprintf>
	  lcd_goto(0x40);
    183e:	80 e4       	ldi	r24, 0x40	; 64
    1840:	0e 94 98 06 	call	0xd30	; 0xd30 <lcd_goto>
	  lcd_puts(buffer);	
    1844:	c6 01       	movw	r24, r12
    1846:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_puts>
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	0f 90       	pop	r0
	}      
	vol_timer = 0;
    1856:	10 92 00 01 	sts	0x0100, r1
      }
      vol_flag = 0x00;
    185a:	10 92 c4 01 	sts	0x01C4, r1
    185e:	8b cb       	rjmp	.-2282   	; 0xf76 <main+0x13e>

00001860 <vfprintf>:
    1860:	2f 92       	push	r2
    1862:	3f 92       	push	r3
    1864:	4f 92       	push	r4
    1866:	5f 92       	push	r5
    1868:	6f 92       	push	r6
    186a:	7f 92       	push	r7
    186c:	8f 92       	push	r8
    186e:	9f 92       	push	r9
    1870:	af 92       	push	r10
    1872:	bf 92       	push	r11
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	63 97       	sbiw	r28, 0x13	; 19
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	6c 01       	movw	r12, r24
    1896:	4b 01       	movw	r8, r22
    1898:	2a 01       	movw	r4, r20
    189a:	fc 01       	movw	r30, r24
    189c:	17 82       	std	Z+7, r1	; 0x07
    189e:	16 82       	std	Z+6, r1	; 0x06
    18a0:	83 81       	ldd	r24, Z+3	; 0x03
    18a2:	81 ff       	sbrs	r24, 1
    18a4:	43 c3       	rjmp	.+1670   	; 0x1f2c <vfprintf+0x6cc>
    18a6:	ae 01       	movw	r20, r28
    18a8:	4f 5f       	subi	r20, 0xFF	; 255
    18aa:	5f 4f       	sbci	r21, 0xFF	; 255
    18ac:	3a 01       	movw	r6, r20
    18ae:	f6 01       	movw	r30, r12
    18b0:	93 81       	ldd	r25, Z+3	; 0x03
    18b2:	f4 01       	movw	r30, r8
    18b4:	93 fd       	sbrc	r25, 3
    18b6:	85 91       	lpm	r24, Z+
    18b8:	93 ff       	sbrs	r25, 3
    18ba:	81 91       	ld	r24, Z+
    18bc:	4f 01       	movw	r8, r30
    18be:	88 23       	and	r24, r24
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <vfprintf+0x64>
    18c2:	30 c3       	rjmp	.+1632   	; 0x1f24 <vfprintf+0x6c4>
    18c4:	85 32       	cpi	r24, 0x25	; 37
    18c6:	39 f4       	brne	.+14     	; 0x18d6 <vfprintf+0x76>
    18c8:	93 fd       	sbrc	r25, 3
    18ca:	85 91       	lpm	r24, Z+
    18cc:	93 ff       	sbrs	r25, 3
    18ce:	81 91       	ld	r24, Z+
    18d0:	4f 01       	movw	r8, r30
    18d2:	85 32       	cpi	r24, 0x25	; 37
    18d4:	39 f4       	brne	.+14     	; 0x18e4 <vfprintf+0x84>
    18d6:	b6 01       	movw	r22, r12
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    18de:	52 01       	movw	r10, r4
    18e0:	25 01       	movw	r4, r10
    18e2:	e5 cf       	rjmp	.-54     	; 0x18ae <vfprintf+0x4e>
    18e4:	10 e0       	ldi	r17, 0x00	; 0
    18e6:	f1 2c       	mov	r15, r1
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	20 32       	cpi	r18, 0x20	; 32
    18ec:	a0 f4       	brcc	.+40     	; 0x1916 <vfprintf+0xb6>
    18ee:	8b 32       	cpi	r24, 0x2B	; 43
    18f0:	69 f0       	breq	.+26     	; 0x190c <vfprintf+0xac>
    18f2:	30 f4       	brcc	.+12     	; 0x1900 <vfprintf+0xa0>
    18f4:	80 32       	cpi	r24, 0x20	; 32
    18f6:	59 f0       	breq	.+22     	; 0x190e <vfprintf+0xae>
    18f8:	83 32       	cpi	r24, 0x23	; 35
    18fa:	69 f4       	brne	.+26     	; 0x1916 <vfprintf+0xb6>
    18fc:	20 61       	ori	r18, 0x10	; 16
    18fe:	2c c0       	rjmp	.+88     	; 0x1958 <vfprintf+0xf8>
    1900:	8d 32       	cpi	r24, 0x2D	; 45
    1902:	39 f0       	breq	.+14     	; 0x1912 <vfprintf+0xb2>
    1904:	80 33       	cpi	r24, 0x30	; 48
    1906:	39 f4       	brne	.+14     	; 0x1916 <vfprintf+0xb6>
    1908:	21 60       	ori	r18, 0x01	; 1
    190a:	26 c0       	rjmp	.+76     	; 0x1958 <vfprintf+0xf8>
    190c:	22 60       	ori	r18, 0x02	; 2
    190e:	24 60       	ori	r18, 0x04	; 4
    1910:	23 c0       	rjmp	.+70     	; 0x1958 <vfprintf+0xf8>
    1912:	28 60       	ori	r18, 0x08	; 8
    1914:	21 c0       	rjmp	.+66     	; 0x1958 <vfprintf+0xf8>
    1916:	27 fd       	sbrc	r18, 7
    1918:	27 c0       	rjmp	.+78     	; 0x1968 <vfprintf+0x108>
    191a:	30 ed       	ldi	r19, 0xD0	; 208
    191c:	38 0f       	add	r19, r24
    191e:	3a 30       	cpi	r19, 0x0A	; 10
    1920:	78 f4       	brcc	.+30     	; 0x1940 <vfprintf+0xe0>
    1922:	26 ff       	sbrs	r18, 6
    1924:	06 c0       	rjmp	.+12     	; 0x1932 <vfprintf+0xd2>
    1926:	fa e0       	ldi	r31, 0x0A	; 10
    1928:	1f 9f       	mul	r17, r31
    192a:	30 0d       	add	r19, r0
    192c:	11 24       	eor	r1, r1
    192e:	13 2f       	mov	r17, r19
    1930:	13 c0       	rjmp	.+38     	; 0x1958 <vfprintf+0xf8>
    1932:	4a e0       	ldi	r20, 0x0A	; 10
    1934:	f4 9e       	mul	r15, r20
    1936:	30 0d       	add	r19, r0
    1938:	11 24       	eor	r1, r1
    193a:	f3 2e       	mov	r15, r19
    193c:	20 62       	ori	r18, 0x20	; 32
    193e:	0c c0       	rjmp	.+24     	; 0x1958 <vfprintf+0xf8>
    1940:	8e 32       	cpi	r24, 0x2E	; 46
    1942:	21 f4       	brne	.+8      	; 0x194c <vfprintf+0xec>
    1944:	26 fd       	sbrc	r18, 6
    1946:	ee c2       	rjmp	.+1500   	; 0x1f24 <vfprintf+0x6c4>
    1948:	20 64       	ori	r18, 0x40	; 64
    194a:	06 c0       	rjmp	.+12     	; 0x1958 <vfprintf+0xf8>
    194c:	8c 36       	cpi	r24, 0x6C	; 108
    194e:	11 f4       	brne	.+4      	; 0x1954 <vfprintf+0xf4>
    1950:	20 68       	ori	r18, 0x80	; 128
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <vfprintf+0xf8>
    1954:	88 36       	cpi	r24, 0x68	; 104
    1956:	41 f4       	brne	.+16     	; 0x1968 <vfprintf+0x108>
    1958:	f4 01       	movw	r30, r8
    195a:	93 fd       	sbrc	r25, 3
    195c:	85 91       	lpm	r24, Z+
    195e:	93 ff       	sbrs	r25, 3
    1960:	81 91       	ld	r24, Z+
    1962:	4f 01       	movw	r8, r30
    1964:	81 11       	cpse	r24, r1
    1966:	c1 cf       	rjmp	.-126    	; 0x18ea <vfprintf+0x8a>
    1968:	9b eb       	ldi	r25, 0xBB	; 187
    196a:	98 0f       	add	r25, r24
    196c:	93 30       	cpi	r25, 0x03	; 3
    196e:	18 f4       	brcc	.+6      	; 0x1976 <vfprintf+0x116>
    1970:	20 61       	ori	r18, 0x10	; 16
    1972:	80 5e       	subi	r24, 0xE0	; 224
    1974:	06 c0       	rjmp	.+12     	; 0x1982 <vfprintf+0x122>
    1976:	9b e9       	ldi	r25, 0x9B	; 155
    1978:	98 0f       	add	r25, r24
    197a:	93 30       	cpi	r25, 0x03	; 3
    197c:	08 f0       	brcs	.+2      	; 0x1980 <vfprintf+0x120>
    197e:	71 c1       	rjmp	.+738    	; 0x1c62 <vfprintf+0x402>
    1980:	2f 7e       	andi	r18, 0xEF	; 239
    1982:	26 ff       	sbrs	r18, 6
    1984:	16 e0       	ldi	r17, 0x06	; 6
    1986:	2f 73       	andi	r18, 0x3F	; 63
    1988:	32 2e       	mov	r3, r18
    198a:	85 36       	cpi	r24, 0x65	; 101
    198c:	19 f4       	brne	.+6      	; 0x1994 <vfprintf+0x134>
    198e:	20 64       	ori	r18, 0x40	; 64
    1990:	32 2e       	mov	r3, r18
    1992:	08 c0       	rjmp	.+16     	; 0x19a4 <vfprintf+0x144>
    1994:	86 36       	cpi	r24, 0x66	; 102
    1996:	21 f4       	brne	.+8      	; 0x19a0 <vfprintf+0x140>
    1998:	f2 2f       	mov	r31, r18
    199a:	f0 68       	ori	r31, 0x80	; 128
    199c:	3f 2e       	mov	r3, r31
    199e:	02 c0       	rjmp	.+4      	; 0x19a4 <vfprintf+0x144>
    19a0:	11 11       	cpse	r17, r1
    19a2:	11 50       	subi	r17, 0x01	; 1
    19a4:	37 fe       	sbrs	r3, 7
    19a6:	07 c0       	rjmp	.+14     	; 0x19b6 <vfprintf+0x156>
    19a8:	1c 33       	cpi	r17, 0x3C	; 60
    19aa:	50 f4       	brcc	.+20     	; 0x19c0 <vfprintf+0x160>
    19ac:	ee 24       	eor	r14, r14
    19ae:	e3 94       	inc	r14
    19b0:	e1 0e       	add	r14, r17
    19b2:	27 e0       	ldi	r18, 0x07	; 7
    19b4:	0b c0       	rjmp	.+22     	; 0x19cc <vfprintf+0x16c>
    19b6:	18 30       	cpi	r17, 0x08	; 8
    19b8:	38 f0       	brcs	.+14     	; 0x19c8 <vfprintf+0x168>
    19ba:	27 e0       	ldi	r18, 0x07	; 7
    19bc:	17 e0       	ldi	r17, 0x07	; 7
    19be:	05 c0       	rjmp	.+10     	; 0x19ca <vfprintf+0x16a>
    19c0:	27 e0       	ldi	r18, 0x07	; 7
    19c2:	4c e3       	ldi	r20, 0x3C	; 60
    19c4:	e4 2e       	mov	r14, r20
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <vfprintf+0x16c>
    19c8:	21 2f       	mov	r18, r17
    19ca:	e1 2c       	mov	r14, r1
    19cc:	52 01       	movw	r10, r4
    19ce:	44 e0       	ldi	r20, 0x04	; 4
    19d0:	a4 0e       	add	r10, r20
    19d2:	b1 1c       	adc	r11, r1
    19d4:	f2 01       	movw	r30, r4
    19d6:	60 81       	ld	r22, Z
    19d8:	71 81       	ldd	r23, Z+1	; 0x01
    19da:	82 81       	ldd	r24, Z+2	; 0x02
    19dc:	93 81       	ldd	r25, Z+3	; 0x03
    19de:	0e 2d       	mov	r16, r14
    19e0:	a3 01       	movw	r20, r6
    19e2:	0e 94 ed 12 	call	0x25da	; 0x25da <__ftoa_engine>
    19e6:	2c 01       	movw	r4, r24
    19e8:	09 81       	ldd	r16, Y+1	; 0x01
    19ea:	00 ff       	sbrs	r16, 0
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <vfprintf+0x192>
    19ee:	03 ff       	sbrs	r16, 3
    19f0:	07 c0       	rjmp	.+14     	; 0x1a00 <vfprintf+0x1a0>
    19f2:	31 fc       	sbrc	r3, 1
    19f4:	08 c0       	rjmp	.+16     	; 0x1a06 <vfprintf+0x1a6>
    19f6:	32 fe       	sbrs	r3, 2
    19f8:	09 c0       	rjmp	.+18     	; 0x1a0c <vfprintf+0x1ac>
    19fa:	30 e2       	ldi	r19, 0x20	; 32
    19fc:	23 2e       	mov	r2, r19
    19fe:	07 c0       	rjmp	.+14     	; 0x1a0e <vfprintf+0x1ae>
    1a00:	2d e2       	ldi	r18, 0x2D	; 45
    1a02:	22 2e       	mov	r2, r18
    1a04:	04 c0       	rjmp	.+8      	; 0x1a0e <vfprintf+0x1ae>
    1a06:	9b e2       	ldi	r25, 0x2B	; 43
    1a08:	29 2e       	mov	r2, r25
    1a0a:	01 c0       	rjmp	.+2      	; 0x1a0e <vfprintf+0x1ae>
    1a0c:	21 2c       	mov	r2, r1
    1a0e:	80 2f       	mov	r24, r16
    1a10:	8c 70       	andi	r24, 0x0C	; 12
    1a12:	19 f0       	breq	.+6      	; 0x1a1a <vfprintf+0x1ba>
    1a14:	21 10       	cpse	r2, r1
    1a16:	68 c2       	rjmp	.+1232   	; 0x1ee8 <vfprintf+0x688>
    1a18:	a8 c2       	rjmp	.+1360   	; 0x1f6a <vfprintf+0x70a>
    1a1a:	37 fe       	sbrs	r3, 7
    1a1c:	0f c0       	rjmp	.+30     	; 0x1a3c <vfprintf+0x1dc>
    1a1e:	e4 0c       	add	r14, r4
    1a20:	04 ff       	sbrs	r16, 4
    1a22:	04 c0       	rjmp	.+8      	; 0x1a2c <vfprintf+0x1cc>
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	81 33       	cpi	r24, 0x31	; 49
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <vfprintf+0x1cc>
    1a2a:	ea 94       	dec	r14
    1a2c:	1e 14       	cp	r1, r14
    1a2e:	74 f5       	brge	.+92     	; 0x1a8c <vfprintf+0x22c>
    1a30:	f8 e0       	ldi	r31, 0x08	; 8
    1a32:	fe 15       	cp	r31, r14
    1a34:	78 f5       	brcc	.+94     	; 0x1a94 <vfprintf+0x234>
    1a36:	88 e0       	ldi	r24, 0x08	; 8
    1a38:	e8 2e       	mov	r14, r24
    1a3a:	2c c0       	rjmp	.+88     	; 0x1a94 <vfprintf+0x234>
    1a3c:	36 fc       	sbrc	r3, 6
    1a3e:	2a c0       	rjmp	.+84     	; 0x1a94 <vfprintf+0x234>
    1a40:	81 2f       	mov	r24, r17
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	84 15       	cp	r24, r4
    1a46:	95 05       	cpc	r25, r5
    1a48:	9c f0       	brlt	.+38     	; 0x1a70 <vfprintf+0x210>
    1a4a:	2c ef       	ldi	r18, 0xFC	; 252
    1a4c:	42 16       	cp	r4, r18
    1a4e:	2f ef       	ldi	r18, 0xFF	; 255
    1a50:	52 06       	cpc	r5, r18
    1a52:	74 f0       	brlt	.+28     	; 0x1a70 <vfprintf+0x210>
    1a54:	43 2d       	mov	r20, r3
    1a56:	40 68       	ori	r20, 0x80	; 128
    1a58:	34 2e       	mov	r3, r20
    1a5a:	0a c0       	rjmp	.+20     	; 0x1a70 <vfprintf+0x210>
    1a5c:	e2 e0       	ldi	r30, 0x02	; 2
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	ec 0f       	add	r30, r28
    1a62:	fd 1f       	adc	r31, r29
    1a64:	e1 0f       	add	r30, r17
    1a66:	f1 1d       	adc	r31, r1
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 33       	cpi	r24, 0x30	; 48
    1a6c:	19 f4       	brne	.+6      	; 0x1a74 <vfprintf+0x214>
    1a6e:	11 50       	subi	r17, 0x01	; 1
    1a70:	11 11       	cpse	r17, r1
    1a72:	f4 cf       	rjmp	.-24     	; 0x1a5c <vfprintf+0x1fc>
    1a74:	37 fe       	sbrs	r3, 7
    1a76:	0e c0       	rjmp	.+28     	; 0x1a94 <vfprintf+0x234>
    1a78:	ee 24       	eor	r14, r14
    1a7a:	e3 94       	inc	r14
    1a7c:	e1 0e       	add	r14, r17
    1a7e:	81 2f       	mov	r24, r17
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	48 16       	cp	r4, r24
    1a84:	59 06       	cpc	r5, r25
    1a86:	2c f4       	brge	.+10     	; 0x1a92 <vfprintf+0x232>
    1a88:	14 19       	sub	r17, r4
    1a8a:	04 c0       	rjmp	.+8      	; 0x1a94 <vfprintf+0x234>
    1a8c:	ee 24       	eor	r14, r14
    1a8e:	e3 94       	inc	r14
    1a90:	01 c0       	rjmp	.+2      	; 0x1a94 <vfprintf+0x234>
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	37 fe       	sbrs	r3, 7
    1a96:	06 c0       	rjmp	.+12     	; 0x1aa4 <vfprintf+0x244>
    1a98:	14 14       	cp	r1, r4
    1a9a:	15 04       	cpc	r1, r5
    1a9c:	34 f4       	brge	.+12     	; 0x1aaa <vfprintf+0x24a>
    1a9e:	c2 01       	movw	r24, r4
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	05 c0       	rjmp	.+10     	; 0x1aae <vfprintf+0x24e>
    1aa4:	85 e0       	ldi	r24, 0x05	; 5
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <vfprintf+0x24e>
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	21 10       	cpse	r2, r1
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	11 23       	and	r17, r17
    1ab4:	31 f0       	breq	.+12     	; 0x1ac2 <vfprintf+0x262>
    1ab6:	21 2f       	mov	r18, r17
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	2f 5f       	subi	r18, 0xFF	; 255
    1abc:	3f 4f       	sbci	r19, 0xFF	; 255
    1abe:	82 0f       	add	r24, r18
    1ac0:	93 1f       	adc	r25, r19
    1ac2:	2f 2d       	mov	r18, r15
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	82 17       	cp	r24, r18
    1ac8:	93 07       	cpc	r25, r19
    1aca:	14 f4       	brge	.+4      	; 0x1ad0 <vfprintf+0x270>
    1acc:	f8 1a       	sub	r15, r24
    1ace:	01 c0       	rjmp	.+2      	; 0x1ad2 <vfprintf+0x272>
    1ad0:	f1 2c       	mov	r15, r1
    1ad2:	83 2d       	mov	r24, r3
    1ad4:	89 70       	andi	r24, 0x09	; 9
    1ad6:	49 f4       	brne	.+18     	; 0x1aea <vfprintf+0x28a>
    1ad8:	ff 20       	and	r15, r15
    1ada:	39 f0       	breq	.+14     	; 0x1aea <vfprintf+0x28a>
    1adc:	b6 01       	movw	r22, r12
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1ae6:	fa 94       	dec	r15
    1ae8:	f7 cf       	rjmp	.-18     	; 0x1ad8 <vfprintf+0x278>
    1aea:	22 20       	and	r2, r2
    1aec:	29 f0       	breq	.+10     	; 0x1af8 <vfprintf+0x298>
    1aee:	b6 01       	movw	r22, r12
    1af0:	82 2d       	mov	r24, r2
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1af8:	33 fc       	sbrc	r3, 3
    1afa:	09 c0       	rjmp	.+18     	; 0x1b0e <vfprintf+0x2ae>
    1afc:	ff 20       	and	r15, r15
    1afe:	39 f0       	breq	.+14     	; 0x1b0e <vfprintf+0x2ae>
    1b00:	b6 01       	movw	r22, r12
    1b02:	80 e3       	ldi	r24, 0x30	; 48
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1b0a:	fa 94       	dec	r15
    1b0c:	f7 cf       	rjmp	.-18     	; 0x1afc <vfprintf+0x29c>
    1b0e:	37 fe       	sbrs	r3, 7
    1b10:	5a c0       	rjmp	.+180    	; 0x1bc6 <vfprintf+0x366>
    1b12:	94 2d       	mov	r25, r4
    1b14:	85 2d       	mov	r24, r5
    1b16:	57 fe       	sbrs	r5, 7
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <vfprintf+0x2be>
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	29 2e       	mov	r2, r25
    1b20:	38 2e       	mov	r3, r24
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	a2 01       	movw	r20, r4
    1b28:	4e 19       	sub	r20, r14
    1b2a:	51 09       	sbc	r21, r1
    1b2c:	5d 87       	std	Y+13, r21	; 0x0d
    1b2e:	4c 87       	std	Y+12, r20	; 0x0c
    1b30:	a2 01       	movw	r20, r4
    1b32:	42 19       	sub	r20, r2
    1b34:	53 09       	sbc	r21, r3
    1b36:	5f 87       	std	Y+15, r21	; 0x0f
    1b38:	4e 87       	std	Y+14, r20	; 0x0e
    1b3a:	61 2f       	mov	r22, r17
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	44 27       	eor	r20, r20
    1b40:	55 27       	eor	r21, r21
    1b42:	46 1b       	sub	r20, r22
    1b44:	57 0b       	sbc	r21, r23
    1b46:	59 8b       	std	Y+17, r21	; 0x11
    1b48:	48 8b       	std	Y+16, r20	; 0x10
    1b4a:	5f ef       	ldi	r21, 0xFF	; 255
    1b4c:	25 16       	cp	r2, r21
    1b4e:	35 06       	cpc	r3, r21
    1b50:	49 f4       	brne	.+18     	; 0x1b64 <vfprintf+0x304>
    1b52:	b6 01       	movw	r22, r12
    1b54:	8e e2       	ldi	r24, 0x2E	; 46
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	2a 8b       	std	Y+18, r18	; 0x12
    1b5a:	3b 8b       	std	Y+19, r19	; 0x13
    1b5c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1b60:	3b 89       	ldd	r19, Y+19	; 0x13
    1b62:	2a 89       	ldd	r18, Y+18	; 0x12
    1b64:	42 14       	cp	r4, r2
    1b66:	53 04       	cpc	r5, r3
    1b68:	6c f0       	brlt	.+26     	; 0x1b84 <vfprintf+0x324>
    1b6a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b6c:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b6e:	42 15       	cp	r20, r2
    1b70:	53 05       	cpc	r21, r3
    1b72:	44 f4       	brge	.+16     	; 0x1b84 <vfprintf+0x324>
    1b74:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b76:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b78:	e2 0f       	add	r30, r18
    1b7a:	f3 1f       	adc	r31, r19
    1b7c:	e6 0d       	add	r30, r6
    1b7e:	f7 1d       	adc	r31, r7
    1b80:	81 81       	ldd	r24, Z+1	; 0x01
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <vfprintf+0x326>
    1b84:	80 e3       	ldi	r24, 0x30	; 48
    1b86:	51 e0       	ldi	r21, 0x01	; 1
    1b88:	25 1a       	sub	r2, r21
    1b8a:	31 08       	sbc	r3, r1
    1b8c:	2f 5f       	subi	r18, 0xFF	; 255
    1b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b90:	48 89       	ldd	r20, Y+16	; 0x10
    1b92:	59 89       	ldd	r21, Y+17	; 0x11
    1b94:	24 16       	cp	r2, r20
    1b96:	35 06       	cpc	r3, r21
    1b98:	4c f0       	brlt	.+18     	; 0x1bac <vfprintf+0x34c>
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	2a 8b       	std	Y+18, r18	; 0x12
    1ba0:	3b 8b       	std	Y+19, r19	; 0x13
    1ba2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1ba6:	2a 89       	ldd	r18, Y+18	; 0x12
    1ba8:	3b 89       	ldd	r19, Y+19	; 0x13
    1baa:	cf cf       	rjmp	.-98     	; 0x1b4a <vfprintf+0x2ea>
    1bac:	24 14       	cp	r2, r4
    1bae:	35 04       	cpc	r3, r5
    1bb0:	39 f4       	brne	.+14     	; 0x1bc0 <vfprintf+0x360>
    1bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb4:	96 33       	cpi	r25, 0x36	; 54
    1bb6:	18 f4       	brcc	.+6      	; 0x1bbe <vfprintf+0x35e>
    1bb8:	95 33       	cpi	r25, 0x35	; 53
    1bba:	11 f4       	brne	.+4      	; 0x1bc0 <vfprintf+0x360>
    1bbc:	04 ff       	sbrs	r16, 4
    1bbe:	81 e3       	ldi	r24, 0x31	; 49
    1bc0:	b6 01       	movw	r22, r12
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	4b c0       	rjmp	.+150    	; 0x1c5c <vfprintf+0x3fc>
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	81 33       	cpi	r24, 0x31	; 49
    1bca:	09 f0       	breq	.+2      	; 0x1bce <vfprintf+0x36e>
    1bcc:	0f 7e       	andi	r16, 0xEF	; 239
    1bce:	b6 01       	movw	r22, r12
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1bd6:	11 11       	cpse	r17, r1
    1bd8:	05 c0       	rjmp	.+10     	; 0x1be4 <vfprintf+0x384>
    1bda:	34 fc       	sbrc	r3, 4
    1bdc:	18 c0       	rjmp	.+48     	; 0x1c0e <vfprintf+0x3ae>
    1bde:	85 e6       	ldi	r24, 0x65	; 101
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	17 c0       	rjmp	.+46     	; 0x1c12 <vfprintf+0x3b2>
    1be4:	b6 01       	movw	r22, r12
    1be6:	8e e2       	ldi	r24, 0x2E	; 46
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1bee:	82 e0       	ldi	r24, 0x02	; 2
    1bf0:	ee 24       	eor	r14, r14
    1bf2:	e3 94       	inc	r14
    1bf4:	e8 0e       	add	r14, r24
    1bf6:	f3 01       	movw	r30, r6
    1bf8:	e8 0f       	add	r30, r24
    1bfa:	f1 1d       	adc	r31, r1
    1bfc:	80 81       	ld	r24, Z
    1bfe:	b6 01       	movw	r22, r12
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1c06:	11 50       	subi	r17, 0x01	; 1
    1c08:	8e 2d       	mov	r24, r14
    1c0a:	91 f7       	brne	.-28     	; 0x1bf0 <vfprintf+0x390>
    1c0c:	e6 cf       	rjmp	.-52     	; 0x1bda <vfprintf+0x37a>
    1c0e:	85 e4       	ldi	r24, 0x45	; 69
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	b6 01       	movw	r22, r12
    1c14:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1c18:	57 fc       	sbrc	r5, 7
    1c1a:	05 c0       	rjmp	.+10     	; 0x1c26 <vfprintf+0x3c6>
    1c1c:	41 14       	cp	r4, r1
    1c1e:	51 04       	cpc	r5, r1
    1c20:	39 f4       	brne	.+14     	; 0x1c30 <vfprintf+0x3d0>
    1c22:	04 ff       	sbrs	r16, 4
    1c24:	05 c0       	rjmp	.+10     	; 0x1c30 <vfprintf+0x3d0>
    1c26:	51 94       	neg	r5
    1c28:	41 94       	neg	r4
    1c2a:	51 08       	sbc	r5, r1
    1c2c:	8d e2       	ldi	r24, 0x2D	; 45
    1c2e:	01 c0       	rjmp	.+2      	; 0x1c32 <vfprintf+0x3d2>
    1c30:	8b e2       	ldi	r24, 0x2B	; 43
    1c32:	b6 01       	movw	r22, r12
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1c3a:	80 e3       	ldi	r24, 0x30	; 48
    1c3c:	9a e0       	ldi	r25, 0x0A	; 10
    1c3e:	49 16       	cp	r4, r25
    1c40:	51 04       	cpc	r5, r1
    1c42:	2c f0       	brlt	.+10     	; 0x1c4e <vfprintf+0x3ee>
    1c44:	8f 5f       	subi	r24, 0xFF	; 255
    1c46:	5a e0       	ldi	r21, 0x0A	; 10
    1c48:	45 1a       	sub	r4, r21
    1c4a:	51 08       	sbc	r5, r1
    1c4c:	f7 cf       	rjmp	.-18     	; 0x1c3c <vfprintf+0x3dc>
    1c4e:	b6 01       	movw	r22, r12
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1c56:	b6 01       	movw	r22, r12
    1c58:	c2 01       	movw	r24, r4
    1c5a:	c0 96       	adiw	r24, 0x30	; 48
    1c5c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1c60:	57 c1       	rjmp	.+686    	; 0x1f10 <vfprintf+0x6b0>
    1c62:	83 36       	cpi	r24, 0x63	; 99
    1c64:	31 f0       	breq	.+12     	; 0x1c72 <vfprintf+0x412>
    1c66:	83 37       	cpi	r24, 0x73	; 115
    1c68:	79 f0       	breq	.+30     	; 0x1c88 <vfprintf+0x428>
    1c6a:	83 35       	cpi	r24, 0x53	; 83
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <vfprintf+0x410>
    1c6e:	58 c0       	rjmp	.+176    	; 0x1d20 <vfprintf+0x4c0>
    1c70:	21 c0       	rjmp	.+66     	; 0x1cb4 <vfprintf+0x454>
    1c72:	52 01       	movw	r10, r4
    1c74:	e2 e0       	ldi	r30, 0x02	; 2
    1c76:	ae 0e       	add	r10, r30
    1c78:	b1 1c       	adc	r11, r1
    1c7a:	f2 01       	movw	r30, r4
    1c7c:	80 81       	ld	r24, Z
    1c7e:	89 83       	std	Y+1, r24	; 0x01
    1c80:	01 e0       	ldi	r16, 0x01	; 1
    1c82:	10 e0       	ldi	r17, 0x00	; 0
    1c84:	23 01       	movw	r4, r6
    1c86:	14 c0       	rjmp	.+40     	; 0x1cb0 <vfprintf+0x450>
    1c88:	52 01       	movw	r10, r4
    1c8a:	f2 e0       	ldi	r31, 0x02	; 2
    1c8c:	af 0e       	add	r10, r31
    1c8e:	b1 1c       	adc	r11, r1
    1c90:	f2 01       	movw	r30, r4
    1c92:	40 80       	ld	r4, Z
    1c94:	51 80       	ldd	r5, Z+1	; 0x01
    1c96:	26 ff       	sbrs	r18, 6
    1c98:	03 c0       	rjmp	.+6      	; 0x1ca0 <vfprintf+0x440>
    1c9a:	61 2f       	mov	r22, r17
    1c9c:	70 e0       	ldi	r23, 0x00	; 0
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <vfprintf+0x444>
    1ca0:	6f ef       	ldi	r22, 0xFF	; 255
    1ca2:	7f ef       	ldi	r23, 0xFF	; 255
    1ca4:	c2 01       	movw	r24, r4
    1ca6:	2a 8b       	std	Y+18, r18	; 0x12
    1ca8:	0e 94 de 13 	call	0x27bc	; 0x27bc <strnlen>
    1cac:	8c 01       	movw	r16, r24
    1cae:	2a 89       	ldd	r18, Y+18	; 0x12
    1cb0:	2f 77       	andi	r18, 0x7F	; 127
    1cb2:	15 c0       	rjmp	.+42     	; 0x1cde <vfprintf+0x47e>
    1cb4:	52 01       	movw	r10, r4
    1cb6:	f2 e0       	ldi	r31, 0x02	; 2
    1cb8:	af 0e       	add	r10, r31
    1cba:	b1 1c       	adc	r11, r1
    1cbc:	f2 01       	movw	r30, r4
    1cbe:	40 80       	ld	r4, Z
    1cc0:	51 80       	ldd	r5, Z+1	; 0x01
    1cc2:	26 ff       	sbrs	r18, 6
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc <vfprintf+0x46c>
    1cc6:	61 2f       	mov	r22, r17
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <vfprintf+0x470>
    1ccc:	6f ef       	ldi	r22, 0xFF	; 255
    1cce:	7f ef       	ldi	r23, 0xFF	; 255
    1cd0:	c2 01       	movw	r24, r4
    1cd2:	2a 8b       	std	Y+18, r18	; 0x12
    1cd4:	0e 94 cc 13 	call	0x2798	; 0x2798 <strnlen_P>
    1cd8:	8c 01       	movw	r16, r24
    1cda:	2a 89       	ldd	r18, Y+18	; 0x12
    1cdc:	20 68       	ori	r18, 0x80	; 128
    1cde:	32 2e       	mov	r3, r18
    1ce0:	23 fd       	sbrc	r18, 3
    1ce2:	1a c0       	rjmp	.+52     	; 0x1d18 <vfprintf+0x4b8>
    1ce4:	8f 2d       	mov	r24, r15
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	08 17       	cp	r16, r24
    1cea:	19 07       	cpc	r17, r25
    1cec:	a8 f4       	brcc	.+42     	; 0x1d18 <vfprintf+0x4b8>
    1cee:	b6 01       	movw	r22, r12
    1cf0:	80 e2       	ldi	r24, 0x20	; 32
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1cf8:	fa 94       	dec	r15
    1cfa:	f4 cf       	rjmp	.-24     	; 0x1ce4 <vfprintf+0x484>
    1cfc:	f2 01       	movw	r30, r4
    1cfe:	37 fc       	sbrc	r3, 7
    1d00:	85 91       	lpm	r24, Z+
    1d02:	37 fe       	sbrs	r3, 7
    1d04:	81 91       	ld	r24, Z+
    1d06:	2f 01       	movw	r4, r30
    1d08:	b6 01       	movw	r22, r12
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1d10:	f1 10       	cpse	r15, r1
    1d12:	fa 94       	dec	r15
    1d14:	01 50       	subi	r16, 0x01	; 1
    1d16:	11 09       	sbc	r17, r1
    1d18:	01 15       	cp	r16, r1
    1d1a:	11 05       	cpc	r17, r1
    1d1c:	79 f7       	brne	.-34     	; 0x1cfc <vfprintf+0x49c>
    1d1e:	f8 c0       	rjmp	.+496    	; 0x1f10 <vfprintf+0x6b0>
    1d20:	84 36       	cpi	r24, 0x64	; 100
    1d22:	11 f0       	breq	.+4      	; 0x1d28 <vfprintf+0x4c8>
    1d24:	89 36       	cpi	r24, 0x69	; 105
    1d26:	59 f5       	brne	.+86     	; 0x1d7e <vfprintf+0x51e>
    1d28:	52 01       	movw	r10, r4
    1d2a:	27 ff       	sbrs	r18, 7
    1d2c:	09 c0       	rjmp	.+18     	; 0x1d40 <vfprintf+0x4e0>
    1d2e:	f4 e0       	ldi	r31, 0x04	; 4
    1d30:	af 0e       	add	r10, r31
    1d32:	b1 1c       	adc	r11, r1
    1d34:	f2 01       	movw	r30, r4
    1d36:	60 81       	ld	r22, Z
    1d38:	71 81       	ldd	r23, Z+1	; 0x01
    1d3a:	82 81       	ldd	r24, Z+2	; 0x02
    1d3c:	93 81       	ldd	r25, Z+3	; 0x03
    1d3e:	0a c0       	rjmp	.+20     	; 0x1d54 <vfprintf+0x4f4>
    1d40:	f2 e0       	ldi	r31, 0x02	; 2
    1d42:	af 0e       	add	r10, r31
    1d44:	b1 1c       	adc	r11, r1
    1d46:	f2 01       	movw	r30, r4
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	07 2e       	mov	r0, r23
    1d4e:	00 0c       	add	r0, r0
    1d50:	88 0b       	sbc	r24, r24
    1d52:	99 0b       	sbc	r25, r25
    1d54:	2f 76       	andi	r18, 0x6F	; 111
    1d56:	32 2e       	mov	r3, r18
    1d58:	97 ff       	sbrs	r25, 7
    1d5a:	09 c0       	rjmp	.+18     	; 0x1d6e <vfprintf+0x50e>
    1d5c:	90 95       	com	r25
    1d5e:	80 95       	com	r24
    1d60:	70 95       	com	r23
    1d62:	61 95       	neg	r22
    1d64:	7f 4f       	sbci	r23, 0xFF	; 255
    1d66:	8f 4f       	sbci	r24, 0xFF	; 255
    1d68:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6a:	20 68       	ori	r18, 0x80	; 128
    1d6c:	32 2e       	mov	r3, r18
    1d6e:	2a e0       	ldi	r18, 0x0A	; 10
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	a3 01       	movw	r20, r6
    1d74:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__ultoa_invert>
    1d78:	e8 2e       	mov	r14, r24
    1d7a:	e6 18       	sub	r14, r6
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <vfprintf+0x59c>
    1d7e:	02 2f       	mov	r16, r18
    1d80:	85 37       	cpi	r24, 0x75	; 117
    1d82:	21 f4       	brne	.+8      	; 0x1d8c <vfprintf+0x52c>
    1d84:	0f 7e       	andi	r16, 0xEF	; 239
    1d86:	2a e0       	ldi	r18, 0x0A	; 10
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	1d c0       	rjmp	.+58     	; 0x1dc6 <vfprintf+0x566>
    1d8c:	09 7f       	andi	r16, 0xF9	; 249
    1d8e:	8f 36       	cpi	r24, 0x6F	; 111
    1d90:	91 f0       	breq	.+36     	; 0x1db6 <vfprintf+0x556>
    1d92:	18 f4       	brcc	.+6      	; 0x1d9a <vfprintf+0x53a>
    1d94:	88 35       	cpi	r24, 0x58	; 88
    1d96:	59 f0       	breq	.+22     	; 0x1dae <vfprintf+0x54e>
    1d98:	c5 c0       	rjmp	.+394    	; 0x1f24 <vfprintf+0x6c4>
    1d9a:	80 37       	cpi	r24, 0x70	; 112
    1d9c:	19 f0       	breq	.+6      	; 0x1da4 <vfprintf+0x544>
    1d9e:	88 37       	cpi	r24, 0x78	; 120
    1da0:	11 f0       	breq	.+4      	; 0x1da6 <vfprintf+0x546>
    1da2:	c0 c0       	rjmp	.+384    	; 0x1f24 <vfprintf+0x6c4>
    1da4:	00 61       	ori	r16, 0x10	; 16
    1da6:	04 ff       	sbrs	r16, 4
    1da8:	09 c0       	rjmp	.+18     	; 0x1dbc <vfprintf+0x55c>
    1daa:	04 60       	ori	r16, 0x04	; 4
    1dac:	07 c0       	rjmp	.+14     	; 0x1dbc <vfprintf+0x55c>
    1dae:	24 ff       	sbrs	r18, 4
    1db0:	08 c0       	rjmp	.+16     	; 0x1dc2 <vfprintf+0x562>
    1db2:	06 60       	ori	r16, 0x06	; 6
    1db4:	06 c0       	rjmp	.+12     	; 0x1dc2 <vfprintf+0x562>
    1db6:	28 e0       	ldi	r18, 0x08	; 8
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	05 c0       	rjmp	.+10     	; 0x1dc6 <vfprintf+0x566>
    1dbc:	20 e1       	ldi	r18, 0x10	; 16
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <vfprintf+0x566>
    1dc2:	20 e1       	ldi	r18, 0x10	; 16
    1dc4:	32 e0       	ldi	r19, 0x02	; 2
    1dc6:	52 01       	movw	r10, r4
    1dc8:	07 ff       	sbrs	r16, 7
    1dca:	09 c0       	rjmp	.+18     	; 0x1dde <vfprintf+0x57e>
    1dcc:	f4 e0       	ldi	r31, 0x04	; 4
    1dce:	af 0e       	add	r10, r31
    1dd0:	b1 1c       	adc	r11, r1
    1dd2:	f2 01       	movw	r30, r4
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	08 c0       	rjmp	.+16     	; 0x1dee <vfprintf+0x58e>
    1dde:	f2 e0       	ldi	r31, 0x02	; 2
    1de0:	af 0e       	add	r10, r31
    1de2:	b1 1c       	adc	r11, r1
    1de4:	f2 01       	movw	r30, r4
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	a3 01       	movw	r20, r6
    1df0:	0e 94 51 14 	call	0x28a2	; 0x28a2 <__ultoa_invert>
    1df4:	e8 2e       	mov	r14, r24
    1df6:	e6 18       	sub	r14, r6
    1df8:	0f 77       	andi	r16, 0x7F	; 127
    1dfa:	30 2e       	mov	r3, r16
    1dfc:	36 fe       	sbrs	r3, 6
    1dfe:	0b c0       	rjmp	.+22     	; 0x1e16 <vfprintf+0x5b6>
    1e00:	33 2d       	mov	r19, r3
    1e02:	3e 7f       	andi	r19, 0xFE	; 254
    1e04:	e1 16       	cp	r14, r17
    1e06:	50 f4       	brcc	.+20     	; 0x1e1c <vfprintf+0x5bc>
    1e08:	34 fe       	sbrs	r3, 4
    1e0a:	0a c0       	rjmp	.+20     	; 0x1e20 <vfprintf+0x5c0>
    1e0c:	32 fc       	sbrc	r3, 2
    1e0e:	08 c0       	rjmp	.+16     	; 0x1e20 <vfprintf+0x5c0>
    1e10:	33 2d       	mov	r19, r3
    1e12:	3e 7e       	andi	r19, 0xEE	; 238
    1e14:	05 c0       	rjmp	.+10     	; 0x1e20 <vfprintf+0x5c0>
    1e16:	0e 2d       	mov	r16, r14
    1e18:	33 2d       	mov	r19, r3
    1e1a:	03 c0       	rjmp	.+6      	; 0x1e22 <vfprintf+0x5c2>
    1e1c:	0e 2d       	mov	r16, r14
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <vfprintf+0x5c2>
    1e20:	01 2f       	mov	r16, r17
    1e22:	34 ff       	sbrs	r19, 4
    1e24:	0c c0       	rjmp	.+24     	; 0x1e3e <vfprintf+0x5de>
    1e26:	fe 01       	movw	r30, r28
    1e28:	ee 0d       	add	r30, r14
    1e2a:	f1 1d       	adc	r31, r1
    1e2c:	80 81       	ld	r24, Z
    1e2e:	80 33       	cpi	r24, 0x30	; 48
    1e30:	11 f4       	brne	.+4      	; 0x1e36 <vfprintf+0x5d6>
    1e32:	39 7e       	andi	r19, 0xE9	; 233
    1e34:	08 c0       	rjmp	.+16     	; 0x1e46 <vfprintf+0x5e6>
    1e36:	32 ff       	sbrs	r19, 2
    1e38:	05 c0       	rjmp	.+10     	; 0x1e44 <vfprintf+0x5e4>
    1e3a:	0e 5f       	subi	r16, 0xFE	; 254
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <vfprintf+0x5e6>
    1e3e:	83 2f       	mov	r24, r19
    1e40:	86 78       	andi	r24, 0x86	; 134
    1e42:	09 f0       	breq	.+2      	; 0x1e46 <vfprintf+0x5e6>
    1e44:	0f 5f       	subi	r16, 0xFF	; 255
    1e46:	33 fd       	sbrc	r19, 3
    1e48:	13 c0       	rjmp	.+38     	; 0x1e70 <vfprintf+0x610>
    1e4a:	30 ff       	sbrs	r19, 0
    1e4c:	06 c0       	rjmp	.+12     	; 0x1e5a <vfprintf+0x5fa>
    1e4e:	1e 2d       	mov	r17, r14
    1e50:	0f 15       	cp	r16, r15
    1e52:	18 f4       	brcc	.+6      	; 0x1e5a <vfprintf+0x5fa>
    1e54:	1f 0d       	add	r17, r15
    1e56:	10 1b       	sub	r17, r16
    1e58:	0f 2d       	mov	r16, r15
    1e5a:	0f 15       	cp	r16, r15
    1e5c:	68 f4       	brcc	.+26     	; 0x1e78 <vfprintf+0x618>
    1e5e:	b6 01       	movw	r22, r12
    1e60:	80 e2       	ldi	r24, 0x20	; 32
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	3b 8b       	std	Y+19, r19	; 0x13
    1e66:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1e6a:	0f 5f       	subi	r16, 0xFF	; 255
    1e6c:	3b 89       	ldd	r19, Y+19	; 0x13
    1e6e:	f5 cf       	rjmp	.-22     	; 0x1e5a <vfprintf+0x5fa>
    1e70:	0f 15       	cp	r16, r15
    1e72:	10 f4       	brcc	.+4      	; 0x1e78 <vfprintf+0x618>
    1e74:	f0 1a       	sub	r15, r16
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <vfprintf+0x61a>
    1e78:	f1 2c       	mov	r15, r1
    1e7a:	34 ff       	sbrs	r19, 4
    1e7c:	12 c0       	rjmp	.+36     	; 0x1ea2 <vfprintf+0x642>
    1e7e:	b6 01       	movw	r22, r12
    1e80:	80 e3       	ldi	r24, 0x30	; 48
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	3b 8b       	std	Y+19, r19	; 0x13
    1e86:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1e8a:	3b 89       	ldd	r19, Y+19	; 0x13
    1e8c:	32 ff       	sbrs	r19, 2
    1e8e:	17 c0       	rjmp	.+46     	; 0x1ebe <vfprintf+0x65e>
    1e90:	31 fd       	sbrc	r19, 1
    1e92:	03 c0       	rjmp	.+6      	; 0x1e9a <vfprintf+0x63a>
    1e94:	88 e7       	ldi	r24, 0x78	; 120
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <vfprintf+0x63e>
    1e9a:	88 e5       	ldi	r24, 0x58	; 88
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	b6 01       	movw	r22, r12
    1ea0:	0c c0       	rjmp	.+24     	; 0x1eba <vfprintf+0x65a>
    1ea2:	83 2f       	mov	r24, r19
    1ea4:	86 78       	andi	r24, 0x86	; 134
    1ea6:	59 f0       	breq	.+22     	; 0x1ebe <vfprintf+0x65e>
    1ea8:	31 ff       	sbrs	r19, 1
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <vfprintf+0x650>
    1eac:	8b e2       	ldi	r24, 0x2B	; 43
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <vfprintf+0x652>
    1eb0:	80 e2       	ldi	r24, 0x20	; 32
    1eb2:	37 fd       	sbrc	r19, 7
    1eb4:	8d e2       	ldi	r24, 0x2D	; 45
    1eb6:	b6 01       	movw	r22, r12
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1ebe:	e1 16       	cp	r14, r17
    1ec0:	38 f4       	brcc	.+14     	; 0x1ed0 <vfprintf+0x670>
    1ec2:	b6 01       	movw	r22, r12
    1ec4:	80 e3       	ldi	r24, 0x30	; 48
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1ecc:	11 50       	subi	r17, 0x01	; 1
    1ece:	f7 cf       	rjmp	.-18     	; 0x1ebe <vfprintf+0x65e>
    1ed0:	ea 94       	dec	r14
    1ed2:	f3 01       	movw	r30, r6
    1ed4:	ee 0d       	add	r30, r14
    1ed6:	f1 1d       	adc	r31, r1
    1ed8:	80 81       	ld	r24, Z
    1eda:	b6 01       	movw	r22, r12
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1ee2:	e1 10       	cpse	r14, r1
    1ee4:	f5 cf       	rjmp	.-22     	; 0x1ed0 <vfprintf+0x670>
    1ee6:	14 c0       	rjmp	.+40     	; 0x1f10 <vfprintf+0x6b0>
    1ee8:	f4 e0       	ldi	r31, 0x04	; 4
    1eea:	ff 15       	cp	r31, r15
    1eec:	58 f5       	brcc	.+86     	; 0x1f44 <vfprintf+0x6e4>
    1eee:	84 e0       	ldi	r24, 0x04	; 4
    1ef0:	f8 1a       	sub	r15, r24
    1ef2:	33 fe       	sbrs	r3, 3
    1ef4:	1e c0       	rjmp	.+60     	; 0x1f32 <vfprintf+0x6d2>
    1ef6:	21 10       	cpse	r2, r1
    1ef8:	26 c0       	rjmp	.+76     	; 0x1f46 <vfprintf+0x6e6>
    1efa:	03 ff       	sbrs	r16, 3
    1efc:	2a c0       	rjmp	.+84     	; 0x1f52 <vfprintf+0x6f2>
    1efe:	06 ea       	ldi	r16, 0xA6	; 166
    1f00:	10 e0       	ldi	r17, 0x00	; 0
    1f02:	f3 2d       	mov	r31, r3
    1f04:	f0 71       	andi	r31, 0x10	; 16
    1f06:	3f 2e       	mov	r3, r31
    1f08:	f8 01       	movw	r30, r16
    1f0a:	84 91       	lpm	r24, Z
    1f0c:	81 11       	cpse	r24, r1
    1f0e:	24 c0       	rjmp	.+72     	; 0x1f58 <vfprintf+0x6f8>
    1f10:	ff 20       	and	r15, r15
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <vfprintf+0x6b6>
    1f14:	e5 cc       	rjmp	.-1590   	; 0x18e0 <vfprintf+0x80>
    1f16:	b6 01       	movw	r22, r12
    1f18:	80 e2       	ldi	r24, 0x20	; 32
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1f20:	fa 94       	dec	r15
    1f22:	f6 cf       	rjmp	.-20     	; 0x1f10 <vfprintf+0x6b0>
    1f24:	f6 01       	movw	r30, r12
    1f26:	86 81       	ldd	r24, Z+6	; 0x06
    1f28:	97 81       	ldd	r25, Z+7	; 0x07
    1f2a:	26 c0       	rjmp	.+76     	; 0x1f78 <vfprintf+0x718>
    1f2c:	8f ef       	ldi	r24, 0xFF	; 255
    1f2e:	9f ef       	ldi	r25, 0xFF	; 255
    1f30:	23 c0       	rjmp	.+70     	; 0x1f78 <vfprintf+0x718>
    1f32:	b6 01       	movw	r22, r12
    1f34:	80 e2       	ldi	r24, 0x20	; 32
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1f3c:	fa 94       	dec	r15
    1f3e:	f1 10       	cpse	r15, r1
    1f40:	f8 cf       	rjmp	.-16     	; 0x1f32 <vfprintf+0x6d2>
    1f42:	d9 cf       	rjmp	.-78     	; 0x1ef6 <vfprintf+0x696>
    1f44:	f1 2c       	mov	r15, r1
    1f46:	b6 01       	movw	r22, r12
    1f48:	82 2d       	mov	r24, r2
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1f50:	d4 cf       	rjmp	.-88     	; 0x1efa <vfprintf+0x69a>
    1f52:	0a ea       	ldi	r16, 0xAA	; 170
    1f54:	10 e0       	ldi	r17, 0x00	; 0
    1f56:	d5 cf       	rjmp	.-86     	; 0x1f02 <vfprintf+0x6a2>
    1f58:	31 10       	cpse	r3, r1
    1f5a:	80 52       	subi	r24, 0x20	; 32
    1f5c:	b6 01       	movw	r22, r12
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <fputc>
    1f64:	0f 5f       	subi	r16, 0xFF	; 255
    1f66:	1f 4f       	sbci	r17, 0xFF	; 255
    1f68:	cf cf       	rjmp	.-98     	; 0x1f08 <vfprintf+0x6a8>
    1f6a:	23 e0       	ldi	r18, 0x03	; 3
    1f6c:	2f 15       	cp	r18, r15
    1f6e:	10 f4       	brcc	.+4      	; 0x1f74 <vfprintf+0x714>
    1f70:	83 e0       	ldi	r24, 0x03	; 3
    1f72:	be cf       	rjmp	.-132    	; 0x1ef0 <vfprintf+0x690>
    1f74:	f1 2c       	mov	r15, r1
    1f76:	c1 cf       	rjmp	.-126    	; 0x1efa <vfprintf+0x69a>
    1f78:	63 96       	adiw	r28, 0x13	; 19
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	ff 90       	pop	r15
    1f8e:	ef 90       	pop	r14
    1f90:	df 90       	pop	r13
    1f92:	cf 90       	pop	r12
    1f94:	bf 90       	pop	r11
    1f96:	af 90       	pop	r10
    1f98:	9f 90       	pop	r9
    1f9a:	8f 90       	pop	r8
    1f9c:	7f 90       	pop	r7
    1f9e:	6f 90       	pop	r6
    1fa0:	5f 90       	pop	r5
    1fa2:	4f 90       	pop	r4
    1fa4:	3f 90       	pop	r3
    1fa6:	2f 90       	pop	r2
    1fa8:	08 95       	ret

00001faa <__subsf3>:
    1faa:	50 58       	subi	r21, 0x80	; 128

00001fac <__addsf3>:
    1fac:	bb 27       	eor	r27, r27
    1fae:	aa 27       	eor	r26, r26
    1fb0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__addsf3x>
    1fb4:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__fp_round>
    1fb8:	0e 94 ed 11 	call	0x23da	; 0x23da <__fp_pscA>
    1fbc:	38 f0       	brcs	.+14     	; 0x1fcc <__addsf3+0x20>
    1fbe:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__fp_pscB>
    1fc2:	20 f0       	brcs	.+8      	; 0x1fcc <__addsf3+0x20>
    1fc4:	39 f4       	brne	.+14     	; 0x1fd4 <__addsf3+0x28>
    1fc6:	9f 3f       	cpi	r25, 0xFF	; 255
    1fc8:	19 f4       	brne	.+6      	; 0x1fd0 <__addsf3+0x24>
    1fca:	26 f4       	brtc	.+8      	; 0x1fd4 <__addsf3+0x28>
    1fcc:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_nan>
    1fd0:	0e f4       	brtc	.+2      	; 0x1fd4 <__addsf3+0x28>
    1fd2:	e0 95       	com	r30
    1fd4:	e7 fb       	bst	r30, 7
    1fd6:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__fp_inf>

00001fda <__addsf3x>:
    1fda:	e9 2f       	mov	r30, r25
    1fdc:	0e 94 0c 12 	call	0x2418	; 0x2418 <__fp_split3>
    1fe0:	58 f3       	brcs	.-42     	; 0x1fb8 <__addsf3+0xc>
    1fe2:	ba 17       	cp	r27, r26
    1fe4:	62 07       	cpc	r22, r18
    1fe6:	73 07       	cpc	r23, r19
    1fe8:	84 07       	cpc	r24, r20
    1fea:	95 07       	cpc	r25, r21
    1fec:	20 f0       	brcs	.+8      	; 0x1ff6 <__addsf3x+0x1c>
    1fee:	79 f4       	brne	.+30     	; 0x200e <__addsf3x+0x34>
    1ff0:	a6 f5       	brtc	.+104    	; 0x205a <__addsf3x+0x80>
    1ff2:	0c 94 46 12 	jmp	0x248c	; 0x248c <__fp_zero>
    1ff6:	0e f4       	brtc	.+2      	; 0x1ffa <__addsf3x+0x20>
    1ff8:	e0 95       	com	r30
    1ffa:	0b 2e       	mov	r0, r27
    1ffc:	ba 2f       	mov	r27, r26
    1ffe:	a0 2d       	mov	r26, r0
    2000:	0b 01       	movw	r0, r22
    2002:	b9 01       	movw	r22, r18
    2004:	90 01       	movw	r18, r0
    2006:	0c 01       	movw	r0, r24
    2008:	ca 01       	movw	r24, r20
    200a:	a0 01       	movw	r20, r0
    200c:	11 24       	eor	r1, r1
    200e:	ff 27       	eor	r31, r31
    2010:	59 1b       	sub	r21, r25
    2012:	99 f0       	breq	.+38     	; 0x203a <__addsf3x+0x60>
    2014:	59 3f       	cpi	r21, 0xF9	; 249
    2016:	50 f4       	brcc	.+20     	; 0x202c <__addsf3x+0x52>
    2018:	50 3e       	cpi	r21, 0xE0	; 224
    201a:	68 f1       	brcs	.+90     	; 0x2076 <__addsf3x+0x9c>
    201c:	1a 16       	cp	r1, r26
    201e:	f0 40       	sbci	r31, 0x00	; 0
    2020:	a2 2f       	mov	r26, r18
    2022:	23 2f       	mov	r18, r19
    2024:	34 2f       	mov	r19, r20
    2026:	44 27       	eor	r20, r20
    2028:	58 5f       	subi	r21, 0xF8	; 248
    202a:	f3 cf       	rjmp	.-26     	; 0x2012 <__addsf3x+0x38>
    202c:	46 95       	lsr	r20
    202e:	37 95       	ror	r19
    2030:	27 95       	ror	r18
    2032:	a7 95       	ror	r26
    2034:	f0 40       	sbci	r31, 0x00	; 0
    2036:	53 95       	inc	r21
    2038:	c9 f7       	brne	.-14     	; 0x202c <__addsf3x+0x52>
    203a:	7e f4       	brtc	.+30     	; 0x205a <__addsf3x+0x80>
    203c:	1f 16       	cp	r1, r31
    203e:	ba 0b       	sbc	r27, r26
    2040:	62 0b       	sbc	r22, r18
    2042:	73 0b       	sbc	r23, r19
    2044:	84 0b       	sbc	r24, r20
    2046:	ba f0       	brmi	.+46     	; 0x2076 <__addsf3x+0x9c>
    2048:	91 50       	subi	r25, 0x01	; 1
    204a:	a1 f0       	breq	.+40     	; 0x2074 <__addsf3x+0x9a>
    204c:	ff 0f       	add	r31, r31
    204e:	bb 1f       	adc	r27, r27
    2050:	66 1f       	adc	r22, r22
    2052:	77 1f       	adc	r23, r23
    2054:	88 1f       	adc	r24, r24
    2056:	c2 f7       	brpl	.-16     	; 0x2048 <__addsf3x+0x6e>
    2058:	0e c0       	rjmp	.+28     	; 0x2076 <__addsf3x+0x9c>
    205a:	ba 0f       	add	r27, r26
    205c:	62 1f       	adc	r22, r18
    205e:	73 1f       	adc	r23, r19
    2060:	84 1f       	adc	r24, r20
    2062:	48 f4       	brcc	.+18     	; 0x2076 <__addsf3x+0x9c>
    2064:	87 95       	ror	r24
    2066:	77 95       	ror	r23
    2068:	67 95       	ror	r22
    206a:	b7 95       	ror	r27
    206c:	f7 95       	ror	r31
    206e:	9e 3f       	cpi	r25, 0xFE	; 254
    2070:	08 f0       	brcs	.+2      	; 0x2074 <__addsf3x+0x9a>
    2072:	b0 cf       	rjmp	.-160    	; 0x1fd4 <__addsf3+0x28>
    2074:	93 95       	inc	r25
    2076:	88 0f       	add	r24, r24
    2078:	08 f0       	brcs	.+2      	; 0x207c <__addsf3x+0xa2>
    207a:	99 27       	eor	r25, r25
    207c:	ee 0f       	add	r30, r30
    207e:	97 95       	ror	r25
    2080:	87 95       	ror	r24
    2082:	08 95       	ret

00002084 <__cmpsf2>:
    2084:	0e 94 97 11 	call	0x232e	; 0x232e <__fp_cmp>
    2088:	08 f4       	brcc	.+2      	; 0x208c <__cmpsf2+0x8>
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	08 95       	ret

0000208e <__divsf3>:
    208e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__divsf3x>
    2092:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__fp_round>
    2096:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__fp_pscB>
    209a:	58 f0       	brcs	.+22     	; 0x20b2 <__divsf3+0x24>
    209c:	0e 94 ed 11 	call	0x23da	; 0x23da <__fp_pscA>
    20a0:	40 f0       	brcs	.+16     	; 0x20b2 <__divsf3+0x24>
    20a2:	29 f4       	brne	.+10     	; 0x20ae <__divsf3+0x20>
    20a4:	5f 3f       	cpi	r21, 0xFF	; 255
    20a6:	29 f0       	breq	.+10     	; 0x20b2 <__divsf3+0x24>
    20a8:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__fp_inf>
    20ac:	51 11       	cpse	r21, r1
    20ae:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_szero>
    20b2:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_nan>

000020b6 <__divsf3x>:
    20b6:	0e 94 0c 12 	call	0x2418	; 0x2418 <__fp_split3>
    20ba:	68 f3       	brcs	.-38     	; 0x2096 <__divsf3+0x8>

000020bc <__divsf3_pse>:
    20bc:	99 23       	and	r25, r25
    20be:	b1 f3       	breq	.-20     	; 0x20ac <__divsf3+0x1e>
    20c0:	55 23       	and	r21, r21
    20c2:	91 f3       	breq	.-28     	; 0x20a8 <__divsf3+0x1a>
    20c4:	95 1b       	sub	r25, r21
    20c6:	55 0b       	sbc	r21, r21
    20c8:	bb 27       	eor	r27, r27
    20ca:	aa 27       	eor	r26, r26
    20cc:	62 17       	cp	r22, r18
    20ce:	73 07       	cpc	r23, r19
    20d0:	84 07       	cpc	r24, r20
    20d2:	38 f0       	brcs	.+14     	; 0x20e2 <__divsf3_pse+0x26>
    20d4:	9f 5f       	subi	r25, 0xFF	; 255
    20d6:	5f 4f       	sbci	r21, 0xFF	; 255
    20d8:	22 0f       	add	r18, r18
    20da:	33 1f       	adc	r19, r19
    20dc:	44 1f       	adc	r20, r20
    20de:	aa 1f       	adc	r26, r26
    20e0:	a9 f3       	breq	.-22     	; 0x20cc <__divsf3_pse+0x10>
    20e2:	35 d0       	rcall	.+106    	; 0x214e <__divsf3_pse+0x92>
    20e4:	0e 2e       	mov	r0, r30
    20e6:	3a f0       	brmi	.+14     	; 0x20f6 <__divsf3_pse+0x3a>
    20e8:	e0 e8       	ldi	r30, 0x80	; 128
    20ea:	32 d0       	rcall	.+100    	; 0x2150 <__divsf3_pse+0x94>
    20ec:	91 50       	subi	r25, 0x01	; 1
    20ee:	50 40       	sbci	r21, 0x00	; 0
    20f0:	e6 95       	lsr	r30
    20f2:	00 1c       	adc	r0, r0
    20f4:	ca f7       	brpl	.-14     	; 0x20e8 <__divsf3_pse+0x2c>
    20f6:	2b d0       	rcall	.+86     	; 0x214e <__divsf3_pse+0x92>
    20f8:	fe 2f       	mov	r31, r30
    20fa:	29 d0       	rcall	.+82     	; 0x214e <__divsf3_pse+0x92>
    20fc:	66 0f       	add	r22, r22
    20fe:	77 1f       	adc	r23, r23
    2100:	88 1f       	adc	r24, r24
    2102:	bb 1f       	adc	r27, r27
    2104:	26 17       	cp	r18, r22
    2106:	37 07       	cpc	r19, r23
    2108:	48 07       	cpc	r20, r24
    210a:	ab 07       	cpc	r26, r27
    210c:	b0 e8       	ldi	r27, 0x80	; 128
    210e:	09 f0       	breq	.+2      	; 0x2112 <__divsf3_pse+0x56>
    2110:	bb 0b       	sbc	r27, r27
    2112:	80 2d       	mov	r24, r0
    2114:	bf 01       	movw	r22, r30
    2116:	ff 27       	eor	r31, r31
    2118:	93 58       	subi	r25, 0x83	; 131
    211a:	5f 4f       	sbci	r21, 0xFF	; 255
    211c:	3a f0       	brmi	.+14     	; 0x212c <__divsf3_pse+0x70>
    211e:	9e 3f       	cpi	r25, 0xFE	; 254
    2120:	51 05       	cpc	r21, r1
    2122:	78 f0       	brcs	.+30     	; 0x2142 <__divsf3_pse+0x86>
    2124:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__fp_inf>
    2128:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_szero>
    212c:	5f 3f       	cpi	r21, 0xFF	; 255
    212e:	e4 f3       	brlt	.-8      	; 0x2128 <__divsf3_pse+0x6c>
    2130:	98 3e       	cpi	r25, 0xE8	; 232
    2132:	d4 f3       	brlt	.-12     	; 0x2128 <__divsf3_pse+0x6c>
    2134:	86 95       	lsr	r24
    2136:	77 95       	ror	r23
    2138:	67 95       	ror	r22
    213a:	b7 95       	ror	r27
    213c:	f7 95       	ror	r31
    213e:	9f 5f       	subi	r25, 0xFF	; 255
    2140:	c9 f7       	brne	.-14     	; 0x2134 <__divsf3_pse+0x78>
    2142:	88 0f       	add	r24, r24
    2144:	91 1d       	adc	r25, r1
    2146:	96 95       	lsr	r25
    2148:	87 95       	ror	r24
    214a:	97 f9       	bld	r25, 7
    214c:	08 95       	ret
    214e:	e1 e0       	ldi	r30, 0x01	; 1
    2150:	66 0f       	add	r22, r22
    2152:	77 1f       	adc	r23, r23
    2154:	88 1f       	adc	r24, r24
    2156:	bb 1f       	adc	r27, r27
    2158:	62 17       	cp	r22, r18
    215a:	73 07       	cpc	r23, r19
    215c:	84 07       	cpc	r24, r20
    215e:	ba 07       	cpc	r27, r26
    2160:	20 f0       	brcs	.+8      	; 0x216a <__divsf3_pse+0xae>
    2162:	62 1b       	sub	r22, r18
    2164:	73 0b       	sbc	r23, r19
    2166:	84 0b       	sbc	r24, r20
    2168:	ba 0b       	sbc	r27, r26
    216a:	ee 1f       	adc	r30, r30
    216c:	88 f7       	brcc	.-30     	; 0x2150 <__divsf3_pse+0x94>
    216e:	e0 95       	com	r30
    2170:	08 95       	ret

00002172 <__fixsfsi>:
    2172:	0e 94 c0 10 	call	0x2180	; 0x2180 <__fixunssfsi>
    2176:	68 94       	set
    2178:	b1 11       	cpse	r27, r1
    217a:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_szero>
    217e:	08 95       	ret

00002180 <__fixunssfsi>:
    2180:	0e 94 14 12 	call	0x2428	; 0x2428 <__fp_splitA>
    2184:	88 f0       	brcs	.+34     	; 0x21a8 <__fixunssfsi+0x28>
    2186:	9f 57       	subi	r25, 0x7F	; 127
    2188:	98 f0       	brcs	.+38     	; 0x21b0 <__fixunssfsi+0x30>
    218a:	b9 2f       	mov	r27, r25
    218c:	99 27       	eor	r25, r25
    218e:	b7 51       	subi	r27, 0x17	; 23
    2190:	b0 f0       	brcs	.+44     	; 0x21be <__fixunssfsi+0x3e>
    2192:	e1 f0       	breq	.+56     	; 0x21cc <__fixunssfsi+0x4c>
    2194:	66 0f       	add	r22, r22
    2196:	77 1f       	adc	r23, r23
    2198:	88 1f       	adc	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	1a f0       	brmi	.+6      	; 0x21a4 <__fixunssfsi+0x24>
    219e:	ba 95       	dec	r27
    21a0:	c9 f7       	brne	.-14     	; 0x2194 <__fixunssfsi+0x14>
    21a2:	14 c0       	rjmp	.+40     	; 0x21cc <__fixunssfsi+0x4c>
    21a4:	b1 30       	cpi	r27, 0x01	; 1
    21a6:	91 f0       	breq	.+36     	; 0x21cc <__fixunssfsi+0x4c>
    21a8:	0e 94 46 12 	call	0x248c	; 0x248c <__fp_zero>
    21ac:	b1 e0       	ldi	r27, 0x01	; 1
    21ae:	08 95       	ret
    21b0:	0c 94 46 12 	jmp	0x248c	; 0x248c <__fp_zero>
    21b4:	67 2f       	mov	r22, r23
    21b6:	78 2f       	mov	r23, r24
    21b8:	88 27       	eor	r24, r24
    21ba:	b8 5f       	subi	r27, 0xF8	; 248
    21bc:	39 f0       	breq	.+14     	; 0x21cc <__fixunssfsi+0x4c>
    21be:	b9 3f       	cpi	r27, 0xF9	; 249
    21c0:	cc f3       	brlt	.-14     	; 0x21b4 <__fixunssfsi+0x34>
    21c2:	86 95       	lsr	r24
    21c4:	77 95       	ror	r23
    21c6:	67 95       	ror	r22
    21c8:	b3 95       	inc	r27
    21ca:	d9 f7       	brne	.-10     	; 0x21c2 <__fixunssfsi+0x42>
    21cc:	3e f4       	brtc	.+14     	; 0x21dc <__fixunssfsi+0x5c>
    21ce:	90 95       	com	r25
    21d0:	80 95       	com	r24
    21d2:	70 95       	com	r23
    21d4:	61 95       	neg	r22
    21d6:	7f 4f       	sbci	r23, 0xFF	; 255
    21d8:	8f 4f       	sbci	r24, 0xFF	; 255
    21da:	9f 4f       	sbci	r25, 0xFF	; 255
    21dc:	08 95       	ret

000021de <__floatunsisf>:
    21de:	e8 94       	clt
    21e0:	09 c0       	rjmp	.+18     	; 0x21f4 <__floatsisf+0x12>

000021e2 <__floatsisf>:
    21e2:	97 fb       	bst	r25, 7
    21e4:	3e f4       	brtc	.+14     	; 0x21f4 <__floatsisf+0x12>
    21e6:	90 95       	com	r25
    21e8:	80 95       	com	r24
    21ea:	70 95       	com	r23
    21ec:	61 95       	neg	r22
    21ee:	7f 4f       	sbci	r23, 0xFF	; 255
    21f0:	8f 4f       	sbci	r24, 0xFF	; 255
    21f2:	9f 4f       	sbci	r25, 0xFF	; 255
    21f4:	99 23       	and	r25, r25
    21f6:	a9 f0       	breq	.+42     	; 0x2222 <__floatsisf+0x40>
    21f8:	f9 2f       	mov	r31, r25
    21fa:	96 e9       	ldi	r25, 0x96	; 150
    21fc:	bb 27       	eor	r27, r27
    21fe:	93 95       	inc	r25
    2200:	f6 95       	lsr	r31
    2202:	87 95       	ror	r24
    2204:	77 95       	ror	r23
    2206:	67 95       	ror	r22
    2208:	b7 95       	ror	r27
    220a:	f1 11       	cpse	r31, r1
    220c:	f8 cf       	rjmp	.-16     	; 0x21fe <__floatsisf+0x1c>
    220e:	fa f4       	brpl	.+62     	; 0x224e <__floatsisf+0x6c>
    2210:	bb 0f       	add	r27, r27
    2212:	11 f4       	brne	.+4      	; 0x2218 <__floatsisf+0x36>
    2214:	60 ff       	sbrs	r22, 0
    2216:	1b c0       	rjmp	.+54     	; 0x224e <__floatsisf+0x6c>
    2218:	6f 5f       	subi	r22, 0xFF	; 255
    221a:	7f 4f       	sbci	r23, 0xFF	; 255
    221c:	8f 4f       	sbci	r24, 0xFF	; 255
    221e:	9f 4f       	sbci	r25, 0xFF	; 255
    2220:	16 c0       	rjmp	.+44     	; 0x224e <__floatsisf+0x6c>
    2222:	88 23       	and	r24, r24
    2224:	11 f0       	breq	.+4      	; 0x222a <__floatsisf+0x48>
    2226:	96 e9       	ldi	r25, 0x96	; 150
    2228:	11 c0       	rjmp	.+34     	; 0x224c <__floatsisf+0x6a>
    222a:	77 23       	and	r23, r23
    222c:	21 f0       	breq	.+8      	; 0x2236 <__floatsisf+0x54>
    222e:	9e e8       	ldi	r25, 0x8E	; 142
    2230:	87 2f       	mov	r24, r23
    2232:	76 2f       	mov	r23, r22
    2234:	05 c0       	rjmp	.+10     	; 0x2240 <__floatsisf+0x5e>
    2236:	66 23       	and	r22, r22
    2238:	71 f0       	breq	.+28     	; 0x2256 <__floatsisf+0x74>
    223a:	96 e8       	ldi	r25, 0x86	; 134
    223c:	86 2f       	mov	r24, r22
    223e:	70 e0       	ldi	r23, 0x00	; 0
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	2a f0       	brmi	.+10     	; 0x224e <__floatsisf+0x6c>
    2244:	9a 95       	dec	r25
    2246:	66 0f       	add	r22, r22
    2248:	77 1f       	adc	r23, r23
    224a:	88 1f       	adc	r24, r24
    224c:	da f7       	brpl	.-10     	; 0x2244 <__floatsisf+0x62>
    224e:	88 0f       	add	r24, r24
    2250:	96 95       	lsr	r25
    2252:	87 95       	ror	r24
    2254:	97 f9       	bld	r25, 7
    2256:	08 95       	ret

00002258 <floor>:
    2258:	0e 94 2e 12 	call	0x245c	; 0x245c <__fp_trunc>
    225c:	90 f0       	brcs	.+36     	; 0x2282 <floor+0x2a>
    225e:	9f 37       	cpi	r25, 0x7F	; 127
    2260:	48 f4       	brcc	.+18     	; 0x2274 <floor+0x1c>
    2262:	91 11       	cpse	r25, r1
    2264:	16 f0       	brts	.+4      	; 0x226a <floor+0x12>
    2266:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_szero>
    226a:	60 e0       	ldi	r22, 0x00	; 0
    226c:	70 e0       	ldi	r23, 0x00	; 0
    226e:	80 e8       	ldi	r24, 0x80	; 128
    2270:	9f eb       	ldi	r25, 0xBF	; 191
    2272:	08 95       	ret
    2274:	26 f4       	brtc	.+8      	; 0x227e <floor+0x26>
    2276:	1b 16       	cp	r1, r27
    2278:	61 1d       	adc	r22, r1
    227a:	71 1d       	adc	r23, r1
    227c:	81 1d       	adc	r24, r1
    227e:	0c 94 c1 11 	jmp	0x2382	; 0x2382 <__fp_mintl>
    2282:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__fp_mpack>
    2286:	0e 94 ed 11 	call	0x23da	; 0x23da <__fp_pscA>
    228a:	20 f0       	brcs	.+8      	; 0x2294 <floor+0x3c>
    228c:	19 f0       	breq	.+6      	; 0x2294 <floor+0x3c>
    228e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__fp_pscB>
    2292:	50 f4       	brcc	.+20     	; 0x22a8 <fmod+0xc>
    2294:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_nan>
    2298:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_szero>

0000229c <fmod>:
    229c:	e9 2f       	mov	r30, r25
    229e:	0e 94 0c 12 	call	0x2418	; 0x2418 <__fp_split3>
    22a2:	88 f3       	brcs	.-30     	; 0x2286 <floor+0x2e>
    22a4:	55 23       	and	r21, r21
    22a6:	b1 f3       	breq	.-20     	; 0x2294 <floor+0x3c>
    22a8:	e7 fb       	bst	r30, 7
    22aa:	62 17       	cp	r22, r18
    22ac:	73 07       	cpc	r23, r19
    22ae:	84 07       	cpc	r24, r20
    22b0:	95 07       	cpc	r25, r21
    22b2:	a8 f1       	brcs	.+106    	; 0x231e <fmod+0x82>
    22b4:	89 f3       	breq	.-30     	; 0x2298 <floor+0x40>
    22b6:	e9 2f       	mov	r30, r25
    22b8:	ff 27       	eor	r31, r31
    22ba:	88 23       	and	r24, r24
    22bc:	2a f0       	brmi	.+10     	; 0x22c8 <fmod+0x2c>
    22be:	31 97       	sbiw	r30, 0x01	; 1
    22c0:	66 0f       	add	r22, r22
    22c2:	77 1f       	adc	r23, r23
    22c4:	88 1f       	adc	r24, r24
    22c6:	da f7       	brpl	.-10     	; 0x22be <fmod+0x22>
    22c8:	95 2f       	mov	r25, r21
    22ca:	55 27       	eor	r21, r21
    22cc:	44 23       	and	r20, r20
    22ce:	32 f0       	brmi	.+12     	; 0x22dc <fmod+0x40>
    22d0:	91 50       	subi	r25, 0x01	; 1
    22d2:	50 40       	sbci	r21, 0x00	; 0
    22d4:	22 0f       	add	r18, r18
    22d6:	33 1f       	adc	r19, r19
    22d8:	44 1f       	adc	r20, r20
    22da:	d2 f7       	brpl	.-12     	; 0x22d0 <fmod+0x34>
    22dc:	bb 27       	eor	r27, r27
    22de:	e9 1b       	sub	r30, r25
    22e0:	f5 0b       	sbc	r31, r21
    22e2:	62 1b       	sub	r22, r18
    22e4:	73 0b       	sbc	r23, r19
    22e6:	84 0b       	sbc	r24, r20
    22e8:	b1 09       	sbc	r27, r1
    22ea:	b1 f2       	breq	.-84     	; 0x2298 <floor+0x40>
    22ec:	22 f4       	brpl	.+8      	; 0x22f6 <fmod+0x5a>
    22ee:	62 0f       	add	r22, r18
    22f0:	73 1f       	adc	r23, r19
    22f2:	84 1f       	adc	r24, r20
    22f4:	b1 1d       	adc	r27, r1
    22f6:	31 97       	sbiw	r30, 0x01	; 1
    22f8:	2a f0       	brmi	.+10     	; 0x2304 <fmod+0x68>
    22fa:	66 0f       	add	r22, r22
    22fc:	77 1f       	adc	r23, r23
    22fe:	88 1f       	adc	r24, r24
    2300:	bb 1f       	adc	r27, r27
    2302:	ef cf       	rjmp	.-34     	; 0x22e2 <fmod+0x46>
    2304:	91 50       	subi	r25, 0x01	; 1
    2306:	50 40       	sbci	r21, 0x00	; 0
    2308:	62 f0       	brmi	.+24     	; 0x2322 <fmod+0x86>
    230a:	41 f0       	breq	.+16     	; 0x231c <fmod+0x80>
    230c:	88 23       	and	r24, r24
    230e:	32 f0       	brmi	.+12     	; 0x231c <fmod+0x80>
    2310:	66 0f       	add	r22, r22
    2312:	77 1f       	adc	r23, r23
    2314:	88 1f       	adc	r24, r24
    2316:	91 50       	subi	r25, 0x01	; 1
    2318:	50 40       	sbci	r21, 0x00	; 0
    231a:	c1 f7       	brne	.-16     	; 0x230c <fmod+0x70>
    231c:	93 95       	inc	r25
    231e:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__fp_mpack>
    2322:	86 95       	lsr	r24
    2324:	77 95       	ror	r23
    2326:	67 95       	ror	r22
    2328:	9f 5f       	subi	r25, 0xFF	; 255
    232a:	d9 f7       	brne	.-10     	; 0x2322 <fmod+0x86>
    232c:	f7 cf       	rjmp	.-18     	; 0x231c <fmod+0x80>

0000232e <__fp_cmp>:
    232e:	99 0f       	add	r25, r25
    2330:	00 08       	sbc	r0, r0
    2332:	55 0f       	add	r21, r21
    2334:	aa 0b       	sbc	r26, r26
    2336:	e0 e8       	ldi	r30, 0x80	; 128
    2338:	fe ef       	ldi	r31, 0xFE	; 254
    233a:	16 16       	cp	r1, r22
    233c:	17 06       	cpc	r1, r23
    233e:	e8 07       	cpc	r30, r24
    2340:	f9 07       	cpc	r31, r25
    2342:	c0 f0       	brcs	.+48     	; 0x2374 <__fp_cmp+0x46>
    2344:	12 16       	cp	r1, r18
    2346:	13 06       	cpc	r1, r19
    2348:	e4 07       	cpc	r30, r20
    234a:	f5 07       	cpc	r31, r21
    234c:	98 f0       	brcs	.+38     	; 0x2374 <__fp_cmp+0x46>
    234e:	62 1b       	sub	r22, r18
    2350:	73 0b       	sbc	r23, r19
    2352:	84 0b       	sbc	r24, r20
    2354:	95 0b       	sbc	r25, r21
    2356:	39 f4       	brne	.+14     	; 0x2366 <__fp_cmp+0x38>
    2358:	0a 26       	eor	r0, r26
    235a:	61 f0       	breq	.+24     	; 0x2374 <__fp_cmp+0x46>
    235c:	23 2b       	or	r18, r19
    235e:	24 2b       	or	r18, r20
    2360:	25 2b       	or	r18, r21
    2362:	21 f4       	brne	.+8      	; 0x236c <__fp_cmp+0x3e>
    2364:	08 95       	ret
    2366:	0a 26       	eor	r0, r26
    2368:	09 f4       	brne	.+2      	; 0x236c <__fp_cmp+0x3e>
    236a:	a1 40       	sbci	r26, 0x01	; 1
    236c:	a6 95       	lsr	r26
    236e:	8f ef       	ldi	r24, 0xFF	; 255
    2370:	81 1d       	adc	r24, r1
    2372:	81 1d       	adc	r24, r1
    2374:	08 95       	ret

00002376 <__fp_inf>:
    2376:	97 f9       	bld	r25, 7
    2378:	9f 67       	ori	r25, 0x7F	; 127
    237a:	80 e8       	ldi	r24, 0x80	; 128
    237c:	70 e0       	ldi	r23, 0x00	; 0
    237e:	60 e0       	ldi	r22, 0x00	; 0
    2380:	08 95       	ret

00002382 <__fp_mintl>:
    2382:	88 23       	and	r24, r24
    2384:	71 f4       	brne	.+28     	; 0x23a2 <__fp_mintl+0x20>
    2386:	77 23       	and	r23, r23
    2388:	21 f0       	breq	.+8      	; 0x2392 <__fp_mintl+0x10>
    238a:	98 50       	subi	r25, 0x08	; 8
    238c:	87 2b       	or	r24, r23
    238e:	76 2f       	mov	r23, r22
    2390:	07 c0       	rjmp	.+14     	; 0x23a0 <__fp_mintl+0x1e>
    2392:	66 23       	and	r22, r22
    2394:	11 f4       	brne	.+4      	; 0x239a <__fp_mintl+0x18>
    2396:	99 27       	eor	r25, r25
    2398:	0d c0       	rjmp	.+26     	; 0x23b4 <__fp_mintl+0x32>
    239a:	90 51       	subi	r25, 0x10	; 16
    239c:	86 2b       	or	r24, r22
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	60 e0       	ldi	r22, 0x00	; 0
    23a2:	2a f0       	brmi	.+10     	; 0x23ae <__fp_mintl+0x2c>
    23a4:	9a 95       	dec	r25
    23a6:	66 0f       	add	r22, r22
    23a8:	77 1f       	adc	r23, r23
    23aa:	88 1f       	adc	r24, r24
    23ac:	da f7       	brpl	.-10     	; 0x23a4 <__fp_mintl+0x22>
    23ae:	88 0f       	add	r24, r24
    23b0:	96 95       	lsr	r25
    23b2:	87 95       	ror	r24
    23b4:	97 f9       	bld	r25, 7
    23b6:	08 95       	ret

000023b8 <__fp_mpack>:
    23b8:	9f 3f       	cpi	r25, 0xFF	; 255
    23ba:	31 f0       	breq	.+12     	; 0x23c8 <__fp_mpack_finite+0xc>

000023bc <__fp_mpack_finite>:
    23bc:	91 50       	subi	r25, 0x01	; 1
    23be:	20 f4       	brcc	.+8      	; 0x23c8 <__fp_mpack_finite+0xc>
    23c0:	87 95       	ror	r24
    23c2:	77 95       	ror	r23
    23c4:	67 95       	ror	r22
    23c6:	b7 95       	ror	r27
    23c8:	88 0f       	add	r24, r24
    23ca:	91 1d       	adc	r25, r1
    23cc:	96 95       	lsr	r25
    23ce:	87 95       	ror	r24
    23d0:	97 f9       	bld	r25, 7
    23d2:	08 95       	ret

000023d4 <__fp_nan>:
    23d4:	9f ef       	ldi	r25, 0xFF	; 255
    23d6:	80 ec       	ldi	r24, 0xC0	; 192
    23d8:	08 95       	ret

000023da <__fp_pscA>:
    23da:	00 24       	eor	r0, r0
    23dc:	0a 94       	dec	r0
    23de:	16 16       	cp	r1, r22
    23e0:	17 06       	cpc	r1, r23
    23e2:	18 06       	cpc	r1, r24
    23e4:	09 06       	cpc	r0, r25
    23e6:	08 95       	ret

000023e8 <__fp_pscB>:
    23e8:	00 24       	eor	r0, r0
    23ea:	0a 94       	dec	r0
    23ec:	12 16       	cp	r1, r18
    23ee:	13 06       	cpc	r1, r19
    23f0:	14 06       	cpc	r1, r20
    23f2:	05 06       	cpc	r0, r21
    23f4:	08 95       	ret

000023f6 <__fp_round>:
    23f6:	09 2e       	mov	r0, r25
    23f8:	03 94       	inc	r0
    23fa:	00 0c       	add	r0, r0
    23fc:	11 f4       	brne	.+4      	; 0x2402 <__fp_round+0xc>
    23fe:	88 23       	and	r24, r24
    2400:	52 f0       	brmi	.+20     	; 0x2416 <__fp_round+0x20>
    2402:	bb 0f       	add	r27, r27
    2404:	40 f4       	brcc	.+16     	; 0x2416 <__fp_round+0x20>
    2406:	bf 2b       	or	r27, r31
    2408:	11 f4       	brne	.+4      	; 0x240e <__fp_round+0x18>
    240a:	60 ff       	sbrs	r22, 0
    240c:	04 c0       	rjmp	.+8      	; 0x2416 <__fp_round+0x20>
    240e:	6f 5f       	subi	r22, 0xFF	; 255
    2410:	7f 4f       	sbci	r23, 0xFF	; 255
    2412:	8f 4f       	sbci	r24, 0xFF	; 255
    2414:	9f 4f       	sbci	r25, 0xFF	; 255
    2416:	08 95       	ret

00002418 <__fp_split3>:
    2418:	57 fd       	sbrc	r21, 7
    241a:	90 58       	subi	r25, 0x80	; 128
    241c:	44 0f       	add	r20, r20
    241e:	55 1f       	adc	r21, r21
    2420:	59 f0       	breq	.+22     	; 0x2438 <__fp_splitA+0x10>
    2422:	5f 3f       	cpi	r21, 0xFF	; 255
    2424:	71 f0       	breq	.+28     	; 0x2442 <__fp_splitA+0x1a>
    2426:	47 95       	ror	r20

00002428 <__fp_splitA>:
    2428:	88 0f       	add	r24, r24
    242a:	97 fb       	bst	r25, 7
    242c:	99 1f       	adc	r25, r25
    242e:	61 f0       	breq	.+24     	; 0x2448 <__fp_splitA+0x20>
    2430:	9f 3f       	cpi	r25, 0xFF	; 255
    2432:	79 f0       	breq	.+30     	; 0x2452 <__fp_splitA+0x2a>
    2434:	87 95       	ror	r24
    2436:	08 95       	ret
    2438:	12 16       	cp	r1, r18
    243a:	13 06       	cpc	r1, r19
    243c:	14 06       	cpc	r1, r20
    243e:	55 1f       	adc	r21, r21
    2440:	f2 cf       	rjmp	.-28     	; 0x2426 <__fp_split3+0xe>
    2442:	46 95       	lsr	r20
    2444:	f1 df       	rcall	.-30     	; 0x2428 <__fp_splitA>
    2446:	08 c0       	rjmp	.+16     	; 0x2458 <__fp_splitA+0x30>
    2448:	16 16       	cp	r1, r22
    244a:	17 06       	cpc	r1, r23
    244c:	18 06       	cpc	r1, r24
    244e:	99 1f       	adc	r25, r25
    2450:	f1 cf       	rjmp	.-30     	; 0x2434 <__fp_splitA+0xc>
    2452:	86 95       	lsr	r24
    2454:	71 05       	cpc	r23, r1
    2456:	61 05       	cpc	r22, r1
    2458:	08 94       	sec
    245a:	08 95       	ret

0000245c <__fp_trunc>:
    245c:	0e 94 14 12 	call	0x2428	; 0x2428 <__fp_splitA>
    2460:	a0 f0       	brcs	.+40     	; 0x248a <__fp_trunc+0x2e>
    2462:	be e7       	ldi	r27, 0x7E	; 126
    2464:	b9 17       	cp	r27, r25
    2466:	88 f4       	brcc	.+34     	; 0x248a <__fp_trunc+0x2e>
    2468:	bb 27       	eor	r27, r27
    246a:	9f 38       	cpi	r25, 0x8F	; 143
    246c:	60 f4       	brcc	.+24     	; 0x2486 <__fp_trunc+0x2a>
    246e:	16 16       	cp	r1, r22
    2470:	b1 1d       	adc	r27, r1
    2472:	67 2f       	mov	r22, r23
    2474:	78 2f       	mov	r23, r24
    2476:	88 27       	eor	r24, r24
    2478:	98 5f       	subi	r25, 0xF8	; 248
    247a:	f7 cf       	rjmp	.-18     	; 0x246a <__fp_trunc+0xe>
    247c:	86 95       	lsr	r24
    247e:	77 95       	ror	r23
    2480:	67 95       	ror	r22
    2482:	b1 1d       	adc	r27, r1
    2484:	93 95       	inc	r25
    2486:	96 39       	cpi	r25, 0x96	; 150
    2488:	c8 f3       	brcs	.-14     	; 0x247c <__fp_trunc+0x20>
    248a:	08 95       	ret

0000248c <__fp_zero>:
    248c:	e8 94       	clt

0000248e <__fp_szero>:
    248e:	bb 27       	eor	r27, r27
    2490:	66 27       	eor	r22, r22
    2492:	77 27       	eor	r23, r23
    2494:	cb 01       	movw	r24, r22
    2496:	97 f9       	bld	r25, 7
    2498:	08 95       	ret

0000249a <lround>:
    249a:	0e 94 14 12 	call	0x2428	; 0x2428 <__fp_splitA>
    249e:	58 f1       	brcs	.+86     	; 0x24f6 <lround+0x5c>
    24a0:	9e 57       	subi	r25, 0x7E	; 126
    24a2:	60 f1       	brcs	.+88     	; 0x24fc <lround+0x62>
    24a4:	98 51       	subi	r25, 0x18	; 24
    24a6:	a0 f0       	brcs	.+40     	; 0x24d0 <lround+0x36>
    24a8:	e9 f0       	breq	.+58     	; 0x24e4 <lround+0x4a>
    24aa:	98 30       	cpi	r25, 0x08	; 8
    24ac:	20 f5       	brcc	.+72     	; 0x24f6 <lround+0x5c>
    24ae:	09 2e       	mov	r0, r25
    24b0:	99 27       	eor	r25, r25
    24b2:	66 0f       	add	r22, r22
    24b4:	77 1f       	adc	r23, r23
    24b6:	88 1f       	adc	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	0a 94       	dec	r0
    24bc:	d1 f7       	brne	.-12     	; 0x24b2 <lround+0x18>
    24be:	12 c0       	rjmp	.+36     	; 0x24e4 <lround+0x4a>
    24c0:	06 2e       	mov	r0, r22
    24c2:	67 2f       	mov	r22, r23
    24c4:	78 2f       	mov	r23, r24
    24c6:	88 27       	eor	r24, r24
    24c8:	98 5f       	subi	r25, 0xF8	; 248
    24ca:	11 f4       	brne	.+4      	; 0x24d0 <lround+0x36>
    24cc:	00 0c       	add	r0, r0
    24ce:	07 c0       	rjmp	.+14     	; 0x24de <lround+0x44>
    24d0:	99 3f       	cpi	r25, 0xF9	; 249
    24d2:	b4 f3       	brlt	.-20     	; 0x24c0 <lround+0x26>
    24d4:	86 95       	lsr	r24
    24d6:	77 95       	ror	r23
    24d8:	67 95       	ror	r22
    24da:	93 95       	inc	r25
    24dc:	d9 f7       	brne	.-10     	; 0x24d4 <lround+0x3a>
    24de:	61 1d       	adc	r22, r1
    24e0:	71 1d       	adc	r23, r1
    24e2:	81 1d       	adc	r24, r1
    24e4:	3e f4       	brtc	.+14     	; 0x24f4 <lround+0x5a>
    24e6:	90 95       	com	r25
    24e8:	80 95       	com	r24
    24ea:	70 95       	com	r23
    24ec:	61 95       	neg	r22
    24ee:	7f 4f       	sbci	r23, 0xFF	; 255
    24f0:	8f 4f       	sbci	r24, 0xFF	; 255
    24f2:	9f 4f       	sbci	r25, 0xFF	; 255
    24f4:	08 95       	ret
    24f6:	68 94       	set
    24f8:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_szero>
    24fc:	0c 94 46 12 	jmp	0x248c	; 0x248c <__fp_zero>

00002500 <__mulsf3>:
    2500:	0e 94 93 12 	call	0x2526	; 0x2526 <__mulsf3x>
    2504:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__fp_round>
    2508:	0e 94 ed 11 	call	0x23da	; 0x23da <__fp_pscA>
    250c:	38 f0       	brcs	.+14     	; 0x251c <__mulsf3+0x1c>
    250e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <__fp_pscB>
    2512:	20 f0       	brcs	.+8      	; 0x251c <__mulsf3+0x1c>
    2514:	95 23       	and	r25, r21
    2516:	11 f0       	breq	.+4      	; 0x251c <__mulsf3+0x1c>
    2518:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__fp_inf>
    251c:	0c 94 ea 11 	jmp	0x23d4	; 0x23d4 <__fp_nan>
    2520:	11 24       	eor	r1, r1
    2522:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_szero>

00002526 <__mulsf3x>:
    2526:	0e 94 0c 12 	call	0x2418	; 0x2418 <__fp_split3>
    252a:	70 f3       	brcs	.-36     	; 0x2508 <__mulsf3+0x8>

0000252c <__mulsf3_pse>:
    252c:	95 9f       	mul	r25, r21
    252e:	c1 f3       	breq	.-16     	; 0x2520 <__mulsf3+0x20>
    2530:	95 0f       	add	r25, r21
    2532:	50 e0       	ldi	r21, 0x00	; 0
    2534:	55 1f       	adc	r21, r21
    2536:	62 9f       	mul	r22, r18
    2538:	f0 01       	movw	r30, r0
    253a:	72 9f       	mul	r23, r18
    253c:	bb 27       	eor	r27, r27
    253e:	f0 0d       	add	r31, r0
    2540:	b1 1d       	adc	r27, r1
    2542:	63 9f       	mul	r22, r19
    2544:	aa 27       	eor	r26, r26
    2546:	f0 0d       	add	r31, r0
    2548:	b1 1d       	adc	r27, r1
    254a:	aa 1f       	adc	r26, r26
    254c:	64 9f       	mul	r22, r20
    254e:	66 27       	eor	r22, r22
    2550:	b0 0d       	add	r27, r0
    2552:	a1 1d       	adc	r26, r1
    2554:	66 1f       	adc	r22, r22
    2556:	82 9f       	mul	r24, r18
    2558:	22 27       	eor	r18, r18
    255a:	b0 0d       	add	r27, r0
    255c:	a1 1d       	adc	r26, r1
    255e:	62 1f       	adc	r22, r18
    2560:	73 9f       	mul	r23, r19
    2562:	b0 0d       	add	r27, r0
    2564:	a1 1d       	adc	r26, r1
    2566:	62 1f       	adc	r22, r18
    2568:	83 9f       	mul	r24, r19
    256a:	a0 0d       	add	r26, r0
    256c:	61 1d       	adc	r22, r1
    256e:	22 1f       	adc	r18, r18
    2570:	74 9f       	mul	r23, r20
    2572:	33 27       	eor	r19, r19
    2574:	a0 0d       	add	r26, r0
    2576:	61 1d       	adc	r22, r1
    2578:	23 1f       	adc	r18, r19
    257a:	84 9f       	mul	r24, r20
    257c:	60 0d       	add	r22, r0
    257e:	21 1d       	adc	r18, r1
    2580:	82 2f       	mov	r24, r18
    2582:	76 2f       	mov	r23, r22
    2584:	6a 2f       	mov	r22, r26
    2586:	11 24       	eor	r1, r1
    2588:	9f 57       	subi	r25, 0x7F	; 127
    258a:	50 40       	sbci	r21, 0x00	; 0
    258c:	9a f0       	brmi	.+38     	; 0x25b4 <__mulsf3_pse+0x88>
    258e:	f1 f0       	breq	.+60     	; 0x25cc <__mulsf3_pse+0xa0>
    2590:	88 23       	and	r24, r24
    2592:	4a f0       	brmi	.+18     	; 0x25a6 <__mulsf3_pse+0x7a>
    2594:	ee 0f       	add	r30, r30
    2596:	ff 1f       	adc	r31, r31
    2598:	bb 1f       	adc	r27, r27
    259a:	66 1f       	adc	r22, r22
    259c:	77 1f       	adc	r23, r23
    259e:	88 1f       	adc	r24, r24
    25a0:	91 50       	subi	r25, 0x01	; 1
    25a2:	50 40       	sbci	r21, 0x00	; 0
    25a4:	a9 f7       	brne	.-22     	; 0x2590 <__mulsf3_pse+0x64>
    25a6:	9e 3f       	cpi	r25, 0xFE	; 254
    25a8:	51 05       	cpc	r21, r1
    25aa:	80 f0       	brcs	.+32     	; 0x25cc <__mulsf3_pse+0xa0>
    25ac:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__fp_inf>
    25b0:	0c 94 47 12 	jmp	0x248e	; 0x248e <__fp_szero>
    25b4:	5f 3f       	cpi	r21, 0xFF	; 255
    25b6:	e4 f3       	brlt	.-8      	; 0x25b0 <__mulsf3_pse+0x84>
    25b8:	98 3e       	cpi	r25, 0xE8	; 232
    25ba:	d4 f3       	brlt	.-12     	; 0x25b0 <__mulsf3_pse+0x84>
    25bc:	86 95       	lsr	r24
    25be:	77 95       	ror	r23
    25c0:	67 95       	ror	r22
    25c2:	b7 95       	ror	r27
    25c4:	f7 95       	ror	r31
    25c6:	e7 95       	ror	r30
    25c8:	9f 5f       	subi	r25, 0xFF	; 255
    25ca:	c1 f7       	brne	.-16     	; 0x25bc <__mulsf3_pse+0x90>
    25cc:	fe 2b       	or	r31, r30
    25ce:	88 0f       	add	r24, r24
    25d0:	91 1d       	adc	r25, r1
    25d2:	96 95       	lsr	r25
    25d4:	87 95       	ror	r24
    25d6:	97 f9       	bld	r25, 7
    25d8:	08 95       	ret

000025da <__ftoa_engine>:
    25da:	28 30       	cpi	r18, 0x08	; 8
    25dc:	08 f0       	brcs	.+2      	; 0x25e0 <__ftoa_engine+0x6>
    25de:	27 e0       	ldi	r18, 0x07	; 7
    25e0:	33 27       	eor	r19, r19
    25e2:	da 01       	movw	r26, r20
    25e4:	99 0f       	add	r25, r25
    25e6:	31 1d       	adc	r19, r1
    25e8:	87 fd       	sbrc	r24, 7
    25ea:	91 60       	ori	r25, 0x01	; 1
    25ec:	00 96       	adiw	r24, 0x00	; 0
    25ee:	61 05       	cpc	r22, r1
    25f0:	71 05       	cpc	r23, r1
    25f2:	39 f4       	brne	.+14     	; 0x2602 <__ftoa_engine+0x28>
    25f4:	32 60       	ori	r19, 0x02	; 2
    25f6:	2e 5f       	subi	r18, 0xFE	; 254
    25f8:	3d 93       	st	X+, r19
    25fa:	30 e3       	ldi	r19, 0x30	; 48
    25fc:	2a 95       	dec	r18
    25fe:	e1 f7       	brne	.-8      	; 0x25f8 <__ftoa_engine+0x1e>
    2600:	08 95       	ret
    2602:	9f 3f       	cpi	r25, 0xFF	; 255
    2604:	30 f0       	brcs	.+12     	; 0x2612 <__ftoa_engine+0x38>
    2606:	80 38       	cpi	r24, 0x80	; 128
    2608:	71 05       	cpc	r23, r1
    260a:	61 05       	cpc	r22, r1
    260c:	09 f0       	breq	.+2      	; 0x2610 <__ftoa_engine+0x36>
    260e:	3c 5f       	subi	r19, 0xFC	; 252
    2610:	3c 5f       	subi	r19, 0xFC	; 252
    2612:	3d 93       	st	X+, r19
    2614:	91 30       	cpi	r25, 0x01	; 1
    2616:	08 f0       	brcs	.+2      	; 0x261a <__ftoa_engine+0x40>
    2618:	80 68       	ori	r24, 0x80	; 128
    261a:	91 1d       	adc	r25, r1
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	1f 93       	push	r17
    2622:	0f 93       	push	r16
    2624:	ff 92       	push	r15
    2626:	ef 92       	push	r14
    2628:	19 2f       	mov	r17, r25
    262a:	98 7f       	andi	r25, 0xF8	; 248
    262c:	96 95       	lsr	r25
    262e:	e9 2f       	mov	r30, r25
    2630:	96 95       	lsr	r25
    2632:	96 95       	lsr	r25
    2634:	e9 0f       	add	r30, r25
    2636:	ff 27       	eor	r31, r31
    2638:	e8 5f       	subi	r30, 0xF8	; 248
    263a:	fe 4f       	sbci	r31, 0xFE	; 254
    263c:	99 27       	eor	r25, r25
    263e:	33 27       	eor	r19, r19
    2640:	ee 24       	eor	r14, r14
    2642:	ff 24       	eor	r15, r15
    2644:	a7 01       	movw	r20, r14
    2646:	e7 01       	movw	r28, r14
    2648:	05 90       	lpm	r0, Z+
    264a:	08 94       	sec
    264c:	07 94       	ror	r0
    264e:	28 f4       	brcc	.+10     	; 0x265a <__ftoa_engine+0x80>
    2650:	36 0f       	add	r19, r22
    2652:	e7 1e       	adc	r14, r23
    2654:	f8 1e       	adc	r15, r24
    2656:	49 1f       	adc	r20, r25
    2658:	51 1d       	adc	r21, r1
    265a:	66 0f       	add	r22, r22
    265c:	77 1f       	adc	r23, r23
    265e:	88 1f       	adc	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	06 94       	lsr	r0
    2664:	a1 f7       	brne	.-24     	; 0x264e <__ftoa_engine+0x74>
    2666:	05 90       	lpm	r0, Z+
    2668:	07 94       	ror	r0
    266a:	28 f4       	brcc	.+10     	; 0x2676 <__ftoa_engine+0x9c>
    266c:	e7 0e       	add	r14, r23
    266e:	f8 1e       	adc	r15, r24
    2670:	49 1f       	adc	r20, r25
    2672:	56 1f       	adc	r21, r22
    2674:	c1 1d       	adc	r28, r1
    2676:	77 0f       	add	r23, r23
    2678:	88 1f       	adc	r24, r24
    267a:	99 1f       	adc	r25, r25
    267c:	66 1f       	adc	r22, r22
    267e:	06 94       	lsr	r0
    2680:	a1 f7       	brne	.-24     	; 0x266a <__ftoa_engine+0x90>
    2682:	05 90       	lpm	r0, Z+
    2684:	07 94       	ror	r0
    2686:	28 f4       	brcc	.+10     	; 0x2692 <__ftoa_engine+0xb8>
    2688:	f8 0e       	add	r15, r24
    268a:	49 1f       	adc	r20, r25
    268c:	56 1f       	adc	r21, r22
    268e:	c7 1f       	adc	r28, r23
    2690:	d1 1d       	adc	r29, r1
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	66 1f       	adc	r22, r22
    2698:	77 1f       	adc	r23, r23
    269a:	06 94       	lsr	r0
    269c:	a1 f7       	brne	.-24     	; 0x2686 <__ftoa_engine+0xac>
    269e:	05 90       	lpm	r0, Z+
    26a0:	07 94       	ror	r0
    26a2:	20 f4       	brcc	.+8      	; 0x26ac <__ftoa_engine+0xd2>
    26a4:	49 0f       	add	r20, r25
    26a6:	56 1f       	adc	r21, r22
    26a8:	c7 1f       	adc	r28, r23
    26aa:	d8 1f       	adc	r29, r24
    26ac:	99 0f       	add	r25, r25
    26ae:	66 1f       	adc	r22, r22
    26b0:	77 1f       	adc	r23, r23
    26b2:	88 1f       	adc	r24, r24
    26b4:	06 94       	lsr	r0
    26b6:	a9 f7       	brne	.-22     	; 0x26a2 <__ftoa_engine+0xc8>
    26b8:	84 91       	lpm	r24, Z
    26ba:	10 95       	com	r17
    26bc:	17 70       	andi	r17, 0x07	; 7
    26be:	41 f0       	breq	.+16     	; 0x26d0 <__ftoa_engine+0xf6>
    26c0:	d6 95       	lsr	r29
    26c2:	c7 95       	ror	r28
    26c4:	57 95       	ror	r21
    26c6:	47 95       	ror	r20
    26c8:	f7 94       	ror	r15
    26ca:	e7 94       	ror	r14
    26cc:	1a 95       	dec	r17
    26ce:	c1 f7       	brne	.-16     	; 0x26c0 <__ftoa_engine+0xe6>
    26d0:	ee ea       	ldi	r30, 0xAE	; 174
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	68 94       	set
    26d6:	15 90       	lpm	r1, Z+
    26d8:	15 91       	lpm	r17, Z+
    26da:	35 91       	lpm	r19, Z+
    26dc:	65 91       	lpm	r22, Z+
    26de:	95 91       	lpm	r25, Z+
    26e0:	05 90       	lpm	r0, Z+
    26e2:	7f e2       	ldi	r23, 0x2F	; 47
    26e4:	73 95       	inc	r23
    26e6:	e1 18       	sub	r14, r1
    26e8:	f1 0a       	sbc	r15, r17
    26ea:	43 0b       	sbc	r20, r19
    26ec:	56 0b       	sbc	r21, r22
    26ee:	c9 0b       	sbc	r28, r25
    26f0:	d0 09       	sbc	r29, r0
    26f2:	c0 f7       	brcc	.-16     	; 0x26e4 <__ftoa_engine+0x10a>
    26f4:	e1 0c       	add	r14, r1
    26f6:	f1 1e       	adc	r15, r17
    26f8:	43 1f       	adc	r20, r19
    26fa:	56 1f       	adc	r21, r22
    26fc:	c9 1f       	adc	r28, r25
    26fe:	d0 1d       	adc	r29, r0
    2700:	7e f4       	brtc	.+30     	; 0x2720 <__ftoa_engine+0x146>
    2702:	70 33       	cpi	r23, 0x30	; 48
    2704:	11 f4       	brne	.+4      	; 0x270a <__ftoa_engine+0x130>
    2706:	8a 95       	dec	r24
    2708:	e6 cf       	rjmp	.-52     	; 0x26d6 <__ftoa_engine+0xfc>
    270a:	e8 94       	clt
    270c:	01 50       	subi	r16, 0x01	; 1
    270e:	30 f0       	brcs	.+12     	; 0x271c <__ftoa_engine+0x142>
    2710:	08 0f       	add	r16, r24
    2712:	0a f4       	brpl	.+2      	; 0x2716 <__ftoa_engine+0x13c>
    2714:	00 27       	eor	r16, r16
    2716:	02 17       	cp	r16, r18
    2718:	08 f4       	brcc	.+2      	; 0x271c <__ftoa_engine+0x142>
    271a:	20 2f       	mov	r18, r16
    271c:	23 95       	inc	r18
    271e:	02 2f       	mov	r16, r18
    2720:	7a 33       	cpi	r23, 0x3A	; 58
    2722:	28 f0       	brcs	.+10     	; 0x272e <__ftoa_engine+0x154>
    2724:	79 e3       	ldi	r23, 0x39	; 57
    2726:	7d 93       	st	X+, r23
    2728:	2a 95       	dec	r18
    272a:	e9 f7       	brne	.-6      	; 0x2726 <__ftoa_engine+0x14c>
    272c:	10 c0       	rjmp	.+32     	; 0x274e <__ftoa_engine+0x174>
    272e:	7d 93       	st	X+, r23
    2730:	2a 95       	dec	r18
    2732:	89 f6       	brne	.-94     	; 0x26d6 <__ftoa_engine+0xfc>
    2734:	06 94       	lsr	r0
    2736:	97 95       	ror	r25
    2738:	67 95       	ror	r22
    273a:	37 95       	ror	r19
    273c:	17 95       	ror	r17
    273e:	17 94       	ror	r1
    2740:	e1 18       	sub	r14, r1
    2742:	f1 0a       	sbc	r15, r17
    2744:	43 0b       	sbc	r20, r19
    2746:	56 0b       	sbc	r21, r22
    2748:	c9 0b       	sbc	r28, r25
    274a:	d0 09       	sbc	r29, r0
    274c:	98 f0       	brcs	.+38     	; 0x2774 <__ftoa_engine+0x19a>
    274e:	23 95       	inc	r18
    2750:	7e 91       	ld	r23, -X
    2752:	73 95       	inc	r23
    2754:	7a 33       	cpi	r23, 0x3A	; 58
    2756:	08 f0       	brcs	.+2      	; 0x275a <__ftoa_engine+0x180>
    2758:	70 e3       	ldi	r23, 0x30	; 48
    275a:	7c 93       	st	X, r23
    275c:	20 13       	cpse	r18, r16
    275e:	b8 f7       	brcc	.-18     	; 0x274e <__ftoa_engine+0x174>
    2760:	7e 91       	ld	r23, -X
    2762:	70 61       	ori	r23, 0x10	; 16
    2764:	7d 93       	st	X+, r23
    2766:	30 f0       	brcs	.+12     	; 0x2774 <__ftoa_engine+0x19a>
    2768:	83 95       	inc	r24
    276a:	71 e3       	ldi	r23, 0x31	; 49
    276c:	7d 93       	st	X+, r23
    276e:	70 e3       	ldi	r23, 0x30	; 48
    2770:	2a 95       	dec	r18
    2772:	e1 f7       	brne	.-8      	; 0x276c <__ftoa_engine+0x192>
    2774:	11 24       	eor	r1, r1
    2776:	ef 90       	pop	r14
    2778:	ff 90       	pop	r15
    277a:	0f 91       	pop	r16
    277c:	1f 91       	pop	r17
    277e:	cf 91       	pop	r28
    2780:	df 91       	pop	r29
    2782:	99 27       	eor	r25, r25
    2784:	87 fd       	sbrc	r24, 7
    2786:	90 95       	com	r25
    2788:	08 95       	ret

0000278a <strcpy_P>:
    278a:	fb 01       	movw	r30, r22
    278c:	dc 01       	movw	r26, r24
    278e:	05 90       	lpm	r0, Z+
    2790:	0d 92       	st	X+, r0
    2792:	00 20       	and	r0, r0
    2794:	e1 f7       	brne	.-8      	; 0x278e <strcpy_P+0x4>
    2796:	08 95       	ret

00002798 <strnlen_P>:
    2798:	fc 01       	movw	r30, r24
    279a:	05 90       	lpm	r0, Z+
    279c:	61 50       	subi	r22, 0x01	; 1
    279e:	70 40       	sbci	r23, 0x00	; 0
    27a0:	01 10       	cpse	r0, r1
    27a2:	d8 f7       	brcc	.-10     	; 0x279a <strnlen_P+0x2>
    27a4:	80 95       	com	r24
    27a6:	90 95       	com	r25
    27a8:	8e 0f       	add	r24, r30
    27aa:	9f 1f       	adc	r25, r31
    27ac:	08 95       	ret

000027ae <strcpy>:
    27ae:	fb 01       	movw	r30, r22
    27b0:	dc 01       	movw	r26, r24
    27b2:	01 90       	ld	r0, Z+
    27b4:	0d 92       	st	X+, r0
    27b6:	00 20       	and	r0, r0
    27b8:	e1 f7       	brne	.-8      	; 0x27b2 <strcpy+0x4>
    27ba:	08 95       	ret

000027bc <strnlen>:
    27bc:	fc 01       	movw	r30, r24
    27be:	61 50       	subi	r22, 0x01	; 1
    27c0:	70 40       	sbci	r23, 0x00	; 0
    27c2:	01 90       	ld	r0, Z+
    27c4:	01 10       	cpse	r0, r1
    27c6:	d8 f7       	brcc	.-10     	; 0x27be <strnlen+0x2>
    27c8:	80 95       	com	r24
    27ca:	90 95       	com	r25
    27cc:	8e 0f       	add	r24, r30
    27ce:	9f 1f       	adc	r25, r31
    27d0:	08 95       	ret

000027d2 <fputc>:
    27d2:	0f 93       	push	r16
    27d4:	1f 93       	push	r17
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	fb 01       	movw	r30, r22
    27dc:	23 81       	ldd	r18, Z+3	; 0x03
    27de:	21 fd       	sbrc	r18, 1
    27e0:	03 c0       	rjmp	.+6      	; 0x27e8 <fputc+0x16>
    27e2:	8f ef       	ldi	r24, 0xFF	; 255
    27e4:	9f ef       	ldi	r25, 0xFF	; 255
    27e6:	28 c0       	rjmp	.+80     	; 0x2838 <fputc+0x66>
    27e8:	22 ff       	sbrs	r18, 2
    27ea:	16 c0       	rjmp	.+44     	; 0x2818 <fputc+0x46>
    27ec:	46 81       	ldd	r20, Z+6	; 0x06
    27ee:	57 81       	ldd	r21, Z+7	; 0x07
    27f0:	24 81       	ldd	r18, Z+4	; 0x04
    27f2:	35 81       	ldd	r19, Z+5	; 0x05
    27f4:	42 17       	cp	r20, r18
    27f6:	53 07       	cpc	r21, r19
    27f8:	44 f4       	brge	.+16     	; 0x280a <fputc+0x38>
    27fa:	a0 81       	ld	r26, Z
    27fc:	b1 81       	ldd	r27, Z+1	; 0x01
    27fe:	9d 01       	movw	r18, r26
    2800:	2f 5f       	subi	r18, 0xFF	; 255
    2802:	3f 4f       	sbci	r19, 0xFF	; 255
    2804:	31 83       	std	Z+1, r19	; 0x01
    2806:	20 83       	st	Z, r18
    2808:	8c 93       	st	X, r24
    280a:	26 81       	ldd	r18, Z+6	; 0x06
    280c:	37 81       	ldd	r19, Z+7	; 0x07
    280e:	2f 5f       	subi	r18, 0xFF	; 255
    2810:	3f 4f       	sbci	r19, 0xFF	; 255
    2812:	37 83       	std	Z+7, r19	; 0x07
    2814:	26 83       	std	Z+6, r18	; 0x06
    2816:	10 c0       	rjmp	.+32     	; 0x2838 <fputc+0x66>
    2818:	eb 01       	movw	r28, r22
    281a:	09 2f       	mov	r16, r25
    281c:	18 2f       	mov	r17, r24
    281e:	00 84       	ldd	r0, Z+8	; 0x08
    2820:	f1 85       	ldd	r31, Z+9	; 0x09
    2822:	e0 2d       	mov	r30, r0
    2824:	09 95       	icall
    2826:	89 2b       	or	r24, r25
    2828:	e1 f6       	brne	.-72     	; 0x27e2 <fputc+0x10>
    282a:	8e 81       	ldd	r24, Y+6	; 0x06
    282c:	9f 81       	ldd	r25, Y+7	; 0x07
    282e:	01 96       	adiw	r24, 0x01	; 1
    2830:	9f 83       	std	Y+7, r25	; 0x07
    2832:	8e 83       	std	Y+6, r24	; 0x06
    2834:	81 2f       	mov	r24, r17
    2836:	90 2f       	mov	r25, r16
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	08 95       	ret

00002842 <sprintf>:
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	2e 97       	sbiw	r28, 0x0e	; 14
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	f8 94       	cli
    2854:	de bf       	out	0x3e, r29	; 62
    2856:	0f be       	out	0x3f, r0	; 63
    2858:	cd bf       	out	0x3d, r28	; 61
    285a:	0d 89       	ldd	r16, Y+21	; 0x15
    285c:	1e 89       	ldd	r17, Y+22	; 0x16
    285e:	86 e0       	ldi	r24, 0x06	; 6
    2860:	8c 83       	std	Y+4, r24	; 0x04
    2862:	1a 83       	std	Y+2, r17	; 0x02
    2864:	09 83       	std	Y+1, r16	; 0x01
    2866:	8f ef       	ldi	r24, 0xFF	; 255
    2868:	9f e7       	ldi	r25, 0x7F	; 127
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
    286e:	ae 01       	movw	r20, r28
    2870:	47 5e       	subi	r20, 0xE7	; 231
    2872:	5f 4f       	sbci	r21, 0xFF	; 255
    2874:	6f 89       	ldd	r22, Y+23	; 0x17
    2876:	78 8d       	ldd	r23, Y+24	; 0x18
    2878:	ce 01       	movw	r24, r28
    287a:	01 96       	adiw	r24, 0x01	; 1
    287c:	0e 94 30 0c 	call	0x1860	; 0x1860 <vfprintf>
    2880:	2f 81       	ldd	r18, Y+7	; 0x07
    2882:	38 85       	ldd	r19, Y+8	; 0x08
    2884:	f8 01       	movw	r30, r16
    2886:	e2 0f       	add	r30, r18
    2888:	f3 1f       	adc	r31, r19
    288a:	10 82       	st	Z, r1
    288c:	2e 96       	adiw	r28, 0x0e	; 14
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	df 91       	pop	r29
    289a:	cf 91       	pop	r28
    289c:	1f 91       	pop	r17
    289e:	0f 91       	pop	r16
    28a0:	08 95       	ret

000028a2 <__ultoa_invert>:
    28a2:	fa 01       	movw	r30, r20
    28a4:	aa 27       	eor	r26, r26
    28a6:	28 30       	cpi	r18, 0x08	; 8
    28a8:	51 f1       	breq	.+84     	; 0x28fe <__ultoa_invert+0x5c>
    28aa:	20 31       	cpi	r18, 0x10	; 16
    28ac:	81 f1       	breq	.+96     	; 0x290e <__ultoa_invert+0x6c>
    28ae:	e8 94       	clt
    28b0:	6f 93       	push	r22
    28b2:	6e 7f       	andi	r22, 0xFE	; 254
    28b4:	6e 5f       	subi	r22, 0xFE	; 254
    28b6:	7f 4f       	sbci	r23, 0xFF	; 255
    28b8:	8f 4f       	sbci	r24, 0xFF	; 255
    28ba:	9f 4f       	sbci	r25, 0xFF	; 255
    28bc:	af 4f       	sbci	r26, 0xFF	; 255
    28be:	b1 e0       	ldi	r27, 0x01	; 1
    28c0:	3e d0       	rcall	.+124    	; 0x293e <__ultoa_invert+0x9c>
    28c2:	b4 e0       	ldi	r27, 0x04	; 4
    28c4:	3c d0       	rcall	.+120    	; 0x293e <__ultoa_invert+0x9c>
    28c6:	67 0f       	add	r22, r23
    28c8:	78 1f       	adc	r23, r24
    28ca:	89 1f       	adc	r24, r25
    28cc:	9a 1f       	adc	r25, r26
    28ce:	a1 1d       	adc	r26, r1
    28d0:	68 0f       	add	r22, r24
    28d2:	79 1f       	adc	r23, r25
    28d4:	8a 1f       	adc	r24, r26
    28d6:	91 1d       	adc	r25, r1
    28d8:	a1 1d       	adc	r26, r1
    28da:	6a 0f       	add	r22, r26
    28dc:	71 1d       	adc	r23, r1
    28de:	81 1d       	adc	r24, r1
    28e0:	91 1d       	adc	r25, r1
    28e2:	a1 1d       	adc	r26, r1
    28e4:	20 d0       	rcall	.+64     	; 0x2926 <__ultoa_invert+0x84>
    28e6:	09 f4       	brne	.+2      	; 0x28ea <__ultoa_invert+0x48>
    28e8:	68 94       	set
    28ea:	3f 91       	pop	r19
    28ec:	2a e0       	ldi	r18, 0x0A	; 10
    28ee:	26 9f       	mul	r18, r22
    28f0:	11 24       	eor	r1, r1
    28f2:	30 19       	sub	r19, r0
    28f4:	30 5d       	subi	r19, 0xD0	; 208
    28f6:	31 93       	st	Z+, r19
    28f8:	de f6       	brtc	.-74     	; 0x28b0 <__ultoa_invert+0xe>
    28fa:	cf 01       	movw	r24, r30
    28fc:	08 95       	ret
    28fe:	46 2f       	mov	r20, r22
    2900:	47 70       	andi	r20, 0x07	; 7
    2902:	40 5d       	subi	r20, 0xD0	; 208
    2904:	41 93       	st	Z+, r20
    2906:	b3 e0       	ldi	r27, 0x03	; 3
    2908:	0f d0       	rcall	.+30     	; 0x2928 <__ultoa_invert+0x86>
    290a:	c9 f7       	brne	.-14     	; 0x28fe <__ultoa_invert+0x5c>
    290c:	f6 cf       	rjmp	.-20     	; 0x28fa <__ultoa_invert+0x58>
    290e:	46 2f       	mov	r20, r22
    2910:	4f 70       	andi	r20, 0x0F	; 15
    2912:	40 5d       	subi	r20, 0xD0	; 208
    2914:	4a 33       	cpi	r20, 0x3A	; 58
    2916:	18 f0       	brcs	.+6      	; 0x291e <__ultoa_invert+0x7c>
    2918:	49 5d       	subi	r20, 0xD9	; 217
    291a:	31 fd       	sbrc	r19, 1
    291c:	40 52       	subi	r20, 0x20	; 32
    291e:	41 93       	st	Z+, r20
    2920:	02 d0       	rcall	.+4      	; 0x2926 <__ultoa_invert+0x84>
    2922:	a9 f7       	brne	.-22     	; 0x290e <__ultoa_invert+0x6c>
    2924:	ea cf       	rjmp	.-44     	; 0x28fa <__ultoa_invert+0x58>
    2926:	b4 e0       	ldi	r27, 0x04	; 4
    2928:	a6 95       	lsr	r26
    292a:	97 95       	ror	r25
    292c:	87 95       	ror	r24
    292e:	77 95       	ror	r23
    2930:	67 95       	ror	r22
    2932:	ba 95       	dec	r27
    2934:	c9 f7       	brne	.-14     	; 0x2928 <__ultoa_invert+0x86>
    2936:	00 97       	sbiw	r24, 0x00	; 0
    2938:	61 05       	cpc	r22, r1
    293a:	71 05       	cpc	r23, r1
    293c:	08 95       	ret
    293e:	9b 01       	movw	r18, r22
    2940:	ac 01       	movw	r20, r24
    2942:	0a 2e       	mov	r0, r26
    2944:	06 94       	lsr	r0
    2946:	57 95       	ror	r21
    2948:	47 95       	ror	r20
    294a:	37 95       	ror	r19
    294c:	27 95       	ror	r18
    294e:	ba 95       	dec	r27
    2950:	c9 f7       	brne	.-14     	; 0x2944 <__ultoa_invert+0xa2>
    2952:	62 0f       	add	r22, r18
    2954:	73 1f       	adc	r23, r19
    2956:	84 1f       	adc	r24, r20
    2958:	95 1f       	adc	r25, r21
    295a:	a0 1d       	adc	r26, r0
    295c:	08 95       	ret

0000295e <_exit>:
    295e:	f8 94       	cli

00002960 <__stop_program>:
    2960:	ff cf       	rjmp	.-2      	; 0x2960 <__stop_program>
