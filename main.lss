
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00002c38  00002ccc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  0080020c  0080020c  00002dd8  2**0
                  ALLOC
  3 .stab         00003630  00000000  00000000  00002dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001560  00000000  00000000  00006408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00007968  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000797c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__ctors_end>
       4:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       8:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
       c:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_3>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_4>
      14:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_5>
      18:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_6>
      1c:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_7>
      20:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_8>
      24:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      28:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      2c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_12>
      34:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      38:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_15>
      40:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      44:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      48:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      4c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      50:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      54:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      58:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      5c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      60:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      64:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      68:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      6c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      70:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      78:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      7c:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      80:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      84:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>
      88:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__bad_interrupt>

0000008c <__trampolines_end>:
      8c:	53 74       	andi	r21, 0x43	; 67
      8e:	61 72       	andi	r22, 0x21	; 33
      90:	74 69       	ori	r23, 0x94	; 148
      92:	6e 67       	ori	r22, 0x7E	; 126
      94:	20 72       	andi	r18, 0x20	; 32
      96:	61 64       	ori	r22, 0x41	; 65
      98:	69 6f       	ori	r22, 0xF9	; 249
	...

0000009b <string_intro_row1.2453>:
      9b:	2a 2a 2a 20 53 4d 36 56 46 5a 00                    *** SM6VFZ.

000000a6 <__c.2179>:
      a6:	6e 61 6e 00                                         nan.

000000aa <__c.2177>:
      aa:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ba:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      ca:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      da:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ea:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      fa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     10a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     11a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     12a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     13a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     14a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     15a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     16a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     17a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     18a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     19a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001a8 <__ctors_end>:
     1a8:	11 24       	eor	r1, r1
     1aa:	1f be       	out	0x3f, r1	; 63
     1ac:	cf ef       	ldi	r28, 0xFF	; 255
     1ae:	d0 e1       	ldi	r29, 0x10	; 16
     1b0:	de bf       	out	0x3e, r29	; 62
     1b2:	cd bf       	out	0x3d, r28	; 61

000001b4 <__do_copy_data>:
     1b4:	12 e0       	ldi	r17, 0x02	; 2
     1b6:	a0 e0       	ldi	r26, 0x00	; 0
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	e8 e3       	ldi	r30, 0x38	; 56
     1bc:	fc e2       	ldi	r31, 0x2C	; 44
     1be:	00 e0       	ldi	r16, 0x00	; 0
     1c0:	0b bf       	out	0x3b, r16	; 59
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <__do_copy_data+0x14>
     1c4:	07 90       	elpm	r0, Z+
     1c6:	0d 92       	st	X+, r0
     1c8:	ac 30       	cpi	r26, 0x0C	; 12
     1ca:	b1 07       	cpc	r27, r17
     1cc:	d9 f7       	brne	.-10     	; 0x1c4 <__do_copy_data+0x10>

000001ce <__do_clear_bss>:
     1ce:	22 e0       	ldi	r18, 0x02	; 2
     1d0:	ac e0       	ldi	r26, 0x0C	; 12
     1d2:	b2 e0       	ldi	r27, 0x02	; 2
     1d4:	01 c0       	rjmp	.+2      	; 0x1d8 <.do_clear_bss_start>

000001d6 <.do_clear_bss_loop>:
     1d6:	1d 92       	st	X+, r1

000001d8 <.do_clear_bss_start>:
     1d8:	a6 33       	cpi	r26, 0x36	; 54
     1da:	b2 07       	cpc	r27, r18
     1dc:	e1 f7       	brne	.-8      	; 0x1d6 <.do_clear_bss_loop>
     1de:	0e 94 db 07 	call	0xfb6	; 0xfb6 <main>
     1e2:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <_exit>

000001e6 <__bad_interrupt>:
     1e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ea <__vector_15>:
volatile double freq;
volatile uint8_t clar = 0;
volatile int freq_offset = 0; // offset in MHz for display


ISR(TIMER0_COMP_vect) {
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	2f 93       	push	r18
     1f6:	8f 93       	push	r24
     1f8:	9f 93       	push	r25
  if (step_timer < 500)
     1fa:	80 91 32 02 	lds	r24, 0x0232
     1fe:	90 91 33 02 	lds	r25, 0x0233
     202:	84 3f       	cpi	r24, 0xF4	; 244
     204:	91 40       	sbci	r25, 0x01	; 1
     206:	48 f4       	brcc	.+18     	; 0x21a <__vector_15+0x30>
    step_timer ++;
     208:	80 91 32 02 	lds	r24, 0x0232
     20c:	90 91 33 02 	lds	r25, 0x0233
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	90 93 33 02 	sts	0x0233, r25
     216:	80 93 32 02 	sts	0x0232, r24
}
     21a:	9f 91       	pop	r25
     21c:	8f 91       	pop	r24
     21e:	2f 91       	pop	r18
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <__vector_12>:

ISR(TIMER1_COMPA_vect) {
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	8f 93       	push	r24
  timer_flag = 1;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	80 93 34 02 	sts	0x0234, r24
  
}
     23c:	8f 91       	pop	r24
     23e:	0f 90       	pop	r0
     240:	0f be       	out	0x3f, r0	; 63
     242:	0f 90       	pop	r0
     244:	1f 90       	pop	r1
     246:	18 95       	reti

00000248 <__vector_3>:


ISR(INT2_vect) {  // falling level on INT2
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	11 24       	eor	r1, r1
     252:	8f 93       	push	r24
  if(!(PIND & (1 << ROT2_A))) {
     254:	82 99       	sbic	0x10, 2	; 16
     256:	15 c0       	rjmp	.+42     	; 0x282 <__vector_3+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	86 e0       	ldi	r24, 0x06	; 6
     25a:	8a 95       	dec	r24
     25c:	f1 f7       	brne	.-4      	; 0x25a <__vector_3+0x12>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <__vector_3+0x18>
    _delay_us(20);
    if ((PIND & (1 << ROT2_B))) {
     260:	83 9b       	sbis	0x10, 3	; 16
     262:	0f c0       	rjmp	.+30     	; 0x282 <__vector_3+0x3a>
     264:	86 e0       	ldi	r24, 0x06	; 6
     266:	8a 95       	dec	r24
     268:	f1 f7       	brne	.-4      	; 0x266 <__vector_3+0x1e>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <__vector_3+0x24>
      _delay_us(20);
      if (!(PIND & (1 << ROT2_A)) && (PIND & (1 << ROT2_B))) {
     26c:	82 99       	sbic	0x10, 2	; 16
     26e:	09 c0       	rjmp	.+18     	; 0x282 <__vector_3+0x3a>
     270:	83 9b       	sbis	0x10, 3	; 16
     272:	07 c0       	rjmp	.+14     	; 0x282 <__vector_3+0x3a>
     274:	81 e2       	ldi	r24, 0x21	; 33
     276:	8a 95       	dec	r24
     278:	f1 f7       	brne	.-4      	; 0x276 <__vector_3+0x2e>
     27a:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x01;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	80 93 2c 02 	sts	0x022C, r24
      }
    }
  }
}
     282:	8f 91       	pop	r24
     284:	0f 90       	pop	r0
     286:	0f be       	out	0x3f, r0	; 63
     288:	0f 90       	pop	r0
     28a:	1f 90       	pop	r1
     28c:	18 95       	reti

0000028e <__vector_4>:

ISR(INT3_vect) {  // falling level on INT3
     28e:	1f 92       	push	r1
     290:	0f 92       	push	r0
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	8f 93       	push	r24
  if (!(PIND & (1 << ROT2_B))) {
     29a:	83 99       	sbic	0x10, 3	; 16
     29c:	15 c0       	rjmp	.+42     	; 0x2c8 <__vector_4+0x3a>
     29e:	86 e0       	ldi	r24, 0x06	; 6
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <__vector_4+0x12>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <__vector_4+0x18>
   _delay_us(20);
    if ((PIND & (1 << ROT2_A))) {
     2a6:	82 9b       	sbis	0x10, 2	; 16
     2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <__vector_4+0x3a>
     2aa:	86 e0       	ldi	r24, 0x06	; 6
     2ac:	8a 95       	dec	r24
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <__vector_4+0x1e>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <__vector_4+0x24>
      _delay_us(20);
      if ((PIND & (1 << ROT2_A)) && !(PIND & (1 << ROT2_B))) {
     2b2:	82 9b       	sbis	0x10, 2	; 16
     2b4:	09 c0       	rjmp	.+18     	; 0x2c8 <__vector_4+0x3a>
     2b6:	83 99       	sbic	0x10, 3	; 16
     2b8:	07 c0       	rjmp	.+14     	; 0x2c8 <__vector_4+0x3a>
     2ba:	81 e2       	ldi	r24, 0x21	; 33
     2bc:	8a 95       	dec	r24
     2be:	f1 f7       	brne	.-4      	; 0x2bc <__vector_4+0x2e>
     2c0:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x02;
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	80 93 2c 02 	sts	0x022C, r24
      }
    }
  }
}
     2c8:	8f 91       	pop	r24
     2ca:	0f 90       	pop	r0
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	0f 90       	pop	r0
     2d0:	1f 90       	pop	r1
     2d2:	18 95       	reti

000002d4 <__vector_5>:

ISR(INT4_vect) {  // falling level on INT4
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	8f 93       	push	r24
     2e0:	9f 93       	push	r25
  if(!(PINE & (1 << ROT1_A))) {
     2e2:	0c 99       	sbic	0x01, 4	; 1
     2e4:	19 c0       	rjmp	.+50     	; 0x318 <__vector_5+0x44>
     2e6:	83 ef       	ldi	r24, 0xF3	; 243
     2e8:	91 e0       	ldi	r25, 0x01	; 1
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <__vector_5+0x16>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <__vector_5+0x1c>
     2f0:	00 00       	nop
    _delay_us(2000);
    if ((PINE & (1 << ROT1_B))) {
     2f2:	0d 9b       	sbis	0x01, 5	; 1
     2f4:	11 c0       	rjmp	.+34     	; 0x318 <__vector_5+0x44>
     2f6:	83 ef       	ldi	r24, 0xF3	; 243
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	01 97       	sbiw	r24, 0x01	; 1
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <__vector_5+0x26>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <__vector_5+0x2c>
     300:	00 00       	nop
      _delay_us(2000);
      if (!(PINE & (1 << ROT1_A)) && (PINE & (1 << ROT1_B))) {
     302:	0c 99       	sbic	0x01, 4	; 1
     304:	09 c0       	rjmp	.+18     	; 0x318 <__vector_5+0x44>
     306:	0d 9b       	sbis	0x01, 5	; 1
     308:	07 c0       	rjmp	.+14     	; 0x318 <__vector_5+0x44>
     30a:	91 e2       	ldi	r25, 0x21	; 33
     30c:	9a 95       	dec	r25
     30e:	f1 f7       	brne	.-4      	; 0x30c <__vector_5+0x38>
     310:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x01;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 93 2c 02 	sts	0x022C, r24
      }
    }
  }
}
     318:	9f 91       	pop	r25
     31a:	8f 91       	pop	r24
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <__vector_6>:

ISR(INT5_vect) {  // falling level on INT5
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	8f 93       	push	r24
     332:	9f 93       	push	r25
  if (!(PINE & (1 << ROT1_B))) {
     334:	0d 99       	sbic	0x01, 5	; 1
     336:	19 c0       	rjmp	.+50     	; 0x36a <__vector_6+0x44>
     338:	83 ef       	ldi	r24, 0xF3	; 243
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <__vector_6+0x16>
     340:	00 c0       	rjmp	.+0      	; 0x342 <__vector_6+0x1c>
     342:	00 00       	nop
   _delay_us(2000);
    if ((PINE & (1 << ROT1_A))) {
     344:	0c 9b       	sbis	0x01, 4	; 1
     346:	11 c0       	rjmp	.+34     	; 0x36a <__vector_6+0x44>
     348:	83 ef       	ldi	r24, 0xF3	; 243
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <__vector_6+0x26>
     350:	00 c0       	rjmp	.+0      	; 0x352 <__vector_6+0x2c>
     352:	00 00       	nop
      _delay_us(2000);
      if ((PINE & (1 << ROT1_A)) && !(PINE & (1 << ROT1_B))) {
     354:	0c 9b       	sbis	0x01, 4	; 1
     356:	09 c0       	rjmp	.+18     	; 0x36a <__vector_6+0x44>
     358:	0d 99       	sbic	0x01, 5	; 1
     35a:	07 c0       	rjmp	.+14     	; 0x36a <__vector_6+0x44>
     35c:	91 e2       	ldi	r25, 0x21	; 33
     35e:	9a 95       	dec	r25
     360:	f1 f7       	brne	.-4      	; 0x35e <__vector_6+0x38>
     362:	00 00       	nop
	_delay_us(100);
	rot_flag = 0x02;
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	80 93 2c 02 	sts	0x022C, r24
      }
    }
  }
}
     36a:	9f 91       	pop	r25
     36c:	8f 91       	pop	r24
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <__vector_7>:

ISR(INT6_vect) {  // falling level on INT6
     378:	1f 92       	push	r1
     37a:	0f 92       	push	r0
     37c:	0f b6       	in	r0, 0x3f	; 63
     37e:	0f 92       	push	r0
     380:	11 24       	eor	r1, r1
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
  if(!(PINE & (1 << VOLROT_A))) {
     386:	0e 99       	sbic	0x01, 6	; 1
     388:	19 c0       	rjmp	.+50     	; 0x3bc <__vector_7+0x44>
     38a:	83 ef       	ldi	r24, 0xF3	; 243
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <__vector_7+0x16>
     392:	00 c0       	rjmp	.+0      	; 0x394 <__vector_7+0x1c>
     394:	00 00       	nop
    _delay_us(2000);
    if ((PINE & (1 << VOLROT_B))) {
     396:	0f 9b       	sbis	0x01, 7	; 1
     398:	11 c0       	rjmp	.+34     	; 0x3bc <__vector_7+0x44>
     39a:	83 ef       	ldi	r24, 0xF3	; 243
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	01 97       	sbiw	r24, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <__vector_7+0x26>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <__vector_7+0x2c>
     3a4:	00 00       	nop
      _delay_us(2000);
      if (!(PINE & (1 << VOLROT_A)) && (PINE & (1 << VOLROT_B))) {
     3a6:	0e 99       	sbic	0x01, 6	; 1
     3a8:	09 c0       	rjmp	.+18     	; 0x3bc <__vector_7+0x44>
     3aa:	0f 9b       	sbis	0x01, 7	; 1
     3ac:	07 c0       	rjmp	.+14     	; 0x3bc <__vector_7+0x44>
     3ae:	91 e2       	ldi	r25, 0x21	; 33
     3b0:	9a 95       	dec	r25
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <__vector_7+0x38>
     3b4:	00 00       	nop
	_delay_us(100);
	vol_flag = 0x02;
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	80 93 2d 02 	sts	0x022D, r24
      }
    }
  }
}
     3bc:	9f 91       	pop	r25
     3be:	8f 91       	pop	r24
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <__vector_8>:

ISR(INT7_vect) {  // falling level on INT7
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	8f 93       	push	r24
     3d6:	9f 93       	push	r25
  if (!(PINE & (1 << VOLROT_B))) {
     3d8:	0f 99       	sbic	0x01, 7	; 1
     3da:	19 c0       	rjmp	.+50     	; 0x40e <__vector_8+0x44>
     3dc:	83 ef       	ldi	r24, 0xF3	; 243
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <__vector_8+0x16>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <__vector_8+0x1c>
     3e6:	00 00       	nop
    _delay_us(2000);
    if ((PINE & (1 << VOLROT_A))) {
     3e8:	0e 9b       	sbis	0x01, 6	; 1
     3ea:	11 c0       	rjmp	.+34     	; 0x40e <__vector_8+0x44>
     3ec:	83 ef       	ldi	r24, 0xF3	; 243
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	01 97       	sbiw	r24, 0x01	; 1
     3f2:	f1 f7       	brne	.-4      	; 0x3f0 <__vector_8+0x26>
     3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <__vector_8+0x2c>
     3f6:	00 00       	nop
      _delay_us(2000);
      if ((PINE & (1 << VOLROT_A)) && !(PINE & (1 << VOLROT_B))) {
     3f8:	0e 9b       	sbis	0x01, 6	; 1
     3fa:	09 c0       	rjmp	.+18     	; 0x40e <__vector_8+0x44>
     3fc:	0f 99       	sbic	0x01, 7	; 1
     3fe:	07 c0       	rjmp	.+14     	; 0x40e <__vector_8+0x44>
     400:	91 e2       	ldi	r25, 0x21	; 33
     402:	9a 95       	dec	r25
     404:	f1 f7       	brne	.-4      	; 0x402 <__vector_8+0x38>
     406:	00 00       	nop
	_delay_us(100);
	vol_flag = 0x01;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	80 93 2d 02 	sts	0x022D, r24
      }
    }
  }
}
     40e:	9f 91       	pop	r25
     410:	8f 91       	pop	r24
     412:	0f 90       	pop	r0
     414:	0f be       	out	0x3f, r0	; 63
     416:	0f 90       	pop	r0
     418:	1f 90       	pop	r1
     41a:	18 95       	reti

0000041c <TWIinit>:

void TWIinit(void) {
  TWBR = 0x45;
     41c:	85 e4       	ldi	r24, 0x45	; 69
     41e:	80 93 70 00 	sts	0x0070, r24
  TWCR = (1 << TWEN);
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	80 93 74 00 	sts	0x0074, r24
     428:	08 95       	ret

0000042a <TWIStart>:
}

void TWIStart(void) {
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     42a:	84 ea       	ldi	r24, 0xA4	; 164
     42c:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     430:	80 91 74 00 	lds	r24, 0x0074
     434:	87 ff       	sbrs	r24, 7
     436:	fc cf       	rjmp	.-8      	; 0x430 <TWIStart+0x6>
}
     438:	08 95       	ret

0000043a <TWIStop>:

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     43a:	84 e9       	ldi	r24, 0x94	; 148
     43c:	80 93 74 00 	sts	0x0074, r24
     440:	08 95       	ret

00000442 <TWIWrite>:
}

void TWIWrite(uint8_t u8data) {
  TWDR = u8data;
     442:	80 93 73 00 	sts	0x0073, r24
  TWCR = (1<<TWINT)|(1<<TWEN);
     446:	84 e8       	ldi	r24, 0x84	; 132
     448:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     44c:	80 91 74 00 	lds	r24, 0x0074
     450:	87 ff       	sbrs	r24, 7
     452:	fc cf       	rjmp	.-8      	; 0x44c <TWIWrite+0xa>
}
     454:	08 95       	ret

00000456 <TWIReadACK>:

uint8_t TWIReadACK(void) {
  TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     456:	84 ec       	ldi	r24, 0xC4	; 196
     458:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     45c:	80 91 74 00 	lds	r24, 0x0074
     460:	87 ff       	sbrs	r24, 7
     462:	fc cf       	rjmp	.-8      	; 0x45c <TWIReadACK+0x6>
  return TWDR;
     464:	80 91 73 00 	lds	r24, 0x0073
}
     468:	08 95       	ret

0000046a <TWIReadNACK>:

//read byte with NACK
uint8_t TWIReadNACK(void) {
  TWCR = (1<<TWINT)|(1<<TWEN);
     46a:	84 e8       	ldi	r24, 0x84	; 132
     46c:	80 93 74 00 	sts	0x0074, r24
  while ((TWCR & (1<<TWINT)) == 0);
     470:	80 91 74 00 	lds	r24, 0x0074
     474:	87 ff       	sbrs	r24, 7
     476:	fc cf       	rjmp	.-8      	; 0x470 <TWIReadNACK+0x6>
  return TWDR;
     478:	80 91 73 00 	lds	r24, 0x0073
}
     47c:	08 95       	ret

0000047e <TWIGetStatus>:

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     47e:	80 91 71 00 	lds	r24, 0x0071
  return status;
}
     482:	88 7f       	andi	r24, 0xF8	; 248
     484:	08 95       	ret

00000486 <TWI_write_byte>:

uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	1f 92       	push	r1
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	16 2f       	mov	r17, r22

  TWIStart();
     494:	89 83       	std	Y+1, r24	; 0x01
     496:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     49a:	90 91 71 00 	lds	r25, 0x0071
     49e:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	98 30       	cpi	r25, 0x08	; 8
     4a4:	29 f0       	breq	.+10     	; 0x4b0 <TWI_write_byte+0x2a>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4a6:	84 e9       	ldi	r24, 0x94	; 148
     4a8:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_byte(uint8_t addr, uint8_t data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	1e c0       	rjmp	.+60     	; 0x4ec <TWI_write_byte+0x66>
  }
  TWIWrite(addr << 1);
     4b0:	88 0f       	add	r24, r24
     4b2:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     4b6:	90 91 71 00 	lds	r25, 0x0071
     4ba:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     4bc:	98 31       	cpi	r25, 0x18	; 24
     4be:	29 f0       	breq	.+10     	; 0x4ca <TWI_write_byte+0x44>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4c0:	84 e9       	ldi	r24, 0x94	; 148
     4c2:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	11 c0       	rjmp	.+34     	; 0x4ec <TWI_write_byte+0x66>
  }  
  TWIWrite(data);
     4ca:	81 2f       	mov	r24, r17
     4cc:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     4d0:	80 91 71 00 	lds	r24, 0x0071
     4d4:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;
  }  
  TWIWrite(data);
  if (TWIGetStatus() != 0x28) {
     4d6:	88 32       	cpi	r24, 0x28	; 40
     4d8:	29 f0       	breq	.+10     	; 0x4e4 <TWI_write_byte+0x5e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4da:	84 e9       	ldi	r24, 0x94	; 148
     4dc:	80 93 74 00 	sts	0x0074, r24
    return 0x02;
  }  
  TWIWrite(data);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	04 c0       	rjmp	.+8      	; 0x4ec <TWI_write_byte+0x66>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     4e4:	84 e9       	ldi	r24, 0x94	; 148
     4e6:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIStop();
  return 0x00;
     4ea:	80 e0       	ldi	r24, 0x00	; 0
}
     4ec:	0f 90       	pop	r0
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	08 95       	ret

000004f6 <TWI_read_byte>:

uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	1f 92       	push	r1
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	8b 01       	movw	r16, r22

  TWIStart();
     506:	89 83       	std	Y+1, r24	; 0x01
     508:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     50c:	90 91 71 00 	lds	r25, 0x0071
     510:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	98 30       	cpi	r25, 0x08	; 8
     516:	29 f0       	breq	.+10     	; 0x522 <TWI_read_byte+0x2c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     518:	84 e9       	ldi	r24, 0x94	; 148
     51a:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_read_byte(uint8_t addr, uint8_t* data) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	16 c0       	rjmp	.+44     	; 0x54e <TWI_read_byte+0x58>
  }
  TWIWrite((addr << 1) | 0x01);
     522:	88 0f       	add	r24, r24
     524:	81 60       	ori	r24, 0x01	; 1
     526:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     52a:	80 91 71 00 	lds	r24, 0x0071
     52e:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite((addr << 1) | 0x01);
  if (TWIGetStatus() != 0x40) {
     530:	80 34       	cpi	r24, 0x40	; 64
     532:	29 f0       	breq	.+10     	; 0x53e <TWI_read_byte+0x48>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     534:	84 e9       	ldi	r24, 0x94	; 148
     536:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite((addr << 1) | 0x01);
  if (TWIGetStatus() != 0x40) {
    TWIStop();
    return 0x02;
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	08 c0       	rjmp	.+16     	; 0x54e <TWI_read_byte+0x58>
  }
  *data = TWIReadNACK();
     53e:	0e 94 35 02 	call	0x46a	; 0x46a <TWIReadNACK>
     542:	f8 01       	movw	r30, r16
     544:	80 83       	st	Z, r24
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     546:	84 e9       	ldi	r24, 0x94	; 148
     548:	80 93 74 00 	sts	0x0074, r24
     54c:	80 e0       	ldi	r24, 0x00	; 0
    return 0x02;
  }
  *data = TWIReadNACK();
  TWIStop();
  return 0x00;
}
     54e:	0f 90       	pop	r0
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	08 95       	ret

0000055a <TWI_write_word>:

uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	1f 92       	push	r1
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	16 2f       	mov	r17, r22
     56a:	07 2f       	mov	r16, r23

  TWIStart();
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     572:	90 91 71 00 	lds	r25, 0x0071
     576:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     578:	89 81       	ldd	r24, Y+1	; 0x01
     57a:	98 30       	cpi	r25, 0x08	; 8
     57c:	29 f0       	breq	.+10     	; 0x588 <TWI_write_word+0x2e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     57e:	84 e9       	ldi	r24, 0x94	; 148
     580:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_word(uint8_t addr, uint16_t data_word) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	2b c0       	rjmp	.+86     	; 0x5de <TWI_write_word+0x84>
  }
  TWIWrite(addr << 1);
     588:	88 0f       	add	r24, r24
     58a:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     58e:	90 91 71 00 	lds	r25, 0x0071
     592:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     594:	98 31       	cpi	r25, 0x18	; 24
     596:	29 f0       	breq	.+10     	; 0x5a2 <TWI_write_word+0x48>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     598:	84 e9       	ldi	r24, 0x94	; 148
     59a:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     59e:	82 e0       	ldi	r24, 0x02	; 2
     5a0:	1e c0       	rjmp	.+60     	; 0x5de <TWI_write_word+0x84>
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
     5a2:	80 2f       	mov	r24, r16
     5a4:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     5a8:	90 91 71 00 	lds	r25, 0x0071
     5ac:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
  if (TWIGetStatus() != 0x28) {
     5ae:	98 32       	cpi	r25, 0x28	; 40
     5b0:	29 f0       	breq	.+10     	; 0x5bc <TWI_write_word+0x62>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5b2:	84 e9       	ldi	r24, 0x94	; 148
     5b4:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite((uint8_t)((data_word & 0xFF00) >> 8));
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	11 c0       	rjmp	.+34     	; 0x5de <TWI_write_word+0x84>
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
     5bc:	81 2f       	mov	r24, r17
     5be:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     5c2:	80 91 71 00 	lds	r24, 0x0071
     5c6:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
  if (TWIGetStatus() != 0x28) {
     5c8:	88 32       	cpi	r24, 0x28	; 40
     5ca:	29 f0       	breq	.+10     	; 0x5d6 <TWI_write_word+0x7c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5cc:	84 e9       	ldi	r24, 0x94	; 148
     5ce:	80 93 74 00 	sts	0x0074, r24
    return 0x03;
  }
  TWIWrite((uint8_t)(data_word & 0x00FF));
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     5d2:	84 e0       	ldi	r24, 0x04	; 4
     5d4:	04 c0       	rjmp	.+8      	; 0x5de <TWI_write_word+0x84>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     5d6:	84 e9       	ldi	r24, 0x94	; 148
     5d8:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
}
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	08 95       	ret

000005ea <TWI_write_3bytes>:

uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {
     5ea:	ff 92       	push	r15
     5ec:	0f 93       	push	r16
     5ee:	1f 93       	push	r17
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	1f 92       	push	r1
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	16 2f       	mov	r17, r22
     5fc:	04 2f       	mov	r16, r20
     5fe:	f2 2e       	mov	r15, r18

  TWIStart();
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     606:	90 91 71 00 	lds	r25, 0x0071
     60a:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	98 30       	cpi	r25, 0x08	; 8
     610:	29 f0       	breq	.+10     	; 0x61c <TWI_write_3bytes+0x32>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     612:	84 e9       	ldi	r24, 0x94	; 148
     614:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_3bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	33 c0       	rjmp	.+102    	; 0x682 <TWI_write_3bytes+0x98>
  }
  TWIWrite(addr << 1);
     61c:	88 0f       	add	r24, r24
     61e:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     622:	90 91 71 00 	lds	r25, 0x0071
     626:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     628:	98 31       	cpi	r25, 0x18	; 24
     62a:	29 f0       	breq	.+10     	; 0x636 <TWI_write_3bytes+0x4c>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     62c:	84 e9       	ldi	r24, 0x94	; 148
     62e:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	26 c0       	rjmp	.+76     	; 0x682 <TWI_write_3bytes+0x98>
  }
  TWIWrite(byte1);
     636:	81 2f       	mov	r24, r17
     638:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     63c:	90 91 71 00 	lds	r25, 0x0071
     640:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     642:	98 32       	cpi	r25, 0x28	; 40
     644:	29 f0       	breq	.+10     	; 0x650 <TWI_write_3bytes+0x66>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     646:	84 e9       	ldi	r24, 0x94	; 148
     648:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     64c:	83 e0       	ldi	r24, 0x03	; 3
     64e:	19 c0       	rjmp	.+50     	; 0x682 <TWI_write_3bytes+0x98>
  }
  TWIWrite(byte2);
     650:	80 2f       	mov	r24, r16
     652:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     656:	90 91 71 00 	lds	r25, 0x0071
     65a:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     65c:	98 32       	cpi	r25, 0x28	; 40
     65e:	41 f4       	brne	.+16     	; 0x670 <TWI_write_3bytes+0x86>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     660:	8f 2d       	mov	r24, r15
     662:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     666:	80 91 71 00 	lds	r24, 0x0071
     66a:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     66c:	88 32       	cpi	r24, 0x28	; 40
     66e:	29 f0       	breq	.+10     	; 0x67a <TWI_write_3bytes+0x90>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     670:	84 e9       	ldi	r24, 0x94	; 148
     672:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     676:	84 e0       	ldi	r24, 0x04	; 4
     678:	04 c0       	rjmp	.+8      	; 0x682 <TWI_write_3bytes+0x98>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     67a:	84 e9       	ldi	r24, 0x94	; 148
     67c:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     680:	80 e0       	ldi	r24, 0x00	; 0
}
     682:	0f 90       	pop	r0
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	08 95       	ret

00000690 <TWI_write_4bytes>:

uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	1f 92       	push	r1
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	16 2f       	mov	r17, r22
     6a4:	f4 2e       	mov	r15, r20
     6a6:	e2 2e       	mov	r14, r18

  TWIStart();
     6a8:	89 83       	std	Y+1, r24	; 0x01
     6aa:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6ae:	90 91 71 00 	lds	r25, 0x0071
     6b2:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	98 30       	cpi	r25, 0x08	; 8
     6b8:	29 f0       	breq	.+10     	; 0x6c4 <TWI_write_4bytes+0x34>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6ba:	84 e9       	ldi	r24, 0x94	; 148
     6bc:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_4bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	3b c0       	rjmp	.+118    	; 0x73a <TWI_write_4bytes+0xaa>
  }
  TWIWrite(addr << 1);
     6c4:	88 0f       	add	r24, r24
     6c6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6ca:	90 91 71 00 	lds	r25, 0x0071
     6ce:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     6d0:	98 31       	cpi	r25, 0x18	; 24
     6d2:	29 f0       	breq	.+10     	; 0x6de <TWI_write_4bytes+0x4e>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6d4:	84 e9       	ldi	r24, 0x94	; 148
     6d6:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	2e c0       	rjmp	.+92     	; 0x73a <TWI_write_4bytes+0xaa>
  }
  TWIWrite(byte1);
     6de:	81 2f       	mov	r24, r17
     6e0:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6e4:	90 91 71 00 	lds	r25, 0x0071
     6e8:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     6ea:	98 32       	cpi	r25, 0x28	; 40
     6ec:	29 f0       	breq	.+10     	; 0x6f8 <TWI_write_4bytes+0x68>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6ee:	84 e9       	ldi	r24, 0x94	; 148
     6f0:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     6f4:	83 e0       	ldi	r24, 0x03	; 3
     6f6:	21 c0       	rjmp	.+66     	; 0x73a <TWI_write_4bytes+0xaa>
  }
  TWIWrite(byte2);
     6f8:	8f 2d       	mov	r24, r15
     6fa:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     6fe:	90 91 71 00 	lds	r25, 0x0071
     702:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     704:	98 32       	cpi	r25, 0x28	; 40
     706:	81 f4       	brne	.+32     	; 0x728 <TWI_write_4bytes+0x98>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     708:	8e 2d       	mov	r24, r14
     70a:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     70e:	90 91 71 00 	lds	r25, 0x0071
     712:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     714:	98 32       	cpi	r25, 0x28	; 40
     716:	41 f4       	brne	.+16     	; 0x728 <TWI_write_4bytes+0x98>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
     718:	80 2f       	mov	r24, r16
     71a:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     71e:	80 91 71 00 	lds	r24, 0x0071
     722:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
     724:	88 32       	cpi	r24, 0x28	; 40
     726:	29 f0       	breq	.+10     	; 0x732 <TWI_write_4bytes+0xa2>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     728:	84 e9       	ldi	r24, 0x94	; 148
     72a:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	04 c0       	rjmp	.+8      	; 0x73a <TWI_write_4bytes+0xaa>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     732:	84 e9       	ldi	r24, 0x94	; 148
     734:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     738:	80 e0       	ldi	r24, 0x00	; 0
}
     73a:	0f 90       	pop	r0
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	08 95       	ret

0000074a <TWI_write_5bytes>:

uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	16 2f       	mov	r17, r22
     760:	f4 2e       	mov	r15, r20
     762:	d2 2e       	mov	r13, r18

  TWIStart();
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	0e 94 15 02 	call	0x42a	; 0x42a <TWIStart>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     76a:	90 91 71 00 	lds	r25, 0x0071
     76e:	98 7f       	andi	r25, 0xF8	; 248
}

uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	98 30       	cpi	r25, 0x08	; 8
     774:	29 f0       	breq	.+10     	; 0x780 <TWI_write_5bytes+0x36>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     776:	84 e9       	ldi	r24, 0x94	; 148
     778:	80 93 74 00 	sts	0x0074, r24
uint8_t TWI_write_5bytes(uint8_t addr, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4, uint8_t byte5) {

  TWIStart();
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	43 c0       	rjmp	.+134    	; 0x806 <TWI_write_5bytes+0xbc>
  }
  TWIWrite(addr << 1);
     780:	88 0f       	add	r24, r24
     782:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     786:	90 91 71 00 	lds	r25, 0x0071
     78a:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x08) {
    TWIStop();
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
     78c:	98 31       	cpi	r25, 0x18	; 24
     78e:	29 f0       	breq	.+10     	; 0x79a <TWI_write_5bytes+0x50>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     790:	84 e9       	ldi	r24, 0x94	; 148
     792:	80 93 74 00 	sts	0x0074, r24
    return 0x01;
  }
  TWIWrite(addr << 1);
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	36 c0       	rjmp	.+108    	; 0x806 <TWI_write_5bytes+0xbc>
  }
  TWIWrite(byte1);
     79a:	81 2f       	mov	r24, r17
     79c:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7a0:	90 91 71 00 	lds	r25, 0x0071
     7a4:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x18) {
    TWIStop();
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
     7a6:	98 32       	cpi	r25, 0x28	; 40
     7a8:	29 f0       	breq	.+10     	; 0x7b4 <TWI_write_5bytes+0x6a>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     7aa:	84 e9       	ldi	r24, 0x94	; 148
     7ac:	80 93 74 00 	sts	0x0074, r24
    return 0x02;  
  }
  TWIWrite(byte1);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	29 c0       	rjmp	.+82     	; 0x806 <TWI_write_5bytes+0xbc>
  }
  TWIWrite(byte2);
     7b4:	8f 2d       	mov	r24, r15
     7b6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7ba:	90 91 71 00 	lds	r25, 0x0071
     7be:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x03;
  }
  TWIWrite(byte2);
  if (TWIGetStatus() != 0x28) {
     7c0:	98 32       	cpi	r25, 0x28	; 40
     7c2:	c1 f4       	brne	.+48     	; 0x7f4 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
     7c4:	8d 2d       	mov	r24, r13
     7c6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7ca:	90 91 71 00 	lds	r25, 0x0071
     7ce:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte3);
  if (TWIGetStatus() != 0x28) {
     7d0:	98 32       	cpi	r25, 0x28	; 40
     7d2:	81 f4       	brne	.+32     	; 0x7f4 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
     7d4:	80 2f       	mov	r24, r16
     7d6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7da:	90 91 71 00 	lds	r25, 0x0071
     7de:	98 7f       	andi	r25, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte4);
  if (TWIGetStatus() != 0x28) {
     7e0:	98 32       	cpi	r25, 0x28	; 40
     7e2:	41 f4       	brne	.+16     	; 0x7f4 <TWI_write_5bytes+0xaa>
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte5);
     7e4:	8e 2d       	mov	r24, r14
     7e6:	0e 94 21 02 	call	0x442	; 0x442 <TWIWrite>
}

uint8_t TWIGetStatus(void) {
  uint8_t status;
  //mask status
  status = TWSR & 0xF8;
     7ea:	80 91 71 00 	lds	r24, 0x0071
     7ee:	88 7f       	andi	r24, 0xF8	; 248
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIWrite(byte5);
  if (TWIGetStatus() != 0x28) {
     7f0:	88 32       	cpi	r24, 0x28	; 40
     7f2:	29 f0       	breq	.+10     	; 0x7fe <TWI_write_5bytes+0xb4>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     7f4:	84 e9       	ldi	r24, 0x94	; 148
     7f6:	80 93 74 00 	sts	0x0074, r24
    return 0x04;
  }
  TWIWrite(byte5);
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
     7fa:	84 e0       	ldi	r24, 0x04	; 4
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <TWI_write_5bytes+0xbc>
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while ((TWCR & (1<<TWINT)) == 0);
}

void TWIStop(void) {
  TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     7fe:	84 e9       	ldi	r24, 0x94	; 148
     800:	80 93 74 00 	sts	0x0074, r24
  if (TWIGetStatus() != 0x28) {
    TWIStop();
    return 0x04;
  }
  TWIStop();
  return 0x00;
     804:	80 e0       	ldi	r24, 0x00	; 0
}
     806:	0f 90       	pop	r0
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	ff 90       	pop	r15
     812:	ef 90       	pop	r14
     814:	df 90       	pop	r13
     816:	08 95       	ret

00000818 <lcd_freq>:

void lcd_freq() {
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	cf 92       	push	r12
     822:	df 92       	push	r13
     824:	ef 92       	push	r14
     826:	ff 92       	push	r15
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	ec 97       	sbiw	r28, 0x3c	; 60
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
  char buffer[60];

  if (mode == AM || mode == AMN || mode == FM) {
     840:	80 91 2e 02 	lds	r24, 0x022E
     844:	88 30       	cpi	r24, 0x08	; 8
     846:	41 f0       	breq	.+16     	; 0x858 <lcd_freq+0x40>
     848:	80 91 2e 02 	lds	r24, 0x022E
     84c:	89 30       	cpi	r24, 0x09	; 9
     84e:	21 f0       	breq	.+8      	; 0x858 <lcd_freq+0x40>
     850:	80 91 2e 02 	lds	r24, 0x022E
     854:	8a 30       	cpi	r24, 0x0A	; 10
     856:	91 f4       	brne	.+36     	; 0x87c <lcd_freq+0x64>
    freq = round(freq);
     858:	60 91 28 02 	lds	r22, 0x0228
     85c:	70 91 29 02 	lds	r23, 0x0229
     860:	80 91 2a 02 	lds	r24, 0x022A
     864:	90 91 2b 02 	lds	r25, 0x022B
     868:	0e 94 34 14 	call	0x2868	; 0x2868 <round>
     86c:	60 93 28 02 	sts	0x0228, r22
     870:	70 93 29 02 	sts	0x0229, r23
     874:	80 93 2a 02 	sts	0x022A, r24
     878:	90 93 2b 02 	sts	0x022B, r25
  }
  lcd_goto(0x04);
     87c:	84 e0       	ldi	r24, 0x04	; 4
     87e:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
  sprintf(buffer,"%d,%06.2f     ",(int)floor(freq/1000+freq_offset),fmod(freq,1000));
     882:	60 91 28 02 	lds	r22, 0x0228
     886:	70 91 29 02 	lds	r23, 0x0229
     88a:	80 91 2a 02 	lds	r24, 0x022A
     88e:	90 91 2b 02 	lds	r25, 0x022B
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	4a e7       	ldi	r20, 0x7A	; 122
     898:	54 e4       	ldi	r21, 0x44	; 68
     89a:	0e 94 c8 12 	call	0x2590	; 0x2590 <fmod>
     89e:	f6 2e       	mov	r15, r22
     8a0:	e7 2e       	mov	r14, r23
     8a2:	d8 2e       	mov	r13, r24
     8a4:	c9 2e       	mov	r12, r25
     8a6:	60 91 28 02 	lds	r22, 0x0228
     8aa:	70 91 29 02 	lds	r23, 0x0229
     8ae:	80 91 2a 02 	lds	r24, 0x022A
     8b2:	90 91 2b 02 	lds	r25, 0x022B
     8b6:	00 91 0c 02 	lds	r16, 0x020C
     8ba:	10 91 0d 02 	lds	r17, 0x020D
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	4a e7       	ldi	r20, 0x7A	; 122
     8c4:	54 e4       	ldi	r21, 0x44	; 68
     8c6:	0e 94 c1 11 	call	0x2382	; 0x2382 <__divsf3>
     8ca:	4b 01       	movw	r8, r22
     8cc:	5c 01       	movw	r10, r24
     8ce:	b8 01       	movw	r22, r16
     8d0:	11 0f       	add	r17, r17
     8d2:	88 0b       	sbc	r24, r24
     8d4:	99 0b       	sbc	r25, r25
     8d6:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__floatsisf>
     8da:	9b 01       	movw	r18, r22
     8dc:	ac 01       	movw	r20, r24
     8de:	c5 01       	movw	r24, r10
     8e0:	b4 01       	movw	r22, r8
     8e2:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__addsf3>
     8e6:	0e 94 a6 12 	call	0x254c	; 0x254c <floor>
     8ea:	cf 92       	push	r12
     8ec:	df 92       	push	r13
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0e 94 33 12 	call	0x2466	; 0x2466 <__fixsfsi>
     8f6:	7f 93       	push	r23
     8f8:	6f 93       	push	r22
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	9f 93       	push	r25
     900:	8f 93       	push	r24
     902:	8e 01       	movw	r16, r28
     904:	0f 5f       	subi	r16, 0xFF	; 255
     906:	1f 4f       	sbci	r17, 0xFF	; 255
     908:	1f 93       	push	r17
     90a:	0f 93       	push	r16
     90c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <sprintf>
  lcd_puts(buffer);
     910:	c8 01       	movw	r24, r16
     912:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
  lcd_goto(0x0f);
     916:	8f e0       	ldi	r24, 0x0F	; 15
     918:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
  if (clar > 10)
     91c:	80 91 0e 02 	lds	r24, 0x020E
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
     92a:	8b 30       	cpi	r24, 0x0B	; 11
     92c:	18 f0       	brcs	.+6      	; 0x934 <lcd_freq+0x11c>
    sprintf(buffer,"+");
     92e:	61 e1       	ldi	r22, 0x11	; 17
     930:	71 e0       	ldi	r23, 0x01	; 1
     932:	04 c0       	rjmp	.+8      	; 0x93c <lcd_freq+0x124>
  else if (clar < -10)
     934:	80 91 0e 02 	lds	r24, 0x020E
    sprintf(buffer,"-");
  else
    sprintf(buffer," ");
     938:	6a e3       	ldi	r22, 0x3A	; 58
     93a:	71 e0       	ldi	r23, 0x01	; 1
     93c:	c8 01       	movw	r24, r16
     93e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcpy>
  lcd_puts(buffer);
     942:	c8 01       	movw	r24, r16
     944:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
}
     948:	ec 96       	adiw	r28, 0x3c	; 60
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	df 90       	pop	r13
     962:	cf 90       	pop	r12
     964:	bf 90       	pop	r11
     966:	af 90       	pop	r10
     968:	9f 90       	pop	r9
     96a:	8f 90       	pop	r8
     96c:	08 95       	ret

0000096e <updateVolumeSquelch>:

uint8_t updateVolumeSquelch(uint8_t vol, uint8_t sq) {
     96e:	ef 92       	push	r14
     970:	0f 93       	push	r16
  
  uint8_t addr, err;

  addr = 0x80; // Address for audio conf

  err = TWI_write_5bytes(fpga_addr, addr, 0x00, 0x00, sq, vol);
     972:	e8 2e       	mov	r14, r24
     974:	06 2f       	mov	r16, r22
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	60 e8       	ldi	r22, 0x80	; 128
     97c:	83 e2       	ldi	r24, 0x23	; 35
     97e:	0e 94 a5 03 	call	0x74a	; 0x74a <TWI_write_5bytes>
  if(err)
    return err;
  return 0x00;
}
     982:	0f 91       	pop	r16
     984:	ef 90       	pop	r14
     986:	08 95       	ret

00000988 <readClar>:

uint16_t readClar(void) {
  return (ADC);
     988:	84 b1       	in	r24, 0x04	; 4
     98a:	95 b1       	in	r25, 0x05	; 5
}
     98c:	08 95       	ret

0000098e <updateRFFE>:

uint8_t updateRFFE(void) {
  uint8_t err;
  uint16_t rxatt;

  if (rx_att)
     98e:	40 91 26 02 	lds	r20, 0x0226
    rxatt = 0x0001;
  else
    rxatt = 0x0000;

  err = TWI_write_word(pll_addr,(pll_n & 0x0fff) | (tx << 15) | (bandf << 14) | (rxatt << 13));
     992:	80 91 0f 02 	lds	r24, 0x020F
     996:	90 91 10 02 	lds	r25, 0x0210
     99a:	60 91 2f 02 	lds	r22, 0x022F
     99e:	70 91 30 02 	lds	r23, 0x0230
     9a2:	20 91 23 02 	lds	r18, 0x0223
     9a6:	30 91 24 02 	lds	r19, 0x0224
     9aa:	77 27       	eor	r23, r23
     9ac:	66 95       	lsr	r22
     9ae:	77 95       	ror	r23
     9b0:	66 27       	eor	r22, r22
     9b2:	9f 70       	andi	r25, 0x0F	; 15
     9b4:	68 2b       	or	r22, r24
     9b6:	79 2b       	or	r23, r25
     9b8:	30 e4       	ldi	r19, 0x40	; 64
     9ba:	23 9f       	mul	r18, r19
     9bc:	30 2d       	mov	r19, r0
     9be:	22 27       	eor	r18, r18
     9c0:	11 24       	eor	r1, r1
     9c2:	62 2b       	or	r22, r18
     9c4:	73 2b       	or	r23, r19

uint8_t updateRFFE(void) {
  uint8_t err;
  uint16_t rxatt;

  if (rx_att)
     9c6:	21 e0       	ldi	r18, 0x01	; 1
     9c8:	41 11       	cpse	r20, r1
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <updateRFFE+0x40>
     9cc:	20 e0       	ldi	r18, 0x00	; 0
    rxatt = 0x0001;
  else
    rxatt = 0x0000;

  err = TWI_write_word(pll_addr,(pll_n & 0x0fff) | (tx << 15) | (bandf << 14) | (rxatt << 13));
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	92 2f       	mov	r25, r18
     9d4:	92 95       	swap	r25
     9d6:	99 0f       	add	r25, r25
     9d8:	90 7e       	andi	r25, 0xE0	; 224
     9da:	68 2b       	or	r22, r24
     9dc:	79 2b       	or	r23, r25
     9de:	82 e2       	ldi	r24, 0x22	; 34
     9e0:	0e 94 ad 02 	call	0x55a	; 0x55a <TWI_write_word>
  if (err)
     9e4:	88 23       	and	r24, r24
     9e6:	11 f0       	breq	.+4      	; 0x9ec <updateRFFE+0x5e>
    return err+5;
     9e8:	8b 5f       	subi	r24, 0xFB	; 251
     9ea:	08 95       	ret
  return 0x00;
     9ec:	80 e0       	ldi	r24, 0x00	; 0
} 
     9ee:	08 95       	ret

000009f0 <updateFreq>:
  
uint8_t updateFreq(uint8_t all_update) {
     9f0:	8f 92       	push	r8
     9f2:	9f 92       	push	r9
     9f4:	af 92       	push	r10
     9f6:	bf 92       	push	r11
     9f8:	cf 92       	push	r12
     9fa:	df 92       	push	r13
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	1f 92       	push	r1
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
  //   char buffer[60];
  uint8_t byte1, byte2, byte3, byte4, byte5, err;
  uint16_t pll_n_ = pll_n;
     a0e:	20 91 0f 02 	lds	r18, 0x020F
     a12:	30 91 10 02 	lds	r19, 0x0210
    else
      freq_lo = (double)((freq_MHz - 1152)*1000 + 21400 + freq_kHz);
    bandf = 1;
    }*/

  if (all_update) {
     a16:	88 23       	and	r24, r24
     a18:	09 f4       	brne	.+2      	; 0xa1c <updateFreq+0x2c>
     a1a:	98 c0       	rjmp	.+304    	; 0xb4c <updateFreq+0x15c>
#endif
#ifdef LO_IF_PLUS_FREQ
    freq_lo = if_freq + freq;
#endif
#ifdef LO_IF_MINUS_FREQ
    freq_lo = if_freq - freq;
     a1c:	20 91 28 02 	lds	r18, 0x0228
     a20:	30 91 29 02 	lds	r19, 0x0229
     a24:	40 91 2a 02 	lds	r20, 0x022A
     a28:	50 91 2b 02 	lds	r21, 0x022B
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	78 ec       	ldi	r23, 0xC8	; 200
     a30:	8f e2       	ldi	r24, 0x2F	; 47
     a32:	97 e4       	ldi	r25, 0x47	; 71
     a34:	0e 94 4f 11 	call	0x229e	; 0x229e <__subsf3>
#endif

    bandf = 1;
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	30 93 24 02 	sts	0x0224, r19
     a40:	20 93 23 02 	sts	0x0223, r18

    if (mode == USB) {
     a44:	20 91 2e 02 	lds	r18, 0x022E
     a48:	23 30       	cpi	r18, 0x03	; 3
     a4a:	39 f4       	brne	.+14     	; 0xa5a <updateFreq+0x6a>
      freq_lo -= (double)1.8;
     a4c:	26 e6       	ldi	r18, 0x66	; 102
     a4e:	36 e6       	ldi	r19, 0x66	; 102
     a50:	46 ee       	ldi	r20, 0xE6	; 230
     a52:	5f e3       	ldi	r21, 0x3F	; 63
     a54:	0e 94 4f 11 	call	0x229e	; 0x229e <__subsf3>
     a58:	17 c0       	rjmp	.+46     	; 0xa88 <updateFreq+0x98>
    }
    else if (mode == CW) {
     a5a:	20 91 2e 02 	lds	r18, 0x022E
     a5e:	25 30       	cpi	r18, 0x05	; 5
     a60:	29 f4       	brne	.+10     	; 0xa6c <updateFreq+0x7c>
#if defined(LO_FREQ_PLUS_IF)||defined(LO_IF_PLUS_FREQ)
      freq_lo -= (double)0.9;  // CW = USB
#else
      freq_lo += (double)0.9;  // CW = LSB
     a62:	26 e6       	ldi	r18, 0x66	; 102
     a64:	36 e6       	ldi	r19, 0x66	; 102
     a66:	46 e6       	ldi	r20, 0x66	; 102
     a68:	5f e3       	ldi	r21, 0x3F	; 63
     a6a:	0c c0       	rjmp	.+24     	; 0xa84 <updateFreq+0x94>
#endif

    }
    else if (mode == CWN) {
     a6c:	20 91 2e 02 	lds	r18, 0x022E
     a70:	26 30       	cpi	r18, 0x06	; 6
     a72:	51 f0       	breq	.+20     	; 0xa88 <updateFreq+0x98>
      //freq_lo += (double)0.9;
    }
    else if (mode == LSB ) {
     a74:	20 91 2e 02 	lds	r18, 0x022E
     a78:	21 30       	cpi	r18, 0x01	; 1
     a7a:	31 f4       	brne	.+12     	; 0xa88 <updateFreq+0x98>
      freq_lo += (double)1.8;
     a7c:	26 e6       	ldi	r18, 0x66	; 102
     a7e:	36 e6       	ldi	r19, 0x66	; 102
     a80:	46 ee       	ldi	r20, 0xE6	; 230
     a82:	5f e3       	ldi	r21, 0x3F	; 63
     a84:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__addsf3>
    ftw_topbot = floor((ftw-ftw_toptop*(double)16777216)/(double)65536);
    ftw_bottop = floor((ftw-ftw_toptop*(double)16777216-ftw_topbot*(double)65536)/(double)256);
    ftw_botbot = fmod(ftw,256);
#endif
#ifdef DIRECT_FREQ
    ftw = freq_lo*(double)279.62026666667; // 20MHz,25bit: 279.620266667 19.2MHz,22bit: 36.4088889
     a88:	25 e6       	ldi	r18, 0x65	; 101
     a8a:	3f ec       	ldi	r19, 0xCF	; 207
     a8c:	4b e8       	ldi	r20, 0x8B	; 139
     a8e:	53 e4       	ldi	r21, 0x43	; 67
     a90:	0e 94 c7 13 	call	0x278e	; 0x278e <__mulsf3>
     a94:	6b 01       	movw	r12, r22
     a96:	7c 01       	movw	r14, r24
    ftw_toptop = floor(ftw/(double)16777216);
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e8       	ldi	r20, 0x80	; 128
     a9e:	53 e3       	ldi	r21, 0x33	; 51
     aa0:	0e 94 c7 13 	call	0x278e	; 0x278e <__mulsf3>
     aa4:	0e 94 a6 12 	call	0x254c	; 0x254c <floor>
     aa8:	60 93 1d 02 	sts	0x021D, r22
     aac:	70 93 1e 02 	sts	0x021E, r23
     ab0:	80 93 1f 02 	sts	0x021F, r24
     ab4:	90 93 20 02 	sts	0x0220, r25
    ftw_topbot = floor((ftw-ftw_toptop*(double)16777216)/(double)65536);
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e8       	ldi	r20, 0x80	; 128
     abe:	5b e4       	ldi	r21, 0x4B	; 75
     ac0:	0e 94 c7 13 	call	0x278e	; 0x278e <__mulsf3>
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	c7 01       	movw	r24, r14
     aca:	b6 01       	movw	r22, r12
     acc:	0e 94 4f 11 	call	0x229e	; 0x229e <__subsf3>
     ad0:	4b 01       	movw	r8, r22
     ad2:	5c 01       	movw	r10, r24
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	40 e8       	ldi	r20, 0x80	; 128
     ada:	57 e3       	ldi	r21, 0x37	; 55
     adc:	0e 94 c7 13 	call	0x278e	; 0x278e <__mulsf3>
     ae0:	0e 94 a6 12 	call	0x254c	; 0x254c <floor>
     ae4:	60 93 19 02 	sts	0x0219, r22
     ae8:	70 93 1a 02 	sts	0x021A, r23
     aec:	80 93 1b 02 	sts	0x021B, r24
     af0:	90 93 1c 02 	sts	0x021C, r25
    ftw_bottop = floor((ftw-ftw_toptop*(double)16777216-ftw_topbot*(double)65536)/(double)256);
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e8       	ldi	r20, 0x80	; 128
     afa:	57 e4       	ldi	r21, 0x47	; 71
     afc:	0e 94 c7 13 	call	0x278e	; 0x278e <__mulsf3>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	c5 01       	movw	r24, r10
     b06:	b4 01       	movw	r22, r8
     b08:	0e 94 4f 11 	call	0x229e	; 0x229e <__subsf3>
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	40 e8       	ldi	r20, 0x80	; 128
     b12:	5b e3       	ldi	r21, 0x3B	; 59
     b14:	0e 94 c7 13 	call	0x278e	; 0x278e <__mulsf3>
     b18:	0e 94 a6 12 	call	0x254c	; 0x254c <floor>
     b1c:	60 93 15 02 	sts	0x0215, r22
     b20:	70 93 16 02 	sts	0x0216, r23
     b24:	80 93 17 02 	sts	0x0217, r24
     b28:	90 93 18 02 	sts	0x0218, r25
    ftw_botbot = fmod(ftw,256);
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e8       	ldi	r20, 0x80	; 128
     b32:	53 e4       	ldi	r21, 0x43	; 67
     b34:	c7 01       	movw	r24, r14
     b36:	b6 01       	movw	r22, r12
     b38:	0e 94 c8 12 	call	0x2590	; 0x2590 <fmod>
     b3c:	60 93 11 02 	sts	0x0211, r22
     b40:	70 93 12 02 	sts	0x0212, r23
     b44:	80 93 13 02 	sts	0x0213, r24
     b48:	90 93 14 02 	sts	0x0214, r25

#if defined(LO_FREQ_PLUS_IF) || defined(LO_IF_PLUS_FREQ)
  clar = -(clar+1);  // For arch with LO above RF freq
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
     b4c:	10 91 0e 02 	lds	r17, 0x020E
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
  byte5 = (uint8_t)ftw_botbot;
     b50:	60 91 11 02 	lds	r22, 0x0211
     b54:	70 91 12 02 	lds	r23, 0x0212
     b58:	80 91 13 02 	lds	r24, 0x0213
     b5c:	90 91 14 02 	lds	r25, 0x0214
     b60:	0e 94 3a 12 	call	0x2474	; 0x2474 <__fixunssfsi>
     b64:	e6 2e       	mov	r14, r22
  clar = -(clar+1);  // For arch with LO above RF freq
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
     b66:	60 91 15 02 	lds	r22, 0x0215
     b6a:	70 91 16 02 	lds	r23, 0x0216
     b6e:	80 91 17 02 	lds	r24, 0x0217
     b72:	90 91 18 02 	lds	r25, 0x0218
     b76:	0e 94 3a 12 	call	0x2474	; 0x2474 <__fixunssfsi>
     b7a:	06 2f       	mov	r16, r22
#if defined(LO_FREQ_PLUS_IF) || defined(LO_IF_PLUS_FREQ)
  clar = -(clar+1);  // For arch with LO above RF freq
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
  byte3 = (uint8_t)ftw_topbot;
     b7c:	60 91 19 02 	lds	r22, 0x0219
     b80:	70 91 1a 02 	lds	r23, 0x021A
     b84:	80 91 1b 02 	lds	r24, 0x021B
     b88:	90 91 1c 02 	lds	r25, 0x021C
     b8c:	0e 94 3a 12 	call	0x2474	; 0x2474 <__fixunssfsi>
     b90:	26 2f       	mov	r18, r22

#if defined(LO_FREQ_PLUS_IF) || defined(LO_IF_PLUS_FREQ)
  clar = -(clar+1);  // For arch with LO above RF freq
#endif
  byte1 = 0xc0;
  byte2 = (uint8_t)(ftw_toptop) | (clar & 0xfe);
     b92:	1e 7f       	andi	r17, 0xFE	; 254
     b94:	60 91 1d 02 	lds	r22, 0x021D
     b98:	70 91 1e 02 	lds	r23, 0x021E
     b9c:	80 91 1f 02 	lds	r24, 0x021F
     ba0:	90 91 20 02 	lds	r25, 0x0220
     ba4:	29 83       	std	Y+1, r18	; 0x01
     ba6:	0e 94 3a 12 	call	0x2474	; 0x2474 <__fixunssfsi>
     baa:	41 2f       	mov	r20, r17
     bac:	46 2b       	or	r20, r22
  byte3 = (uint8_t)ftw_topbot;
  byte4 = (uint8_t)ftw_bottop;
  byte5 = (uint8_t)ftw_botbot;

  err = TWI_write_5bytes(fpga_addr, byte1, byte2, byte3, byte4, byte5);
     bae:	29 81       	ldd	r18, Y+1	; 0x01
     bb0:	60 ec       	ldi	r22, 0xC0	; 192
     bb2:	83 e2       	ldi	r24, 0x23	; 35
     bb4:	0e 94 a5 03 	call	0x74a	; 0x74a <TWI_write_5bytes>
    if (err)
      return err+5;
  }
#endif
  return 0x00;
}
     bb8:	0f 90       	pop	r0
     bba:	df 91       	pop	r29
     bbc:	cf 91       	pop	r28
     bbe:	1f 91       	pop	r17
     bc0:	0f 91       	pop	r16
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	df 90       	pop	r13
     bc8:	cf 90       	pop	r12
     bca:	bf 90       	pop	r11
     bcc:	af 90       	pop	r10
     bce:	9f 90       	pop	r9
     bd0:	8f 90       	pop	r8
     bd2:	08 95       	ret

00000bd4 <updateSettings>:

uint8_t updateSettings (void) {
     bd4:	ef 92       	push	r14
     bd6:	0f 93       	push	r16

  uint8_t err;
  uint8_t byte0, byte1, byte2, byte3, byte4;

  switch (mode) {  
     bd8:	90 91 2e 02 	lds	r25, 0x022E
     bdc:	95 30       	cpi	r25, 0x05	; 5
     bde:	51 f1       	breq	.+84     	; 0xc34 <updateSettings+0x60>
     be0:	a0 f4       	brcc	.+40     	; 0xc0a <updateSettings+0x36>
     be2:	91 30       	cpi	r25, 0x01	; 1
     be4:	39 f1       	breq	.+78     	; 0xc34 <updateSettings+0x60>
     be6:	93 30       	cpi	r25, 0x03	; 3
     be8:	09 f0       	breq	.+2      	; 0xbec <updateSettings+0x18>
     bea:	50 c0       	rjmp	.+160    	; 0xc8c <updateSettings+0xb8>
#endif
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     bec:	90 91 31 02 	lds	r25, 0x0231
     bf0:	80 91 26 02 	lds	r24, 0x0226
     bf4:	28 e0       	ldi	r18, 0x08	; 8
     bf6:	82 9f       	mul	r24, r18
     bf8:	a0 01       	movw	r20, r0
     bfa:	11 24       	eor	r1, r1
     bfc:	20 e4       	ldi	r18, 0x40	; 64
     bfe:	92 9f       	mul	r25, r18
     c00:	c0 01       	movw	r24, r0
     c02:	11 24       	eor	r1, r1
     c04:	48 2b       	or	r20, r24

  case USB:
#if defined(LO_FREQ_PLUS_IF)||defined(LO_IF_PLUS_FREQ)
    byte0 = 0b01110000; // Set LSB
#else
    byte0 = 0b01111000; // Set USB
     c06:	68 e7       	ldi	r22, 0x78	; 120
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     c08:	41 c0       	rjmp	.+130    	; 0xc8c <updateSettings+0xb8>
uint8_t updateSettings (void) {

  uint8_t err;
  uint8_t byte0, byte1, byte2, byte3, byte4;

  switch (mode) {  
     c0a:	98 30       	cpi	r25, 0x08	; 8
     c0c:	11 f1       	breq	.+68     	; 0xc52 <updateSettings+0x7e>
     c0e:	9a 30       	cpi	r25, 0x0A	; 10
     c10:	79 f1       	breq	.+94     	; 0xc70 <updateSettings+0x9c>
     c12:	96 30       	cpi	r25, 0x06	; 6
     c14:	d9 f5       	brne	.+118    	; 0xc8c <updateSettings+0xb8>
#endif
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     c16:	90 91 31 02 	lds	r25, 0x0231
     c1a:	80 91 26 02 	lds	r24, 0x0226
     c1e:	28 e0       	ldi	r18, 0x08	; 8
     c20:	82 9f       	mul	r24, r18
     c22:	a0 01       	movw	r20, r0
     c24:	11 24       	eor	r1, r1
     c26:	20 e4       	ldi	r18, 0x40	; 64
     c28:	92 9f       	mul	r25, r18
     c2a:	c0 01       	movw	r24, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	48 2b       	or	r20, r24

  case CWN:
#if defined(LO_FREQ_PLUS_IF)||defined(LO_IF_PLUS_FREQ)
    byte0 = 0b01101000; // Set narrow USB
#else
    byte0 = 0b01100000; // Set narrow LSB
     c30:	60 e6       	ldi	r22, 0x60	; 96
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     c32:	2c c0       	rjmp	.+88     	; 0xc8c <updateSettings+0xb8>
#endif
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     c34:	90 91 31 02 	lds	r25, 0x0231
     c38:	80 91 26 02 	lds	r24, 0x0226
     c3c:	28 e0       	ldi	r18, 0x08	; 8
     c3e:	82 9f       	mul	r24, r18
     c40:	a0 01       	movw	r20, r0
     c42:	11 24       	eor	r1, r1
     c44:	20 e4       	ldi	r18, 0x40	; 64
     c46:	92 9f       	mul	r25, r18
     c48:	c0 01       	movw	r24, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	48 2b       	or	r20, r24

  case CW:
#if defined(LO_FREQ_PLUS_IF)||defined(LO_IF_PLUS_FREQ)
    byte0 = 0b01111000; // Set USB
#else
    byte0 = 0b01110000; // Set LSB
     c4e:	60 e7       	ldi	r22, 0x70	; 112
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     c50:	1d c0       	rjmp	.+58     	; 0xc8c <updateSettings+0xb8>
    byte0 = 0b01000000;
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     c52:	90 91 31 02 	lds	r25, 0x0231
     c56:	80 91 26 02 	lds	r24, 0x0226
     c5a:	28 e0       	ldi	r18, 0x08	; 8
     c5c:	82 9f       	mul	r24, r18
     c5e:	a0 01       	movw	r20, r0
     c60:	11 24       	eor	r1, r1
     c62:	20 e4       	ldi	r18, 0x40	; 64
     c64:	92 9f       	mul	r25, r18
     c66:	c0 01       	movw	r24, r0
     c68:	11 24       	eor	r1, r1
     c6a:	48 2b       	or	r20, r24
    byte3 = 0x00;
    byte4 = 0x00;
    break;

  case AM:
    byte0 = 0b01000000;
     c6c:	60 e4       	ldi	r22, 0x40	; 64
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
    byte2 = 0x88;
#endif
    byte3 = 0x00;
    byte4 = 0x00;
    break;
     c6e:	0e c0       	rjmp	.+28     	; 0xc8c <updateSettings+0xb8>
    byte0 = 0b01000001;
#if F_IF == 21
    byte1 = (tx_att << 6)|(rx_att << 3)|0x01;
    byte2 = 0x08;
#elif F_IF == 45
    byte1 = (tx_att << 6)|(rx_att << 3)|0x00;
     c70:	90 91 31 02 	lds	r25, 0x0231
     c74:	80 91 26 02 	lds	r24, 0x0226
     c78:	28 e0       	ldi	r18, 0x08	; 8
     c7a:	82 9f       	mul	r24, r18
     c7c:	a0 01       	movw	r20, r0
     c7e:	11 24       	eor	r1, r1
     c80:	20 e4       	ldi	r18, 0x40	; 64
     c82:	92 9f       	mul	r25, r18
     c84:	c0 01       	movw	r24, r0
     c86:	11 24       	eor	r1, r1
     c88:	48 2b       	or	r20, r24
    byte3 = 0x00;
    byte4 = 0x00;
    break;

  case FM:
    byte0 = 0b01000001;
     c8a:	61 e4       	ldi	r22, 0x41	; 65
#endif
    byte3 = 0x00;
    byte4 = 0x00;
  }
  
  err = TWI_write_5bytes(fpga_addr, byte0, byte1, byte2, byte3, byte4);
     c8c:	e1 2c       	mov	r14, r1
     c8e:	00 e0       	ldi	r16, 0x00	; 0
     c90:	28 e8       	ldi	r18, 0x88	; 136
     c92:	83 e2       	ldi	r24, 0x23	; 35
     c94:	0e 94 a5 03 	call	0x74a	; 0x74a <TWI_write_5bytes>
  if (err)
    return err;

  return 0x00;

}
     c98:	0f 91       	pop	r16
     c9a:	ef 90       	pop	r14
     c9c:	08 95       	ret

00000c9e <adcInit>:

void adcInit(void) {
  ADCSRA = (1 << ADEN) | (1 << ADFR) | (1 << ADPS2) | (1 << ADPS1); // Free run, /64 -> 77 kHz
     c9e:	86 ea       	ldi	r24, 0xA6	; 166
     ca0:	86 b9       	out	0x06, r24	; 6
  ADMUX = 0x43; // ADC3, AVCC ref
     ca2:	83 e4       	ldi	r24, 0x43	; 67
     ca4:	87 b9       	out	0x07, r24	; 7
  ADCSRA |= (1 << ADSC); // Start conversion
     ca6:	36 9a       	sbi	0x06, 6	; 6
     ca8:	08 95       	ret

00000caa <Timer0Init>:

}

void Timer0Init(void) {

  TCCR0 = 0x0f; // CTC mode, 1024 prescaler
     caa:	8f e0       	ldi	r24, 0x0F	; 15
     cac:	83 bf       	out	0x33, r24	; 51
  OCR0 = (uint8_t)10; // 1000000/(1024*10) = 100 Hz, 10ms
     cae:	8a e0       	ldi	r24, 0x0A	; 10
     cb0:	81 bf       	out	0x31, r24	; 49
  TIMSK |= (1 << OCIE0); // Interrupt at compare match
     cb2:	87 b7       	in	r24, 0x37	; 55
     cb4:	82 60       	ori	r24, 0x02	; 2
     cb6:	87 bf       	out	0x37, r24	; 55
     cb8:	08 95       	ret

00000cba <Timer1Init>:
}

void Timer1Init(void) {

  TCCR1A = 0x00;  
     cba:	1f bc       	out	0x2f, r1	; 47
  TCCR1B = 0x0b; // CTC mode, 64 prescaler
     cbc:	8b e0       	ldi	r24, 0x0B	; 11
     cbe:	8e bd       	out	0x2e, r24	; 46
  OCR1A = (uint16_t)1563; // 1000000/(64*1563) = 10 Hz, 100ms
     cc0:	8b e1       	ldi	r24, 0x1B	; 27
     cc2:	96 e0       	ldi	r25, 0x06	; 6
     cc4:	9b bd       	out	0x2b, r25	; 43
     cc6:	8a bd       	out	0x2a, r24	; 42
  TIMSK |= (1 << OCIE1A); // Interrupt at compare match
     cc8:	87 b7       	in	r24, 0x37	; 55
     cca:	80 61       	ori	r24, 0x10	; 16
     ccc:	87 bf       	out	0x37, r24	; 55
     cce:	08 95       	ret

00000cd0 <lcd_e_port_low>:
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
     cd0:	e5 e6       	ldi	r30, 0x65	; 101
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8d 7f       	andi	r24, 0xFD	; 253
     cd8:	80 83       	st	Z, r24
     cda:	08 95       	ret

00000cdc <lcd_e_port_high>:
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
     cdc:	e5 e6       	ldi	r30, 0x65	; 101
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	80 81       	ld	r24, Z
     ce2:	82 60       	ori	r24, 0x02	; 2
     ce4:	80 83       	st	Z, r24
     ce6:	08 95       	ret

00000ce8 <lcd_read>:
                 0: read busy flag / address counter
Returns:  byte read from LCD controller
*************************************************************************/
#if RW_LINE_IMPLEMENTED==1
static uint8_t lcd_read(uint8_t rs)
  {
     ce8:	af 92       	push	r10
     cea:	bf 92       	push	r11
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ef 92       	push	r14
     cf2:	ff 92       	push	r15
     cf4:	0f 93       	push	r16
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	1f 92       	push	r1
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
    uint8_t data;
    
    #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
    if (rs)
     d02:	88 23       	and	r24, r24
     d04:	21 f0       	breq	.+8      	; 0xd0e <lcd_read+0x26>
      lcd_waitbusy();
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <lcd_waitbusy>
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
      if (PrevCmdInvolvedAddressCounter)
     d0e:	90 91 21 02 	lds	r25, 0x0221
     d12:	99 23       	and	r25, r25
     d14:	29 f0       	breq	.+10     	; 0xd20 <lcd_read+0x38>
        {
          Delay_us(5);
     d16:	00 c0       	rjmp	.+0      	; 0xd18 <lcd_read+0x30>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <lcd_read+0x32>
     d1a:	00 00       	nop
          PrevCmdInvolvedAddressCounter=0;
     d1c:	10 92 21 02 	sts	0x0221, r1
        }
    #endif

    if (rs)
     d20:	88 23       	and	r24, r24
     d22:	29 f0       	breq	.+10     	; 0xd2e <lcd_read+0x46>
      {
        lcd_rs_port_high();                             // RS=1: Read Data
     d24:	97 9a       	sbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=1;
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	80 93 21 02 	sts	0x0221, r24
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <lcd_read+0x48>
        #endif
      }
    else lcd_rs_port_low();                           // RS=0: Read Busy Flag
     d2e:	97 98       	cbi	0x12, 7	; 18

    
    lcd_rw_port_high();                               // RW=1: Read Mode
     d30:	80 91 65 00 	lds	r24, 0x0065
     d34:	81 60       	ori	r24, 0x01	; 1
     d36:	80 93 65 00 	sts	0x0065, r24
      lcd_db7_port_high();                            // Pins High (Inactive)
      lcd_db6_port_high();
      lcd_db5_port_high();
      lcd_db4_port_high();
    #else //using 8-Bit-Mode
      lcd_db7_ddr_low();                              // Configure Data Pins as Input
     d3a:	a7 98       	cbi	0x14, 7	; 20
      lcd_db6_ddr_low();
     d3c:	a6 98       	cbi	0x14, 6	; 20
      lcd_db5_ddr_low();
     d3e:	a5 98       	cbi	0x14, 5	; 20
      lcd_db4_ddr_low();
     d40:	a4 98       	cbi	0x14, 4	; 20
      lcd_db3_ddr_low();
     d42:	a3 98       	cbi	0x14, 3	; 20
      lcd_db2_ddr_low();
     d44:	a2 98       	cbi	0x14, 2	; 20
      lcd_db1_ddr_low();
     d46:	a1 98       	cbi	0x14, 1	; 20
      lcd_db0_ddr_low();
     d48:	a0 98       	cbi	0x14, 0	; 20

      lcd_e_port_high();
     d4a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <lcd_e_port_high>
      Delay_ns(500);
     d4e:	00 00       	nop

      data=lcd_db7_pin_get() << 7 | lcd_db6_pin_get() << 6 |
     d50:	e3 b2       	in	r14, 0x13	; 19
     d52:	c3 b2       	in	r12, 0x13	; 19
           lcd_db5_pin_get() << 5 | lcd_db4_pin_get() << 4 |
     d54:	f3 b2       	in	r15, 0x13	; 19
     d56:	03 b3       	in	r16, 0x13	; 19
           lcd_db3_pin_get() << 3 | lcd_db2_pin_get() << 2 |
     d58:	13 b3       	in	r17, 0x13	; 19
     d5a:	b3 b2       	in	r11, 0x13	; 19
           lcd_db1_pin_get() << 1 | lcd_db0_pin_get();
     d5c:	a3 b2       	in	r10, 0x13	; 19
     d5e:	d3 b2       	in	r13, 0x13	; 19

      lcd_e_port_low();
     d60:	0e 94 68 06 	call	0xcd0	; 0xcd0 <lcd_e_port_low>

      lcd_db7_ddr_high();                             // Configure Data Pins as Output
     d64:	a7 9a       	sbi	0x14, 7	; 20
      lcd_db6_ddr_high();
     d66:	a6 9a       	sbi	0x14, 6	; 20
      lcd_db5_ddr_high();
     d68:	a5 9a       	sbi	0x14, 5	; 20
      lcd_db4_ddr_high();
     d6a:	a4 9a       	sbi	0x14, 4	; 20
      lcd_db3_ddr_high();
     d6c:	a3 9a       	sbi	0x14, 3	; 20
      lcd_db2_ddr_high();
     d6e:	a2 9a       	sbi	0x14, 2	; 20
      lcd_db1_ddr_high();
     d70:	a1 9a       	sbi	0x14, 1	; 20
      lcd_db0_ddr_high();
     d72:	a0 9a       	sbi	0x14, 0	; 20

      lcd_db7_port_high();                            // Pins High (Inactive)
     d74:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
     d76:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
     d78:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
     d7a:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db3_port_high();
     d7c:	ab 9a       	sbi	0x15, 3	; 21
      lcd_db2_port_high();
     d7e:	aa 9a       	sbi	0x15, 2	; 21
      lcd_db1_port_high();
     d80:	a9 9a       	sbi	0x15, 1	; 21
      lcd_db0_port_high();
     d82:	a8 9a       	sbi	0x15, 0	; 21
    #endif
    
    lcd_rw_port_low();
     d84:	80 91 65 00 	lds	r24, 0x0065
     d88:	8e 7f       	andi	r24, 0xFE	; 254
     d8a:	80 93 65 00 	sts	0x0065, r24
      lcd_db0_ddr_low();

      lcd_e_port_high();
      Delay_ns(500);

      data=lcd_db7_pin_get() << 7 | lcd_db6_pin_get() << 6 |
     d8e:	8c 2d       	mov	r24, r12
     d90:	80 74       	andi	r24, 0x40	; 64
     d92:	9e 2d       	mov	r25, r14
     d94:	90 78       	andi	r25, 0x80	; 128
     d96:	e8 2e       	mov	r14, r24
     d98:	e9 2a       	or	r14, r25
     d9a:	9f 2d       	mov	r25, r15
     d9c:	90 72       	andi	r25, 0x20	; 32
     d9e:	fe 2c       	mov	r15, r14
     da0:	f9 2a       	or	r15, r25
     da2:	00 71       	andi	r16, 0x10	; 16
     da4:	0f 29       	or	r16, r15
     da6:	18 70       	andi	r17, 0x08	; 8
     da8:	10 2b       	or	r17, r16
     daa:	8b 2d       	mov	r24, r11
     dac:	84 70       	andi	r24, 0x04	; 4
     dae:	81 2b       	or	r24, r17
     db0:	9a 2d       	mov	r25, r10
     db2:	92 70       	andi	r25, 0x02	; 2
     db4:	98 2b       	or	r25, r24
           lcd_db5_pin_get() << 5 | lcd_db4_pin_get() << 4 |
           lcd_db3_pin_get() << 3 | lcd_db2_pin_get() << 2 |
           lcd_db1_pin_get() << 1 | lcd_db0_pin_get();
     db6:	8d 2d       	mov	r24, r13
     db8:	81 70       	andi	r24, 0x01	; 1
    if (rs)
      Delay_us(40);
    else Delay_us(1);
    #endif
    return data;
  }
     dba:	89 2b       	or	r24, r25
     dbc:	0f 90       	pop	r0
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	bf 90       	pop	r11
     dd0:	af 90       	pop	r10
     dd2:	08 95       	ret

00000dd4 <lcd_waitbusy>:
*************************************************************************/
#if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
static uint8_t lcd_read(uint8_t rs);

static void lcd_waitbusy(void)
  {
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
    register uint8_t c;
    unsigned int ul1=0;

    while ( ((c=lcd_read(0)) & (1<<LCD_BUSY)) && ul1<((F_CPU/16384>=16)?F_CPU/16384:16))     // Wait Until Busy Flag is Cleared
     dd8:	ce e3       	ldi	r28, 0x3E	; 62
     dda:	d0 e0       	ldi	r29, 0x00	; 0
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	0e 94 74 06 	call	0xce8	; 0xce8 <lcd_read>
     de2:	87 ff       	sbrs	r24, 7
     de4:	02 c0       	rjmp	.+4      	; 0xdea <lcd_waitbusy+0x16>
     de6:	21 97       	sbiw	r28, 0x01	; 1
     de8:	c9 f7       	brne	.-14     	; 0xddc <lcd_waitbusy+0x8>
      ul1++;
  }
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <lcd_write>:
          rs     1: write data
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs)
  {
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <lcd_write+0x6>
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
    #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
      lcd_waitbusy();
     dfa:	6a 83       	std	Y+2, r22	; 0x02
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <lcd_waitbusy>
      if (PrevCmdInvolvedAddressCounter)
     e02:	90 91 21 02 	lds	r25, 0x0221
     e06:	6a 81       	ldd	r22, Y+2	; 0x02
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	99 23       	and	r25, r25
     e0c:	29 f0       	breq	.+10     	; 0xe18 <lcd_write+0x28>
        {
          Delay_us(5);
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <lcd_write+0x20>
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <lcd_write+0x22>
     e12:	00 00       	nop
          PrevCmdInvolvedAddressCounter=0;
     e14:	10 92 21 02 	sts	0x0221, r1
        }
    #endif

    if (rs)
     e18:	66 23       	and	r22, r22
     e1a:	29 f0       	breq	.+10     	; 0xe26 <lcd_write+0x36>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
     e1c:	97 9a       	sbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=1;
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	90 93 21 02 	sts	0x0221, r25
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <lcd_write+0x3c>
        #endif
      }
    else
      {
        lcd_rs_port_low();                          // RS=0: Write Command
     e26:	97 98       	cbi	0x12, 7	; 18
        #if (WAIT_MODE==1 && RW_LINE_IMPLEMENTED==1)
        PrevCmdInvolvedAddressCounter=0;
     e28:	10 92 21 02 	sts	0x0221, r1
      lcd_db6_port_high();
      lcd_db5_port_high();
      lcd_db4_port_high();

    #else //using 8-Bit_Mode
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
     e2c:	87 ff       	sbrs	r24, 7
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <lcd_write+0x44>
     e30:	af 9a       	sbi	0x15, 7	; 21
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <lcd_write+0x46>
     e34:	af 98       	cbi	0x15, 7	; 21
      lcd_db6_port_set(data&_BV(6));
     e36:	86 ff       	sbrs	r24, 6
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <lcd_write+0x4e>
     e3a:	ae 9a       	sbi	0x15, 6	; 21
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <lcd_write+0x50>
     e3e:	ae 98       	cbi	0x15, 6	; 21
      lcd_db5_port_set(data&_BV(5));
     e40:	85 ff       	sbrs	r24, 5
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <lcd_write+0x58>
     e44:	ad 9a       	sbi	0x15, 5	; 21
     e46:	01 c0       	rjmp	.+2      	; 0xe4a <lcd_write+0x5a>
     e48:	ad 98       	cbi	0x15, 5	; 21
      lcd_db4_port_set(data&_BV(4));
     e4a:	84 ff       	sbrs	r24, 4
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <lcd_write+0x62>
     e4e:	ac 9a       	sbi	0x15, 4	; 21
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <lcd_write+0x64>
     e52:	ac 98       	cbi	0x15, 4	; 21
      lcd_db3_port_set(data&_BV(3));                  //Output High Nibble
     e54:	83 ff       	sbrs	r24, 3
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <lcd_write+0x6c>
     e58:	ab 9a       	sbi	0x15, 3	; 21
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <lcd_write+0x6e>
     e5c:	ab 98       	cbi	0x15, 3	; 21
      lcd_db2_port_set(data&_BV(2));
     e5e:	82 ff       	sbrs	r24, 2
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <lcd_write+0x76>
     e62:	aa 9a       	sbi	0x15, 2	; 21
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <lcd_write+0x78>
     e66:	aa 98       	cbi	0x15, 2	; 21
      lcd_db1_port_set(data&_BV(1));
     e68:	81 ff       	sbrs	r24, 1
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <lcd_write+0x80>
     e6c:	a9 9a       	sbi	0x15, 1	; 21
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <lcd_write+0x82>
     e70:	a9 98       	cbi	0x15, 1	; 21
      lcd_db0_port_set(data&_BV(0));
     e72:	80 ff       	sbrs	r24, 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <lcd_write+0x8a>
     e76:	a8 9a       	sbi	0x15, 0	; 21
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <lcd_write+0x8c>
     e7a:	a8 98       	cbi	0x15, 0	; 21

      Delay_ns(100);
     e7c:	00 00       	nop
      lcd_e_port_high();
     e7e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <lcd_e_port_high>
      Delay_ns(500);
     e82:	00 00       	nop
      lcd_e_port_low();
     e84:	0e 94 68 06 	call	0xcd0	; 0xcd0 <lcd_e_port_low>

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
     e88:	af 9a       	sbi	0x15, 7	; 21
      lcd_db6_port_high();
     e8a:	ae 9a       	sbi	0x15, 6	; 21
      lcd_db5_port_high();
     e8c:	ad 9a       	sbi	0x15, 5	; 21
      lcd_db4_port_high();
     e8e:	ac 9a       	sbi	0x15, 4	; 21
      lcd_db3_port_high();
     e90:	ab 9a       	sbi	0x15, 3	; 21
      lcd_db2_port_high();
     e92:	aa 9a       	sbi	0x15, 2	; 21
      lcd_db1_port_high();
     e94:	a9 9a       	sbi	0x15, 1	; 21
      lcd_db0_port_high();
     e96:	a8 9a       	sbi	0x15, 0	; 21
    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
        Delay_us(1640);
      else Delay_us(40);
    #endif
  }
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	08 95       	ret

00000ea2 <lcd_getc>:
    return data;
  }

uint8_t lcd_getc()
  {
    return lcd_read(1);
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	0c 94 74 06 	jmp	0xce8	; 0xce8 <lcd_read>

00000ea8 <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <lcd_write>

00000eae <lcd_goto>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
     eae:	80 58       	subi	r24, 0x80	; 128
     eb0:	0c 94 54 07 	jmp	0xea8	; 0xea8 <lcd_command>

00000eb4 <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	0c 94 54 07 	jmp	0xea8	; 0xea8 <lcd_command>

00000eba <lcd_home>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
  {
    lcd_command(1<<LCD_HOME);
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	0c 94 54 07 	jmp	0xea8	; 0xea8 <lcd_command>

00000ec0 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
     ec0:	61 e0       	ldi	r22, 0x01	; 1
     ec2:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <lcd_write>

00000ec6 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	ec 01       	movw	r28, r24
    register char c;

    while ((c=*s++)) 
     ecc:	89 91       	ld	r24, Y+
     ece:	88 23       	and	r24, r24
     ed0:	19 f0       	breq	.+6      	; 0xed8 <lcd_puts+0x12>
      lcd_putc(c);
     ed2:	0e 94 60 07 	call	0xec0	; 0xec0 <lcd_putc>
     ed6:	fa cf       	rjmp	.-12     	; 0xecc <lcd_puts+0x6>
  }
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
  {
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	fc 01       	movw	r30, r24
    register char c;

    while ((c=pgm_read_byte(progmem_s++))) 
     ee4:	84 91       	lpm	r24, Z
     ee6:	ef 01       	movw	r28, r30
     ee8:	21 96       	adiw	r28, 0x01	; 1
     eea:	88 23       	and	r24, r24
     eec:	21 f0       	breq	.+8      	; 0xef6 <lcd_puts_P+0x18>
      lcd_putc(c);
     eee:	0e 94 60 07 	call	0xec0	; 0xec0 <lcd_putc>
     ef2:	fe 01       	movw	r30, r28
     ef4:	f7 cf       	rjmp	.-18     	; 0xee4 <lcd_puts_P+0x6>
  }
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	08 95       	ret

00000efc <lcd_init>:
     efc:	e4 e6       	ldi	r30, 0x64	; 100
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	82 60       	ori	r24, 0x02	; 2
     f04:	80 83       	st	Z, r24
     f06:	8f 9a       	sbi	0x11, 7	; 17
     f08:	80 81       	ld	r24, Z
     f0a:	81 60       	ori	r24, 0x01	; 1
     f0c:	80 83       	st	Z, r24
     f0e:	a7 9a       	sbi	0x14, 7	; 20
     f10:	a6 9a       	sbi	0x14, 6	; 20
     f12:	a5 9a       	sbi	0x14, 5	; 20
     f14:	a4 9a       	sbi	0x14, 4	; 20
     f16:	a3 9a       	sbi	0x14, 3	; 20
     f18:	a2 9a       	sbi	0x14, 2	; 20
     f1a:	a1 9a       	sbi	0x14, 1	; 20
     f1c:	a0 9a       	sbi	0x14, 0	; 20
     f1e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <lcd_e_port_low>
     f22:	97 98       	cbi	0x12, 7	; 18
     f24:	e5 e6       	ldi	r30, 0x65	; 101
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8e 7f       	andi	r24, 0xFE	; 254
     f2c:	80 83       	st	Z, r24
     f2e:	af 9a       	sbi	0x15, 7	; 21
     f30:	ae 9a       	sbi	0x15, 6	; 21
     f32:	ad 9a       	sbi	0x15, 5	; 21
     f34:	ac 9a       	sbi	0x15, 4	; 21
     f36:	ab 9a       	sbi	0x15, 3	; 21
     f38:	aa 9a       	sbi	0x15, 2	; 21
     f3a:	a9 9a       	sbi	0x15, 1	; 21
     f3c:	a8 9a       	sbi	0x15, 0	; 21
     f3e:	85 ea       	ldi	r24, 0xA5	; 165
     f40:	9e e0       	ldi	r25, 0x0E	; 14
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <lcd_init+0x46>
     f46:	00 c0       	rjmp	.+0      	; 0xf48 <lcd_init+0x4c>
     f48:	00 00       	nop
     f4a:	af 98       	cbi	0x15, 7	; 21
     f4c:	ae 98       	cbi	0x15, 6	; 21
     f4e:	00 00       	nop
     f50:	0e 94 6e 06 	call	0xcdc	; 0xcdc <lcd_e_port_high>
     f54:	00 00       	nop
     f56:	0e 94 68 06 	call	0xcd0	; 0xcd0 <lcd_e_port_low>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	94 e0       	ldi	r25, 0x04	; 4
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <lcd_init+0x62>
     f62:	00 c0       	rjmp	.+0      	; 0xf64 <lcd_init+0x68>
     f64:	00 00       	nop
     f66:	0e 94 6e 06 	call	0xcdc	; 0xcdc <lcd_e_port_high>
     f6a:	00 00       	nop
     f6c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <lcd_e_port_low>
     f70:	91 e2       	ldi	r25, 0x21	; 33
     f72:	9a 95       	dec	r25
     f74:	f1 f7       	brne	.-4      	; 0xf72 <lcd_init+0x76>
     f76:	00 00       	nop
     f78:	0e 94 6e 06 	call	0xcdc	; 0xcdc <lcd_e_port_high>
     f7c:	00 00       	nop
     f7e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <lcd_e_port_low>
     f82:	8d e0       	ldi	r24, 0x0D	; 13
     f84:	8a 95       	dec	r24
     f86:	f1 f7       	brne	.-4      	; 0xf84 <lcd_init+0x88>
     f88:	00 00       	nop
     f8a:	aa 98       	cbi	0x15, 2	; 21
     f8c:	00 00       	nop
     f8e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <lcd_e_port_high>
     f92:	00 00       	nop
     f94:	0e 94 68 06 	call	0xcd0	; 0xcd0 <lcd_e_port_low>
     f98:	9d e0       	ldi	r25, 0x0D	; 13
     f9a:	9a 95       	dec	r25
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <lcd_init+0x9e>
     f9e:	00 00       	nop
     fa0:	88 e0       	ldi	r24, 0x08	; 8
     fa2:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_command>
     fa6:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <lcd_clrscr>
     faa:	86 e0       	ldi	r24, 0x06	; 6
     fac:	0e 94 54 07 	call	0xea8	; 0xea8 <lcd_command>
     fb0:	8c e0       	ldi	r24, 0x0C	; 12
     fb2:	0c 94 54 07 	jmp	0xea8	; 0xea8 <lcd_command>

00000fb6 <main>:
}

int main(void)
{
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	c3 54       	subi	r28, 0x43	; 67
     fc0:	d1 09       	sbc	r29, r1
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
  uint16_t steps;
  
  static const char string_intro_row1[] PROGMEM = "*** SM6VFZ";
  static const char string_intro_row2[] PROGMEM = "Starting radio";

  DDRA = 0xFF;
     fcc:	8f ef       	ldi	r24, 0xFF	; 255
     fce:	8a bb       	out	0x1a, r24	; 26
  DDRB = 0xFF;
     fd0:	87 bb       	out	0x17, r24	; 23
  DDRC = 0xFF;
     fd2:	84 bb       	out	0x14, r24	; 20
  DDRD = ~(uint8_t)((1 << ROT2_A)|(1 << ROT2_B));
     fd4:	93 ef       	ldi	r25, 0xF3	; 243
     fd6:	91 bb       	out	0x11, r25	; 17
  DDRE = ~(uint8_t)((1 << ROT1_A)|(1 << ROT1_B)|(1 << VOLROT_A)|(1 << VOLROT_B)|(1 << FREQ_BUTTON));
     fd8:	97 e0       	ldi	r25, 0x07	; 7
     fda:	92 b9       	out	0x02, r25	; 2
  DDRF = ~(uint8_t)((1 << VOL_BUTTON)|(1 << MODE_BUTTON)|(1 << BAND_BUTTON)|(1 << CLAR_POT)|(1 << MENU_BUTTON));
     fdc:	90 ee       	ldi	r25, 0xE0	; 224
     fde:	90 93 61 00 	sts	0x0061, r25
  DDRG = 0xFF;  
     fe2:	80 93 64 00 	sts	0x0064, r24
	
  PORTA = 0x00;
     fe6:	1b ba       	out	0x1b, r1	; 27
  PORTB = 0x00;
     fe8:	18 ba       	out	0x18, r1	; 24
  PORTC = 0x00;
     fea:	15 ba       	out	0x15, r1	; 21
  PORTD = (uint8_t)((1 << ROT2_A)|(1 << ROT2_B));
     fec:	8c e0       	ldi	r24, 0x0C	; 12
     fee:	82 bb       	out	0x12, r24	; 18
  PORTE = (uint8_t)((1 << ROT1_A)|(1 << ROT1_B)|(1 << VOLROT_A)|(1 << VOLROT_B)|(1 << FREQ_BUTTON)|(1 << ROT_BUTTON));
     ff0:	88 ef       	ldi	r24, 0xF8	; 248
     ff2:	83 b9       	out	0x03, r24	; 3
  PORTF = (uint8_t)((1 << VOL_BUTTON)|(1 << MODE_BUTTON)|(1 << BAND_BUTTON)|(1 << MODE_BUTTON)|(1 << SQUELCH_BUTTON));
     ff4:	83 e1       	ldi	r24, 0x13	; 19
     ff6:	80 93 62 00 	sts	0x0062, r24
  PORTG = 0x00;
     ffa:	10 92 65 00 	sts	0x0065, r1
	
  // turn off the analog comparator
  ACSR = 0x40U;
     ffe:	80 e4       	ldi	r24, 0x40	; 64
    1000:	88 b9       	out	0x08, r24	; 8
	
  // turn off SPI, TWI and USART0
  //PRR  = 0x86U;
	
  EICRA = (1<<ISC21)|(1<<ISC31);
    1002:	80 ea       	ldi	r24, 0xA0	; 160
    1004:	80 93 6a 00 	sts	0x006A, r24
  EICRB = (1<<ISC41)|(1<<ISC51)|(1<<ISC61)|(1<<ISC71);
    1008:	8a ea       	ldi	r24, 0xAA	; 170
    100a:	8a bf       	out	0x3a, r24	; 58

  EIMSK = (1 << INTF2)|(1 << INTF3)|(1 << INTF4)|(1 << INTF5)|(1 << INTF6)|(1 << INTF7);
    100c:	8c ef       	ldi	r24, 0xFC	; 252
    100e:	89 bf       	out	0x39, r24	; 57
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	a8 95       	wdr
    1016:	81 b5       	in	r24, 0x21	; 33
    1018:	88 61       	ori	r24, 0x18	; 24
    101a:	81 bd       	out	0x21, r24	; 33
    101c:	11 bc       	out	0x21, r1	; 33
    101e:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1020:	2f e9       	ldi	r18, 0x9F	; 159
    1022:	86 e8       	ldi	r24, 0x86	; 134
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	21 50       	subi	r18, 0x01	; 1
    1028:	80 40       	sbci	r24, 0x00	; 0
    102a:	90 40       	sbci	r25, 0x00	; 0
    102c:	e1 f7       	brne	.-8      	; 0x1026 <main+0x70>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <main+0x7a>
    1030:	00 00       	nop

  wdt_disable();

  _delay_ms(500);

  PORTD |= (1 << LED_RED) | (1 << LED_GREEN);
    1032:	82 b3       	in	r24, 0x12	; 18
    1034:	80 66       	ori	r24, 0x60	; 96
    1036:	82 bb       	out	0x12, r24	; 18

  TIMSK = 0;
    1038:	17 be       	out	0x37, r1	; 55
  Timer0Init();
    103a:	0e 94 55 06 	call	0xcaa	; 0xcaa <Timer0Init>
  Timer1Init();
    103e:	0e 94 5d 06 	call	0xcba	; 0xcba <Timer1Init>
  TWIinit();
    1042:	0e 94 0e 02 	call	0x41c	; 0x41c <TWIinit>
  lcd_init();
    1046:	0e 94 7e 07 	call	0xefc	; 0xefc <lcd_init>
  lcd_clrscr();
    104a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <lcd_clrscr>
  adcInit();
    104e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <adcInit>
    1052:	af e4       	ldi	r26, 0x4F	; 79
    1054:	b3 ec       	ldi	r27, 0xC3	; 195
    1056:	11 97       	sbiw	r26, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <main+0xa0>
    105a:	00 c0       	rjmp	.+0      	; 0x105c <main+0xa6>
    105c:	00 00       	nop

  _delay_ms(200);

  PORTD &= ~((1 << LED_RED) | (1 << LED_GREEN));
    105e:	82 b3       	in	r24, 0x12	; 18
    1060:	8f 79       	andi	r24, 0x9F	; 159
    1062:	82 bb       	out	0x12, r24	; 18

  strcpy_P(buffer, string_intro_row1);
    1064:	6b e9       	ldi	r22, 0x9B	; 155
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	8e 01       	movw	r16, r28
    106a:	0f 5f       	subi	r16, 0xFF	; 255
    106c:	1f 4f       	sbci	r17, 0xFF	; 255
    106e:	c8 01       	movw	r24, r16
    1070:	0e 94 30 15 	call	0x2a60	; 0x2a60 <strcpy_P>
  lcd_puts(buffer);
    1074:	c8 01       	movw	r24, r16
    1076:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
  lcd_goto(0x40);
    107a:	80 e4       	ldi	r24, 0x40	; 64
    107c:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
  strcpy_P(buffer, string_intro_row2);
    1080:	6c e8       	ldi	r22, 0x8C	; 140
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	c8 01       	movw	r24, r16
    1086:	0e 94 30 15 	call	0x2a60	; 0x2a60 <strcpy_P>
  lcd_puts(buffer);
    108a:	c8 01       	movw	r24, r16
    108c:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>

  rot_flag = 0x01;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 2c 02 	sts	0x022C, r24
  mode_flag = 0x01;
    1096:	80 93 25 02 	sts	0x0225, r24
  band_flag = 0x02;
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	80 93 27 02 	sts	0x0227, r24
  timer_flag = 0x00;
    10a0:	10 92 34 02 	sts	0x0234, r1

  band = 10;
    10a4:	8a e0       	ldi	r24, 0x0A	; 10
    10a6:	80 93 22 02 	sts	0x0222, r24
  freq = 7010;
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e1       	ldi	r25, 0x10	; 16
    10ae:	ab ed       	ldi	r26, 0xDB	; 219
    10b0:	b5 e4       	ldi	r27, 0x45	; 69
    10b2:	80 93 28 02 	sts	0x0228, r24
    10b6:	90 93 29 02 	sts	0x0229, r25
    10ba:	a0 93 2a 02 	sts	0x022A, r26
    10be:	b0 93 2b 02 	sts	0x022B, r27
  step_timer = 255;
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	90 93 33 02 	sts	0x0233, r25
    10ca:	80 93 32 02 	sts	0x0232, r24
  steps = 0;
  last_dir = 0x00;
  mode = 0x00;
    10ce:	10 92 2e 02 	sts	0x022E, r1
  tx = 0x0000;
    10d2:	10 92 30 02 	sts	0x0230, r1
    10d6:	10 92 2f 02 	sts	0x022F, r1
  rx_att = 0x00;
    10da:	10 92 26 02 	sts	0x0226, r1
  tx_att = 0x00;
    10de:	10 92 31 02 	sts	0x0231, r1
  rffe_rx_att = false;
    10e2:	10 92 35 02 	sts	0x0235, r1

  err = updateVolumeSquelch(vol, squelch);
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	88 e1       	ldi	r24, 0x18	; 24
    10ea:	0e 94 b7 04 	call	0x96e	; 0x96e <updateVolumeSquelch>
    10ee:	bf e7       	ldi	r27, 0x7F	; 127
    10f0:	2a e1       	ldi	r18, 0x1A	; 26
    10f2:	86 e0       	ldi	r24, 0x06	; 6
    10f4:	b1 50       	subi	r27, 0x01	; 1
    10f6:	20 40       	sbci	r18, 0x00	; 0
    10f8:	80 40       	sbci	r24, 0x00	; 0
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <main+0x13e>
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <main+0x148>
    10fe:	00 00       	nop
  
  _delay_ms(2000);

  lcd_clrscr();
    1100:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <lcd_clrscr>
  
  sei();
    1104:	78 94       	sei
  timer_flag = 0x00;

  band = 10;
  freq = 7010;
  step_timer = 255;
  steps = 0;
    1106:	c1 2c       	mov	r12, r1
    1108:	d1 2c       	mov	r13, r1
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
  uint8_t last_dir;
  uint8_t squelch = 0;
  uint8_t tx_last = 255;
  uint8_t vol = 0x18;
    110a:	38 e1       	ldi	r19, 0x18	; 24
    110c:	a3 2e       	mov	r10, r19
  int16_t clarval, clarval_last;
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
  uint8_t last_dir;
  uint8_t squelch = 0;
  uint8_t tx_last = 255;
    110e:	9f ef       	ldi	r25, 0xFF	; 255
    1110:	9e af       	std	Y+62, r25	; 0x3e
  double freq_last;
  int16_t clarval, clarval_last;
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
  uint8_t last_dir;
  uint8_t squelch = 0;
    1112:	b1 2c       	mov	r11, r1

  band = 10;
  freq = 7010;
  step_timer = 255;
  steps = 0;
  last_dir = 0x00;
    1114:	1f ae       	std	Y+63, r1	; 0x3f
{
  char buffer[60];
  double freq_last;
  int16_t clarval, clarval_last;
  uint8_t err, data;
  uint8_t rssi, rssi_max=0, rssi_count=0;
    1116:	e1 2c       	mov	r14, r1
    1118:	f1 2c       	mov	r15, r1
#endif
      }
      else {
#ifdef HF_HAM
	if (freq<3500)
	  freq = 3510;
    111a:	41 2c       	mov	r4, r1
    111c:	40 e6       	ldi	r20, 0x60	; 96
    111e:	54 2e       	mov	r5, r20
    1120:	4b e5       	ldi	r20, 0x5B	; 91
    1122:	64 2e       	mov	r6, r20
    1124:	45 e4       	ldi	r20, 0x45	; 69
    1126:	74 2e       	mov	r7, r20
  lcd_clrscr();
  
  sei();

  while (1) {
    if (timer_flag) {
    1128:	80 91 34 02 	lds	r24, 0x0234
    112c:	88 23       	and	r24, r24
    112e:	09 f4       	brne	.+2      	; 0x1132 <__stack+0x33>
    1130:	52 c1       	rjmp	.+676    	; 0x13d6 <__stack+0x2d7>
    return err;
  return 0x00;
}

uint16_t readClar(void) {
  return (ADC);
    1132:	84 b0       	in	r8, 0x04	; 4
    1134:	95 b0       	in	r9, 0x05	; 5
#endif
#ifndef CLARPOT
      clarval = 0;
#endif

      if ((clarval < clarval_last - 10) || (clarval > clarval_last + 10)) {
    1136:	c1 01       	movw	r24, r2
    1138:	0a 97       	sbiw	r24, 0x0a	; 10
    113a:	88 16       	cp	r8, r24
    113c:	99 06       	cpc	r9, r25
    113e:	24 f0       	brlt	.+8      	; 0x1148 <__stack+0x49>
    1140:	44 96       	adiw	r24, 0x14	; 20
    1142:	88 15       	cp	r24, r8
    1144:	99 05       	cpc	r25, r9
    1146:	3c f5       	brge	.+78     	; 0x1196 <__stack+0x97>
	clar = (int8_t)((clarval - 512) >> 2);
    1148:	c4 01       	movw	r24, r8
    114a:	92 50       	subi	r25, 0x02	; 2
    114c:	95 95       	asr	r25
    114e:	87 95       	ror	r24
    1150:	95 95       	asr	r25
    1152:	87 95       	ror	r24
    1154:	80 93 0e 02 	sts	0x020E, r24
	err = updateFreq(0);
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <updateFreq>
	if (err) {
    115e:	88 23       	and	r24, r24
    1160:	b9 f0       	breq	.+46     	; 0x1190 <__stack+0x91>
	  sprintf(buffer,"Err %x         ",err);
    1162:	1f 92       	push	r1
    1164:	8f 93       	push	r24
    1166:	83 e1       	ldi	r24, 0x13	; 19
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	9f 93       	push	r25
    116c:	8f 93       	push	r24
    116e:	1f 93       	push	r17
    1170:	0f 93       	push	r16
    1172:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <sprintf>
	  lcd_goto(0x40);
    1176:	80 e4       	ldi	r24, 0x40	; 64
    1178:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	  lcd_puts(buffer);	
    117c:	c8 01       	movw	r24, r16
    117e:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <__stack+0x95>
	}
	else {
	  lcd_freq();
    1190:	0e 94 0c 04 	call	0x818	; 0x818 <lcd_freq>

  while (1) {
    if (timer_flag) {

#ifdef CLARPOT
      clarval = readClar();
    1194:	14 01       	movw	r2, r8
	  lcd_freq();
	}
	clarval_last = clarval;
      }

      if (vol_timer < 255)
    1196:	80 91 00 01 	lds	r24, 0x0100
    119a:	8f 3f       	cpi	r24, 0xFF	; 255
    119c:	29 f0       	breq	.+10     	; 0x11a8 <__stack+0xa9>
	vol_timer ++;
    119e:	80 91 00 01 	lds	r24, 0x0100
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	80 93 00 01 	sts	0x0100, r24

      // Band button

      if (band_timer < 9) { // Recently pressed ?
    11a8:	80 91 01 01 	lds	r24, 0x0101
    11ac:	89 30       	cpi	r24, 0x09	; 9
    11ae:	d8 f4       	brcc	.+54     	; 0x11e6 <__stack+0xe7>
	band_timer ++;
    11b0:	80 91 01 01 	lds	r24, 0x0101
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	80 93 01 01 	sts	0x0101, r24
	if ((band_timer < 9) && (PINF & (1 << BAND_BUTTON))) {
    11ba:	80 91 01 01 	lds	r24, 0x0101
    11be:	89 30       	cpi	r24, 0x09	; 9
    11c0:	40 f4       	brcc	.+16     	; 0x11d2 <__stack+0xd3>
    11c2:	00 9b       	sbis	0x00, 0	; 0
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <__stack+0xd3>
	  band_flag = 0x01; // short press
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	80 93 27 02 	sts	0x0227, r24
	  band_timer = 255;
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
    11ce:	80 93 01 01 	sts	0x0101, r24
	}
	if ((band_timer == 9) && (!(PINF & (1 << BAND_BUTTON)))) 
    11d2:	80 91 01 01 	lds	r24, 0x0101
    11d6:	89 30       	cpi	r24, 0x09	; 9
    11d8:	49 f4       	brne	.+18     	; 0x11ec <__stack+0xed>
    11da:	00 99       	sbic	0x00, 0	; 0
    11dc:	07 c0       	rjmp	.+14     	; 0x11ec <__stack+0xed>
	  band_flag = 0x02; // long press
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	80 93 27 02 	sts	0x0227, r24
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <__stack+0xed>
      }
      else if (!(PINF & (1 << BAND_BUTTON))) {  // New press
    11e6:	00 9b       	sbis	0x00, 0	; 0
	band_timer = 0;
    11e8:	10 92 01 01 	sts	0x0101, r1
      }

      // Mode button

      if (!(PINF & (1 << MODE_BUTTON))) {
    11ec:	01 99       	sbic	0x00, 1	; 0
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <__stack+0xf7>
	mode_flag = 0x01;
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	80 93 25 02 	sts	0x0225, r24
      }
      
      // Update frequency if necessary:
      if (freq != freq_last) {
    11f6:	60 91 28 02 	lds	r22, 0x0228
    11fa:	70 91 29 02 	lds	r23, 0x0229
    11fe:	80 91 2a 02 	lds	r24, 0x022A
    1202:	90 91 2b 02 	lds	r25, 0x022B
    1206:	24 96       	adiw	r28, 0x04	; 4
    1208:	2c ad       	ldd	r18, Y+60	; 0x3c
    120a:	3d ad       	ldd	r19, Y+61	; 0x3d
    120c:	4e ad       	ldd	r20, Y+62	; 0x3e
    120e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1210:	24 97       	sbiw	r28, 0x04	; 4
    1212:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    1216:	88 23       	and	r24, r24
    1218:	59 f1       	breq	.+86     	; 0x1270 <__stack+0x171>
	lcd_freq();
    121a:	0e 94 0c 04 	call	0x818	; 0x818 <lcd_freq>
	err = updateFreq(1);
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <updateFreq>
	if (err) {
    1224:	88 23       	and	r24, r24
    1226:	b1 f0       	breq	.+44     	; 0x1254 <__stack+0x155>
	  sprintf(buffer,"Err %x         ",err);
    1228:	1f 92       	push	r1
    122a:	8f 93       	push	r24
    122c:	83 e1       	ldi	r24, 0x13	; 19
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	9f 93       	push	r25
    1232:	8f 93       	push	r24
    1234:	1f 93       	push	r17
    1236:	0f 93       	push	r16
    1238:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <sprintf>
	  lcd_goto(0x40);
    123c:	80 e4       	ldi	r24, 0x40	; 64
    123e:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	  lcd_puts(buffer);	
    1242:	c8 01       	movw	r24, r16
    1244:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
	}
	freq_last = freq;
    1254:	80 91 28 02 	lds	r24, 0x0228
    1258:	90 91 29 02 	lds	r25, 0x0229
    125c:	a0 91 2a 02 	lds	r26, 0x022A
    1260:	b0 91 2b 02 	lds	r27, 0x022B
    1264:	24 96       	adiw	r28, 0x04	; 4
    1266:	8c af       	std	Y+60, r24	; 0x3c
    1268:	9d af       	std	Y+61, r25	; 0x3d
    126a:	ae af       	std	Y+62, r26	; 0x3e
    126c:	bf af       	std	Y+63, r27	; 0x3f
    126e:	24 97       	sbiw	r28, 0x04	; 4
      }

      // Read RSSI and status:
      err = TWI_read_byte(fpga_addr, &data);
    1270:	be 01       	movw	r22, r28
    1272:	63 5c       	subi	r22, 0xC3	; 195
    1274:	7f 4f       	sbci	r23, 0xFF	; 255
    1276:	83 e2       	ldi	r24, 0x23	; 35
    1278:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <TWI_read_byte>
      if (!err) {
    127c:	81 11       	cpse	r24, r1
    127e:	20 c0       	rjmp	.+64     	; 0x12c0 <__stack+0x1c1>
	if ((data & 0x80) && (tx_last != 1)) { // Shift to TX ?
    1280:	8d ad       	ldd	r24, Y+61	; 0x3d
    1282:	87 ff       	sbrs	r24, 7
    1284:	10 c0       	rjmp	.+32     	; 0x12a6 <__stack+0x1a7>
    1286:	9e ad       	ldd	r25, Y+62	; 0x3e
    1288:	91 30       	cpi	r25, 0x01	; 1
    128a:	e9 f0       	breq	.+58     	; 0x12c6 <__stack+0x1c7>
	  tx = 0x0001;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	90 93 30 02 	sts	0x0230, r25
    1294:	80 93 2f 02 	sts	0x022F, r24
	  updateRFFE();
    1298:	0e 94 c7 04 	call	0x98e	; 0x98e <updateRFFE>
	  PORTD |= (1 << LED_RED);
    129c:	96 9a       	sbi	0x12, 6	; 18
	  PORTD &= ~(1 << LED_GREEN);
    129e:	95 98       	cbi	0x12, 5	; 18
	  tx_last = 1;
    12a0:	a1 e0       	ldi	r26, 0x01	; 1
    12a2:	ae af       	std	Y+62, r26	; 0x3e
    12a4:	10 c0       	rjmp	.+32     	; 0x12c6 <__stack+0x1c7>
	}
	else if (!(data & 0x80) && (tx_last != 0)) { // Shift to RX ?
    12a6:	be ad       	ldd	r27, Y+62	; 0x3e
    12a8:	bb 23       	and	r27, r27
    12aa:	69 f0       	breq	.+26     	; 0x12c6 <__stack+0x1c7>
	  tx = 0x0000;
    12ac:	10 92 30 02 	sts	0x0230, r1
    12b0:	10 92 2f 02 	sts	0x022F, r1
	  updateRFFE();
    12b4:	0e 94 c7 04 	call	0x98e	; 0x98e <updateRFFE>
	  PORTD |= (1 << LED_GREEN);
    12b8:	95 9a       	sbi	0x12, 5	; 18
	  PORTD &= ~(1 << LED_RED);
    12ba:	96 98       	cbi	0x12, 6	; 18
	  tx_last = 0;
    12bc:	1e ae       	std	Y+62, r1	; 0x3e
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <__stack+0x1c7>
	}
      }
      else { // error
	PORTD &= ~((1 << LED_RED)|(1 << LED_GREEN));
    12c0:	82 b3       	in	r24, 0x12	; 18
    12c2:	8f 79       	andi	r24, 0x9F	; 159
    12c4:	82 bb       	out	0x12, r24	; 18
      }

      rssi = (0x3f & data); 
    12c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12c8:	8f 73       	andi	r24, 0x3F	; 63
    12ca:	f8 16       	cp	r15, r24
    12cc:	08 f4       	brcc	.+2      	; 0x12d0 <__stack+0x1d1>
    12ce:	f8 2e       	mov	r15, r24
      if (rssi_max < rssi) 
	rssi_max = rssi;
      rssi_count ++;
    12d0:	e3 94       	inc	r14
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
    12d2:	80 91 35 02 	lds	r24, 0x0235
    12d6:	81 11       	cpse	r24, r1
    12d8:	03 c0       	rjmp	.+6      	; 0x12e0 <__stack+0x1e1>
    12da:	22 e0       	ldi	r18, 0x02	; 2
    12dc:	2e 15       	cp	r18, r14
    12de:	48 f0       	brcs	.+18     	; 0x12f2 <__stack+0x1f3>
    12e0:	80 91 35 02 	lds	r24, 0x0235
    12e4:	88 23       	and	r24, r24
    12e6:	09 f4       	brne	.+2      	; 0x12ea <__stack+0x1eb>
    12e8:	73 c0       	rjmp	.+230    	; 0x13d0 <__stack+0x2d1>
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	8e 15       	cp	r24, r14
    12ee:	08 f0       	brcs	.+2      	; 0x12f2 <__stack+0x1f3>
    12f0:	6f c0       	rjmp	.+222    	; 0x13d0 <__stack+0x2d1>
	rssi_count = 0;
	if (rssi_max < 4)
    12f2:	93 e0       	ldi	r25, 0x03	; 3
    12f4:	9f 15       	cp	r25, r15
    12f6:	18 f4       	brcc	.+6      	; 0x12fe <__stack+0x1ff>
	  rssi = 0;
	else 
	  rssi = rssi_max - 4;
    12f8:	8c ef       	ldi	r24, 0xFC	; 252
    12fa:	8f 0d       	add	r24, r15
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <__stack+0x201>
	rssi_max = rssi;
      rssi_count ++;
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
	rssi_count = 0;
	if (rssi_max < 4)
	  rssi = 0;
    12fe:	80 e0       	ldi	r24, 0x00	; 0
	else 
	  rssi = rssi_max - 4;
	rssi_max = 0;

	if (vol_timer < 10); // Don't print if vol info
    1300:	90 91 00 01 	lds	r25, 0x0100
    1304:	9a 30       	cpi	r25, 0x0A	; 10
    1306:	08 f4       	brcc	.+2      	; 0x130a <__stack+0x20b>
    1308:	61 c0       	rjmp	.+194    	; 0x13cc <__stack+0x2cd>
	else if (rffe_rx_att && (rssi>9)) {
    130a:	90 91 35 02 	lds	r25, 0x0235
    130e:	99 23       	and	r25, r25
    1310:	29 f0       	breq	.+10     	; 0x131c <__stack+0x21d>
    1312:	8a 30       	cpi	r24, 0x0A	; 10
    1314:	18 f0       	brcs	.+6      	; 0x131c <__stack+0x21d>
	  sprintf(buffer,"S---9+++   ");
    1316:	63 e2       	ldi	r22, 0x23	; 35
    1318:	71 e0       	ldi	r23, 0x01	; 1
    131a:	49 c0       	rjmp	.+146    	; 0x13ae <__stack+0x2af>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rffe_rx_att && (rssi < 10)) {
    131c:	90 91 35 02 	lds	r25, 0x0235
    1320:	99 23       	and	r25, r25
    1322:	29 f0       	breq	.+10     	; 0x132e <__stack+0x22f>
    1324:	8a 30       	cpi	r24, 0x0A	; 10
    1326:	88 f4       	brcc	.+34     	; 0x134a <__stack+0x24b>
	  rffe_rx_att = false;
    1328:	10 92 35 02 	sts	0x0235, r1
    132c:	4d c0       	rjmp	.+154    	; 0x13c8 <__stack+0x2c9>
	  err = updateRFFE();
	}
	else if (rssi < 2) { 
    132e:	82 30       	cpi	r24, 0x02	; 2
    1330:	28 f4       	brcc	.+10     	; 0x133c <__stack+0x23d>
	  sprintf(buffer,"S%d         ",rssi);
    1332:	1f 92       	push	r1
    1334:	8f 93       	push	r24
    1336:	8f e2       	ldi	r24, 0x2F	; 47
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	0d c0       	rjmp	.+26     	; 0x1356 <__stack+0x257>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 4) {
    133c:	84 30       	cpi	r24, 0x04	; 4
    133e:	28 f4       	brcc	.+10     	; 0x134a <__stack+0x24b>
	  sprintf(buffer,"S-%d        ",rssi);
    1340:	1f 92       	push	r1
    1342:	8f 93       	push	r24
    1344:	8c e3       	ldi	r24, 0x3C	; 60
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	06 c0       	rjmp	.+12     	; 0x1356 <__stack+0x257>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
 	}
	else if (rssi < 6) {
    134a:	86 30       	cpi	r24, 0x06	; 6
    134c:	38 f4       	brcc	.+14     	; 0x135c <__stack+0x25d>
	  sprintf(buffer,"S--%d       ",rssi);
    134e:	1f 92       	push	r1
    1350:	8f 93       	push	r24
    1352:	89 e4       	ldi	r24, 0x49	; 73
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	9f 93       	push	r25
    1358:	8f 93       	push	r24
    135a:	0f c0       	rjmp	.+30     	; 0x137a <__stack+0x27b>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 8) {
    135c:	88 30       	cpi	r24, 0x08	; 8
    135e:	28 f4       	brcc	.+10     	; 0x136a <__stack+0x26b>
	  sprintf(buffer,"S---%d      ",rssi);
    1360:	1f 92       	push	r1
    1362:	8f 93       	push	r24
    1364:	a6 e5       	ldi	r26, 0x56	; 86
    1366:	b1 e0       	ldi	r27, 0x01	; 1
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <__stack+0x277>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 10) {
    136a:	8a 30       	cpi	r24, 0x0A	; 10
    136c:	b8 f4       	brcc	.+46     	; 0x139c <__stack+0x29d>
	  sprintf(buffer,"S----%d     ",rssi);
    136e:	1f 92       	push	r1
    1370:	8f 93       	push	r24
    1372:	a3 e6       	ldi	r26, 0x63	; 99
    1374:	b1 e0       	ldi	r27, 0x01	; 1
    1376:	bf 93       	push	r27
    1378:	af 93       	push	r26
    137a:	1f 93       	push	r17
    137c:	0f 93       	push	r16
    137e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <sprintf>
	  lcd_goto(0x40);
    1382:	80 e4       	ldi	r24, 0x40	; 64
    1384:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	  lcd_puts(buffer);
    1388:	c8 01       	movw	r24, r16
    138a:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	18 c0       	rjmp	.+48     	; 0x13cc <__stack+0x2cd>
	}
	else if (rssi < 12) {
    139c:	8c 30       	cpi	r24, 0x0C	; 12
    139e:	18 f4       	brcc	.+6      	; 0x13a6 <__stack+0x2a7>
	  sprintf(buffer,"S----9+    ");
    13a0:	60 e7       	ldi	r22, 0x70	; 112
    13a2:	71 e0       	ldi	r23, 0x01	; 1
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <__stack+0x2af>
	  lcd_goto(0x40);
	  lcd_puts(buffer);
	}
	else if (rssi < 13 ){
    13a6:	8c 30       	cpi	r24, 0x0C	; 12
    13a8:	61 f4       	brne	.+24     	; 0x13c2 <__stack+0x2c3>
	  sprintf(buffer,"S----9++   ");
    13aa:	6c e7       	ldi	r22, 0x7C	; 124
    13ac:	71 e0       	ldi	r23, 0x01	; 1
    13ae:	c8 01       	movw	r24, r16
    13b0:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcpy>
	  lcd_goto(0x40);
    13b4:	80 e4       	ldi	r24, 0x40	; 64
    13b6:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	  lcd_puts(buffer);
    13ba:	c8 01       	movw	r24, r16
    13bc:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <__stack+0x2cd>
	}
	else {
	  rffe_rx_att = true;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	80 93 35 02 	sts	0x0235, r24
	  err = updateRFFE();
    13c8:	0e 94 c7 04 	call	0x98e	; 0x98e <updateRFFE>
      rssi = (0x3f & data); 
      if (rssi_max < rssi) 
	rssi_max = rssi;
      rssi_count ++;
      if ((!rffe_rx_att && rssi_count > 2) || (rffe_rx_att && rssi_count > 2)) {
	rssi_count = 0;
    13cc:	e1 2c       	mov	r14, r1
	if (rssi_max < 4)
	  rssi = 0;
	else 
	  rssi = rssi_max - 4;
	rssi_max = 0;
    13ce:	f1 2c       	mov	r15, r1
	  rffe_rx_att = true;
	  err = updateRFFE();
	}
	rssi = 0;
      }
      timer_flag = 0;
    13d0:	10 92 34 02 	sts	0x0234, r1
    13d4:	6e c0       	rjmp	.+220    	; 0x14b2 <__stack+0x3b3>
    }
    else if (mode_flag) {
    13d6:	80 91 25 02 	lds	r24, 0x0225
    13da:	88 23       	and	r24, r24
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <__stack+0x2e1>
    13de:	69 c0       	rjmp	.+210    	; 0x14b2 <__stack+0x3b3>
      switch (mode) {
    13e0:	80 91 2e 02 	lds	r24, 0x022E
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	a9 f0       	breq	.+42     	; 0x1412 <__stack+0x313>
    13e8:	18 f4       	brcc	.+6      	; 0x13f0 <__stack+0x2f1>
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	31 f0       	breq	.+12     	; 0x13fa <__stack+0x2fb>
    13ee:	45 c0       	rjmp	.+138    	; 0x147a <__stack+0x37b>
    13f0:	85 30       	cpi	r24, 0x05	; 5
    13f2:	d9 f0       	breq	.+54     	; 0x142a <__stack+0x32b>
    13f4:	86 30       	cpi	r24, 0x06	; 6
    13f6:	29 f1       	breq	.+74     	; 0x1442 <__stack+0x343>
    13f8:	40 c0       	rjmp	.+128    	; 0x147a <__stack+0x37b>
      case LSB:
	mode = USB;
    13fa:	83 e0       	ldi	r24, 0x03	; 3
    13fc:	80 93 2e 02 	sts	0x022E, r24
	if (!updateSettings()) { 
    1400:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <updateSettings>
    1404:	81 11       	cpse	r24, r1
    1406:	4a c0       	rjmp	.+148    	; 0x149c <__stack+0x39d>
	  lcd_goto(0x00);
    1408:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	  sprintf(buffer,"USB ");
    140c:	68 e8       	ldi	r22, 0x88	; 136
    140e:	71 e0       	ldi	r23, 0x01	; 1
    1410:	3f c0       	rjmp	.+126    	; 0x1490 <__stack+0x391>
	  lcd_puts(buffer);
	}
	break;
      case USB:
	mode = CW;
    1412:	85 e0       	ldi	r24, 0x05	; 5
    1414:	80 93 2e 02 	sts	0x022E, r24
	if(!updateSettings()) {
    1418:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <updateSettings>
    141c:	81 11       	cpse	r24, r1
    141e:	3e c0       	rjmp	.+124    	; 0x149c <__stack+0x39d>
	  lcd_goto(0x00);
    1420:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	  sprintf(buffer,"CW  ");
    1424:	6d e8       	ldi	r22, 0x8D	; 141
    1426:	71 e0       	ldi	r23, 0x01	; 1
    1428:	33 c0       	rjmp	.+102    	; 0x1490 <__stack+0x391>
	  lcd_puts(buffer);
	}
	break;
      case CW:
	mode = CWN;
    142a:	86 e0       	ldi	r24, 0x06	; 6
    142c:	80 93 2e 02 	sts	0x022E, r24
	if(!updateSettings()) {
    1430:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <updateSettings>
    1434:	81 11       	cpse	r24, r1
    1436:	32 c0       	rjmp	.+100    	; 0x149c <__stack+0x39d>
	  lcd_goto(0x00);
    1438:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	  sprintf(buffer,"CWN ");
    143c:	62 e9       	ldi	r22, 0x92	; 146
    143e:	71 e0       	ldi	r23, 0x01	; 1
    1440:	27 c0       	rjmp	.+78     	; 0x1490 <__stack+0x391>
	  lcd_puts(buffer);
	}
	break;
      case CWN:
	if (band < 200) {
    1442:	80 91 22 02 	lds	r24, 0x0222
    1446:	88 3c       	cpi	r24, 0xC8	; 200
    1448:	60 f4       	brcc	.+24     	; 0x1462 <__stack+0x363>
	  mode = AM;
    144a:	88 e0       	ldi	r24, 0x08	; 8
    144c:	80 93 2e 02 	sts	0x022E, r24
	  if(!updateSettings()) {
    1450:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <updateSettings>
    1454:	81 11       	cpse	r24, r1
    1456:	22 c0       	rjmp	.+68     	; 0x149c <__stack+0x39d>
	    lcd_goto(0x00);
    1458:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	    sprintf(buffer,"AM  ");
    145c:	67 e9       	ldi	r22, 0x97	; 151
    145e:	71 e0       	ldi	r23, 0x01	; 1
    1460:	17 c0       	rjmp	.+46     	; 0x1490 <__stack+0x391>
	    lcd_puts(buffer);
	  }
	}
	else {
	  mode = FM;
    1462:	8a e0       	ldi	r24, 0x0A	; 10
    1464:	80 93 2e 02 	sts	0x022E, r24
	  if(!updateSettings()) {
    1468:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <updateSettings>
    146c:	81 11       	cpse	r24, r1
    146e:	16 c0       	rjmp	.+44     	; 0x149c <__stack+0x39d>
	    lcd_goto(0x00);
    1470:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	    sprintf(buffer,"FM  ");
    1474:	6c e9       	ldi	r22, 0x9C	; 156
    1476:	71 e0       	ldi	r23, 0x01	; 1
    1478:	0b c0       	rjmp	.+22     	; 0x1490 <__stack+0x391>
	}	  
	break;
      case AM:
      case FM:
      default:
	mode = LSB;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	80 93 2e 02 	sts	0x022E, r24
	if(!updateSettings()) { 
    1480:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <updateSettings>
    1484:	81 11       	cpse	r24, r1
    1486:	0a c0       	rjmp	.+20     	; 0x149c <__stack+0x39d>
	  lcd_goto(0x00);
    1488:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	  sprintf(buffer,"LSB ");
    148c:	61 ea       	ldi	r22, 0xA1	; 161
    148e:	71 e0       	ldi	r23, 0x01	; 1
    1490:	c8 01       	movw	r24, r16
    1492:	0e 94 42 15 	call	0x2a84	; 0x2a84 <strcpy>
	  lcd_puts(buffer);
    1496:	c8 01       	movw	r24, r16
    1498:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
    149c:	83 e2       	ldi	r24, 0x23	; 35
    149e:	94 ef       	ldi	r25, 0xF4	; 244
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <__stack+0x3a1>
    14a4:	00 c0       	rjmp	.+0      	; 0x14a6 <__stack+0x3a7>
    14a6:	00 00       	nop
	}
	break;
      }
      _delay_ms(250);
      err = updateFreq(1);  // To shift +/-
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <updateFreq>
      mode_flag = 0x00;
    14ae:	10 92 25 02 	sts	0x0225, r1
    }

    if (band_flag) {
    14b2:	80 91 27 02 	lds	r24, 0x0227
    14b6:	88 23       	and	r24, r24
    14b8:	09 f4       	brne	.+2      	; 0x14bc <__stack+0x3bd>
    14ba:	12 c1       	rjmp	.+548    	; 0x16e0 <__stack+0x5e1>
      if (band_flag == 0x02) { // long press
    14bc:	80 91 27 02 	lds	r24, 0x0227
    14c0:	82 30       	cpi	r24, 0x02	; 2
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <__stack+0x3c7>
    14c4:	cd c0       	rjmp	.+410    	; 0x1660 <__stack+0x561>
	}
#endif
      }
      else {
#ifdef HF_HAM
	if (freq<3500)
    14c6:	60 91 28 02 	lds	r22, 0x0228
    14ca:	70 91 29 02 	lds	r23, 0x0229
    14ce:	80 91 2a 02 	lds	r24, 0x022A
    14d2:	90 91 2b 02 	lds	r25, 0x022B
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 ec       	ldi	r19, 0xC0	; 192
    14da:	4a e5       	ldi	r20, 0x5A	; 90
    14dc:	55 e4       	ldi	r21, 0x45	; 69
    14de:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    14e2:	87 ff       	sbrs	r24, 7
    14e4:	09 c0       	rjmp	.+18     	; 0x14f8 <__stack+0x3f9>
	  freq = 3510;
    14e6:	40 92 28 02 	sts	0x0228, r4
    14ea:	50 92 29 02 	sts	0x0229, r5
    14ee:	60 92 2a 02 	sts	0x022A, r6
    14f2:	70 92 2b 02 	sts	0x022B, r7
    14f6:	b4 c0       	rjmp	.+360    	; 0x1660 <__stack+0x561>
	else if(freq<7000)
    14f8:	60 91 28 02 	lds	r22, 0x0228
    14fc:	70 91 29 02 	lds	r23, 0x0229
    1500:	80 91 2a 02 	lds	r24, 0x022A
    1504:	90 91 2b 02 	lds	r25, 0x022B
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 ec       	ldi	r19, 0xC0	; 192
    150c:	4a ed       	ldi	r20, 0xDA	; 218
    150e:	55 e4       	ldi	r21, 0x45	; 69
    1510:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    1514:	87 ff       	sbrs	r24, 7
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <__stack+0x423>
	  freq = 7010;
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e1       	ldi	r25, 0x10	; 16
    151c:	ab ed       	ldi	r26, 0xDB	; 219
    151e:	b5 e4       	ldi	r27, 0x45	; 69
    1520:	97 c0       	rjmp	.+302    	; 0x1650 <__stack+0x551>
	else if(freq<10100)
    1522:	60 91 28 02 	lds	r22, 0x0228
    1526:	70 91 29 02 	lds	r23, 0x0229
    152a:	80 91 2a 02 	lds	r24, 0x022A
    152e:	90 91 2b 02 	lds	r25, 0x022B
    1532:	20 e0       	ldi	r18, 0x00	; 0
    1534:	30 ed       	ldi	r19, 0xD0	; 208
    1536:	4d e1       	ldi	r20, 0x1D	; 29
    1538:	56 e4       	ldi	r21, 0x46	; 70
    153a:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    153e:	87 ff       	sbrs	r24, 7
    1540:	05 c0       	rjmp	.+10     	; 0x154c <__stack+0x44d>
	  freq = 10110;
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	98 ef       	ldi	r25, 0xF8	; 248
    1546:	ad e1       	ldi	r26, 0x1D	; 29
    1548:	b6 e4       	ldi	r27, 0x46	; 70
    154a:	82 c0       	rjmp	.+260    	; 0x1650 <__stack+0x551>
	else if(freq<14000)
    154c:	60 91 28 02 	lds	r22, 0x0228
    1550:	70 91 29 02 	lds	r23, 0x0229
    1554:	80 91 2a 02 	lds	r24, 0x022A
    1558:	90 91 2b 02 	lds	r25, 0x022B
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 ec       	ldi	r19, 0xC0	; 192
    1560:	4a e5       	ldi	r20, 0x5A	; 90
    1562:	56 e4       	ldi	r21, 0x46	; 70
    1564:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    1568:	87 ff       	sbrs	r24, 7
    156a:	05 c0       	rjmp	.+10     	; 0x1576 <__stack+0x477>
	  freq = 14010;
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	98 ee       	ldi	r25, 0xE8	; 232
    1570:	aa e5       	ldi	r26, 0x5A	; 90
    1572:	b6 e4       	ldi	r27, 0x46	; 70
    1574:	6d c0       	rjmp	.+218    	; 0x1650 <__stack+0x551>
	else if(freq<18068)
    1576:	60 91 28 02 	lds	r22, 0x0228
    157a:	70 91 29 02 	lds	r23, 0x0229
    157e:	80 91 2a 02 	lds	r24, 0x022A
    1582:	90 91 2b 02 	lds	r25, 0x022B
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	38 e2       	ldi	r19, 0x28	; 40
    158a:	4d e8       	ldi	r20, 0x8D	; 141
    158c:	56 e4       	ldi	r21, 0x46	; 70
    158e:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    1592:	87 ff       	sbrs	r24, 7
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <__stack+0x4a1>
	  freq = 18078;
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	9c e3       	ldi	r25, 0x3C	; 60
    159a:	ad e8       	ldi	r26, 0x8D	; 141
    159c:	b6 e4       	ldi	r27, 0x46	; 70
    159e:	58 c0       	rjmp	.+176    	; 0x1650 <__stack+0x551>
	else if(freq<21000)
    15a0:	60 91 28 02 	lds	r22, 0x0228
    15a4:	70 91 29 02 	lds	r23, 0x0229
    15a8:	80 91 2a 02 	lds	r24, 0x022A
    15ac:	90 91 2b 02 	lds	r25, 0x022B
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e1       	ldi	r19, 0x10	; 16
    15b4:	44 ea       	ldi	r20, 0xA4	; 164
    15b6:	56 e4       	ldi	r21, 0x46	; 70
    15b8:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    15bc:	87 ff       	sbrs	r24, 7
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <__stack+0x4cb>
	  freq = 21010;
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	94 e2       	ldi	r25, 0x24	; 36
    15c4:	a4 ea       	ldi	r26, 0xA4	; 164
    15c6:	b6 e4       	ldi	r27, 0x46	; 70
    15c8:	43 c0       	rjmp	.+134    	; 0x1650 <__stack+0x551>
	else if(freq<24890)
    15ca:	60 91 28 02 	lds	r22, 0x0228
    15ce:	70 91 29 02 	lds	r23, 0x0229
    15d2:	80 91 2a 02 	lds	r24, 0x022A
    15d6:	90 91 2b 02 	lds	r25, 0x022B
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	34 e7       	ldi	r19, 0x74	; 116
    15de:	42 ec       	ldi	r20, 0xC2	; 194
    15e0:	56 e4       	ldi	r21, 0x46	; 70
    15e2:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    15e6:	87 ff       	sbrs	r24, 7
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <__stack+0x4f5>
	  freq = 24900;
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	98 e8       	ldi	r25, 0x88	; 136
    15ee:	a2 ec       	ldi	r26, 0xC2	; 194
    15f0:	b6 e4       	ldi	r27, 0x46	; 70
    15f2:	2e c0       	rjmp	.+92     	; 0x1650 <__stack+0x551>
	else if(freq<28000)
    15f4:	60 91 28 02 	lds	r22, 0x0228
    15f8:	70 91 29 02 	lds	r23, 0x0229
    15fc:	80 91 2a 02 	lds	r24, 0x022A
    1600:	90 91 2b 02 	lds	r25, 0x022B
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 ec       	ldi	r19, 0xC0	; 192
    1608:	4a ed       	ldi	r20, 0xDA	; 218
    160a:	56 e4       	ldi	r21, 0x46	; 70
    160c:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    1610:	87 ff       	sbrs	r24, 7
    1612:	05 c0       	rjmp	.+10     	; 0x161e <__stack+0x51f>
	  freq = 28010;
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	94 ed       	ldi	r25, 0xD4	; 212
    1618:	aa ed       	ldi	r26, 0xDA	; 218
    161a:	b6 e4       	ldi	r27, 0x46	; 70
    161c:	19 c0       	rjmp	.+50     	; 0x1650 <__stack+0x551>
	else if(freq<28500)
    161e:	60 91 28 02 	lds	r22, 0x0228
    1622:	70 91 29 02 	lds	r23, 0x0229
    1626:	80 91 2a 02 	lds	r24, 0x022A
    162a:	90 91 2b 02 	lds	r25, 0x022B
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	38 ea       	ldi	r19, 0xA8	; 168
    1632:	4e ed       	ldi	r20, 0xDE	; 222
    1634:	56 e4       	ldi	r21, 0x46	; 70
    1636:	0e 94 bc 11 	call	0x2378	; 0x2378 <__cmpsf2>
    163a:	87 ff       	sbrs	r24, 7
    163c:	05 c0       	rjmp	.+10     	; 0x1648 <__stack+0x549>
	  freq = 28600;
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e7       	ldi	r25, 0x70	; 112
    1642:	af ed       	ldi	r26, 0xDF	; 223
    1644:	b6 e4       	ldi	r27, 0x46	; 70
    1646:	04 c0       	rjmp	.+8      	; 0x1650 <__stack+0x551>
	else
	  freq = 1810;
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e4       	ldi	r25, 0x40	; 64
    164c:	a2 ee       	ldi	r26, 0xE2	; 226
    164e:	b4 e4       	ldi	r27, 0x44	; 68
    1650:	80 93 28 02 	sts	0x0228, r24
    1654:	90 93 29 02 	sts	0x0229, r25
    1658:	a0 93 2a 02 	sts	0x022A, r26
    165c:	b0 93 2b 02 	sts	0x022B, r27
      else if(freq<150000)
	freq = 144200;
#endif
      }

      lcd_freq();
    1660:	0e 94 0c 04 	call	0x818	; 0x818 <lcd_freq>
      err = updateFreq(1);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <updateFreq>
      if (err) {
    166a:	88 23       	and	r24, r24
    166c:	b1 f0       	breq	.+44     	; 0x169a <__stack+0x59b>
	sprintf(buffer,"Err freq %x         ",err);
    166e:	1f 92       	push	r1
    1670:	8f 93       	push	r24
    1672:	86 ea       	ldi	r24, 0xA6	; 166
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	9f 93       	push	r25
    1678:	8f 93       	push	r24
    167a:	1f 93       	push	r17
    167c:	0f 93       	push	r16
    167e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <sprintf>
	lcd_goto(0x40);
    1682:	80 e4       	ldi	r24, 0x40	; 64
    1684:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	lcd_puts(buffer);	
    1688:	c8 01       	movw	r24, r16
    168a:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
      }      
      err = updateSettings();
    169a:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <updateSettings>
      if (err) {
    169e:	88 23       	and	r24, r24
    16a0:	b1 f0       	breq	.+44     	; 0x16ce <__stack+0x5cf>
	sprintf(buffer,"Err sett %x         ",err);
    16a2:	1f 92       	push	r1
    16a4:	8f 93       	push	r24
    16a6:	8b eb       	ldi	r24, 0xBB	; 187
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	9f 93       	push	r25
    16ac:	8f 93       	push	r24
    16ae:	1f 93       	push	r17
    16b0:	0f 93       	push	r16
    16b2:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <sprintf>
	lcd_goto(0x40);
    16b6:	80 e4       	ldi	r24, 0x40	; 64
    16b8:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	lcd_puts(buffer);	
    16bc:	c8 01       	movw	r24, r16
    16be:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	af e4       	ldi	r26, 0x4F	; 79
    16d0:	b3 ec       	ldi	r27, 0xC3	; 195
    16d2:	11 97       	sbiw	r26, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <__stack+0x5d3>
    16d6:	00 c0       	rjmp	.+0      	; 0x16d8 <__stack+0x5d9>
    16d8:	00 00       	nop
      }      
      _delay_ms(200);
      band_flag = 0x00;
    16da:	10 92 27 02 	sts	0x0227, r1
    16de:	24 cd       	rjmp	.-1464   	; 0x1128 <__stack+0x29>
    }
    else if (rot_flag) {
    16e0:	80 91 2c 02 	lds	r24, 0x022C
    16e4:	88 23       	and	r24, r24
    16e6:	09 f4       	brne	.+2      	; 0x16ea <__stack+0x5eb>
    16e8:	ae c1       	rjmp	.+860    	; 0x1a46 <__stack+0x947>
      if (rot_flag != last_dir) {
    16ea:	80 91 2c 02 	lds	r24, 0x022C
    16ee:	bf ad       	ldd	r27, Y+63	; 0x3f
    16f0:	8b 17       	cp	r24, r27
    16f2:	49 f0       	breq	.+18     	; 0x1706 <__stack+0x607>
	steps = 0;
	step_timer = 0;
    16f4:	10 92 33 02 	sts	0x0233, r1
    16f8:	10 92 32 02 	sts	0x0232, r1
	last_dir = rot_flag;
    16fc:	80 91 2c 02 	lds	r24, 0x022C
      _delay_ms(200);
      band_flag = 0x00;
    }
    else if (rot_flag) {
      if (rot_flag != last_dir) {
	steps = 0;
    1700:	c1 2c       	mov	r12, r1
    1702:	d1 2c       	mov	r13, r1
    1704:	9c c1       	rjmp	.+824    	; 0x1a3e <__stack+0x93f>
	step_timer = 0;
	last_dir = rot_flag;
      }
      else if (rot_flag == 0x01) {
    1706:	90 91 2c 02 	lds	r25, 0x022C
    170a:	91 30       	cpi	r25, 0x01	; 1
    170c:	09 f0       	breq	.+2      	; 0x1710 <__stack+0x611>
    170e:	c5 c0       	rjmp	.+394    	; 0x189a <__stack+0x79b>
	if (step_timer < 30) {
    1710:	80 91 32 02 	lds	r24, 0x0232
    1714:	90 91 33 02 	lds	r25, 0x0233
	  step_timer = 0;
    1718:	10 92 33 02 	sts	0x0233, r1
    171c:	10 92 32 02 	sts	0x0232, r1
	steps = 0;
	step_timer = 0;
	last_dir = rot_flag;
      }
      else if (rot_flag == 0x01) {
	if (step_timer < 30) {
    1720:	4e 97       	sbiw	r24, 0x1e	; 30
    1722:	48 f4       	brcc	.+18     	; 0x1736 <__stack+0x637>
	  step_timer = 0;
	  steps ++;
    1724:	2f ef       	ldi	r18, 0xFF	; 255
    1726:	c2 1a       	sub	r12, r18
    1728:	d2 0a       	sbc	r13, r18
	else {
	  step_timer = 0;
	  steps = 1;
	}
	
	if (steps > 500) {
    172a:	85 ef       	ldi	r24, 0xF5	; 245
    172c:	c8 16       	cp	r12, r24
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	d8 06       	cpc	r13, r24
    1732:	28 f4       	brcc	.+10     	; 0x173e <__stack+0x63f>
    1734:	27 c0       	rjmp	.+78     	; 0x1784 <__stack+0x685>
	  step_timer = 0;
	  steps ++;
	}
	else {
	  step_timer = 0;
	  steps = 1;
    1736:	cc 24       	eor	r12, r12
    1738:	c3 94       	inc	r12
    173a:	d1 2c       	mov	r13, r1
    173c:	56 c0       	rjmp	.+172    	; 0x17ea <__stack+0x6eb>
	}
	
	if (steps > 500) {
	  if (mode == AM)
    173e:	80 91 2e 02 	lds	r24, 0x022E
    1742:	88 30       	cpi	r24, 0x08	; 8
    1744:	69 f4       	brne	.+26     	; 0x1760 <__stack+0x661>
	    freq += 20;
    1746:	60 91 28 02 	lds	r22, 0x0228
    174a:	70 91 29 02 	lds	r23, 0x0229
    174e:	80 91 2a 02 	lds	r24, 0x022A
    1752:	90 91 2b 02 	lds	r25, 0x022B
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 ea       	ldi	r20, 0xA0	; 160
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	91 c0       	rjmp	.+290    	; 0x1882 <__stack+0x783>
	  else if (mode == FM)
    1760:	80 91 2e 02 	lds	r24, 0x022E
    1764:	8a 30       	cpi	r24, 0x0A	; 10
    1766:	09 f0       	breq	.+2      	; 0x176a <__stack+0x66b>
    1768:	46 c0       	rjmp	.+140    	; 0x17f6 <__stack+0x6f7>
	    freq += 50;
    176a:	60 91 28 02 	lds	r22, 0x0228
    176e:	70 91 29 02 	lds	r23, 0x0229
    1772:	80 91 2a 02 	lds	r24, 0x022A
    1776:	90 91 2b 02 	lds	r25, 0x022B
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	48 e4       	ldi	r20, 0x48	; 72
    1780:	52 e4       	ldi	r21, 0x42	; 66
    1782:	7f c0       	rjmp	.+254    	; 0x1882 <__stack+0x783>
	  else
	    freq += 1;
	}
	else if (steps > 150) {
    1784:	97 e9       	ldi	r25, 0x97	; 151
    1786:	c9 16       	cp	r12, r25
    1788:	d1 04       	cpc	r13, r1
    178a:	78 f1       	brcs	.+94     	; 0x17ea <__stack+0x6eb>
	  if (mode == AM)
    178c:	80 91 2e 02 	lds	r24, 0x022E
    1790:	88 30       	cpi	r24, 0x08	; 8
    1792:	69 f4       	brne	.+26     	; 0x17ae <__stack+0x6af>
	    freq += 5;
    1794:	60 91 28 02 	lds	r22, 0x0228
    1798:	70 91 29 02 	lds	r23, 0x0229
    179c:	80 91 2a 02 	lds	r24, 0x022A
    17a0:	90 91 2b 02 	lds	r25, 0x022B
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 ea       	ldi	r20, 0xA0	; 160
    17aa:	50 e4       	ldi	r21, 0x40	; 64
    17ac:	6a c0       	rjmp	.+212    	; 0x1882 <__stack+0x783>
	  else if (mode == FM)
    17ae:	80 91 2e 02 	lds	r24, 0x022E
    17b2:	8a 30       	cpi	r24, 0x0A	; 10
    17b4:	69 f4       	brne	.+26     	; 0x17d0 <__stack+0x6d1>
	    freq += 25;
    17b6:	60 91 28 02 	lds	r22, 0x0228
    17ba:	70 91 29 02 	lds	r23, 0x0229
    17be:	80 91 2a 02 	lds	r24, 0x022A
    17c2:	90 91 2b 02 	lds	r25, 0x022B
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	48 ec       	ldi	r20, 0xC8	; 200
    17cc:	51 e4       	ldi	r21, 0x41	; 65
    17ce:	59 c0       	rjmp	.+178    	; 0x1882 <__stack+0x783>
	  else
	    freq += 0.5;
    17d0:	60 91 28 02 	lds	r22, 0x0228
    17d4:	70 91 29 02 	lds	r23, 0x0229
    17d8:	80 91 2a 02 	lds	r24, 0x022A
    17dc:	90 91 2b 02 	lds	r25, 0x022B
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	4c c0       	rjmp	.+152    	; 0x1882 <__stack+0x783>
	}
	else {
	  if (mode == AM) {
    17ea:	80 91 2e 02 	lds	r24, 0x022E
    17ee:	88 30       	cpi	r24, 0x08	; 8
    17f0:	e1 f4       	brne	.+56     	; 0x182a <__stack+0x72b>
	    if (PINE & (1 << ROT_BUTTON)) 
    17f2:	0b 9b       	sbis	0x01, 3	; 1
    17f4:	0d c0       	rjmp	.+26     	; 0x1810 <__stack+0x711>
		freq += 1;
    17f6:	60 91 28 02 	lds	r22, 0x0228
    17fa:	70 91 29 02 	lds	r23, 0x0229
    17fe:	80 91 2a 02 	lds	r24, 0x022A
    1802:	90 91 2b 02 	lds	r25, 0x022B
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	39 c0       	rjmp	.+114    	; 0x1882 <__stack+0x783>
	    else
	      freq += 10;
    1810:	60 91 28 02 	lds	r22, 0x0228
    1814:	70 91 29 02 	lds	r23, 0x0229
    1818:	80 91 2a 02 	lds	r24, 0x022A
    181c:	90 91 2b 02 	lds	r25, 0x022B
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e2       	ldi	r20, 0x20	; 32
    1826:	51 e4       	ldi	r21, 0x41	; 65
    1828:	2c c0       	rjmp	.+88     	; 0x1882 <__stack+0x783>
	  }
	  else if (mode == FM)
    182a:	80 91 2e 02 	lds	r24, 0x022E
    182e:	8a 30       	cpi	r24, 0x0A	; 10
    1830:	69 f4       	brne	.+26     	; 0x184c <__stack+0x74d>
	    freq += 2.5;
    1832:	60 91 28 02 	lds	r22, 0x0228
    1836:	70 91 29 02 	lds	r23, 0x0229
    183a:	80 91 2a 02 	lds	r24, 0x022A
    183e:	90 91 2b 02 	lds	r25, 0x022B
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e2       	ldi	r20, 0x20	; 32
    1848:	50 e4       	ldi	r21, 0x40	; 64
    184a:	1b c0       	rjmp	.+54     	; 0x1882 <__stack+0x783>
	  else {
	    if (PINE & (1 << ROT_BUTTON)) 
    184c:	0b 9b       	sbis	0x01, 3	; 1
    184e:	0d c0       	rjmp	.+26     	; 0x186a <__stack+0x76b>
		freq += 0.05;
    1850:	60 91 28 02 	lds	r22, 0x0228
    1854:	70 91 29 02 	lds	r23, 0x0229
    1858:	80 91 2a 02 	lds	r24, 0x022A
    185c:	90 91 2b 02 	lds	r25, 0x022B
    1860:	2d ec       	ldi	r18, 0xCD	; 205
    1862:	3c ec       	ldi	r19, 0xCC	; 204
    1864:	4c e4       	ldi	r20, 0x4C	; 76
    1866:	5d e3       	ldi	r21, 0x3D	; 61
    1868:	0c c0       	rjmp	.+24     	; 0x1882 <__stack+0x783>
	    else
	      freq += 2;
    186a:	60 91 28 02 	lds	r22, 0x0228
    186e:	70 91 29 02 	lds	r23, 0x0229
    1872:	80 91 2a 02 	lds	r24, 0x022A
    1876:	90 91 2b 02 	lds	r25, 0x022B
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	50 e4       	ldi	r21, 0x40	; 64
    1882:	0e 94 50 11 	call	0x22a0	; 0x22a0 <__addsf3>
    1886:	60 93 28 02 	sts	0x0228, r22
    188a:	70 93 29 02 	sts	0x0229, r23
    188e:	80 93 2a 02 	sts	0x022A, r24
    1892:	90 93 2b 02 	sts	0x022B, r25
	  }
	}
	last_dir = 0x01;
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	d2 c0       	rjmp	.+420    	; 0x1a3e <__stack+0x93f>
      }
      else if (rot_flag == 0x02) {
    189a:	90 91 2c 02 	lds	r25, 0x022C
    189e:	92 30       	cpi	r25, 0x02	; 2
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <__stack+0x7a5>
    18a2:	cd c0       	rjmp	.+410    	; 0x1a3e <__stack+0x93f>
	if ((step_timer < 30) && (last_dir == rot_flag)) {
    18a4:	80 91 32 02 	lds	r24, 0x0232
    18a8:	90 91 33 02 	lds	r25, 0x0233
    18ac:	4e 97       	sbiw	r24, 0x1e	; 30
    18ae:	90 f4       	brcc	.+36     	; 0x18d4 <__stack+0x7d5>
    18b0:	80 91 2c 02 	lds	r24, 0x022C
    18b4:	af ad       	ldd	r26, Y+63	; 0x3f
    18b6:	a8 13       	cpse	r26, r24
    18b8:	0d c0       	rjmp	.+26     	; 0x18d4 <__stack+0x7d5>
	  step_timer = 0;
    18ba:	10 92 33 02 	sts	0x0233, r1
    18be:	10 92 32 02 	sts	0x0232, r1
	  steps ++;
    18c2:	bf ef       	ldi	r27, 0xFF	; 255
    18c4:	cb 1a       	sub	r12, r27
    18c6:	db 0a       	sbc	r13, r27
	else {
	  step_timer = 0;
	  steps = 1;
	}
	
	if (steps > 500) {
    18c8:	25 ef       	ldi	r18, 0xF5	; 245
    18ca:	c2 16       	cp	r12, r18
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	d2 06       	cpc	r13, r18
    18d0:	48 f4       	brcc	.+18     	; 0x18e4 <__stack+0x7e5>
    18d2:	2b c0       	rjmp	.+86     	; 0x192a <__stack+0x82b>
	if ((step_timer < 30) && (last_dir == rot_flag)) {
	  step_timer = 0;
	  steps ++;
	}
	else {
	  step_timer = 0;
    18d4:	10 92 33 02 	sts	0x0233, r1
    18d8:	10 92 32 02 	sts	0x0232, r1
	  steps = 1;
    18dc:	cc 24       	eor	r12, r12
    18de:	c3 94       	inc	r12
    18e0:	d1 2c       	mov	r13, r1
    18e2:	56 c0       	rjmp	.+172    	; 0x1990 <__stack+0x891>
	}
	
	if (steps > 500) {
	  if (mode == AM)
    18e4:	80 91 2e 02 	lds	r24, 0x022E
    18e8:	88 30       	cpi	r24, 0x08	; 8
    18ea:	69 f4       	brne	.+26     	; 0x1906 <__stack+0x807>
	    freq -= 20;
    18ec:	60 91 28 02 	lds	r22, 0x0228
    18f0:	70 91 29 02 	lds	r23, 0x0229
    18f4:	80 91 2a 02 	lds	r24, 0x022A
    18f8:	90 91 2b 02 	lds	r25, 0x022B
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 ea       	ldi	r20, 0xA0	; 160
    1902:	51 e4       	ldi	r21, 0x41	; 65
    1904:	91 c0       	rjmp	.+290    	; 0x1a28 <__stack+0x929>
	  else if (mode == FM)
    1906:	80 91 2e 02 	lds	r24, 0x022E
    190a:	8a 30       	cpi	r24, 0x0A	; 10
    190c:	09 f0       	breq	.+2      	; 0x1910 <__stack+0x811>
    190e:	46 c0       	rjmp	.+140    	; 0x199c <__stack+0x89d>
	    freq -= 50;
    1910:	60 91 28 02 	lds	r22, 0x0228
    1914:	70 91 29 02 	lds	r23, 0x0229
    1918:	80 91 2a 02 	lds	r24, 0x022A
    191c:	90 91 2b 02 	lds	r25, 0x022B
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	48 e4       	ldi	r20, 0x48	; 72
    1926:	52 e4       	ldi	r21, 0x42	; 66
    1928:	7f c0       	rjmp	.+254    	; 0x1a28 <__stack+0x929>
	  else
	    freq -= 1;
	}
	else if (steps > 150) {
    192a:	87 e9       	ldi	r24, 0x97	; 151
    192c:	c8 16       	cp	r12, r24
    192e:	d1 04       	cpc	r13, r1
    1930:	78 f1       	brcs	.+94     	; 0x1990 <__stack+0x891>
	  if (mode == AM)
    1932:	80 91 2e 02 	lds	r24, 0x022E
    1936:	88 30       	cpi	r24, 0x08	; 8
    1938:	69 f4       	brne	.+26     	; 0x1954 <__stack+0x855>
	    freq -= 5;
    193a:	60 91 28 02 	lds	r22, 0x0228
    193e:	70 91 29 02 	lds	r23, 0x0229
    1942:	80 91 2a 02 	lds	r24, 0x022A
    1946:	90 91 2b 02 	lds	r25, 0x022B
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 ea       	ldi	r20, 0xA0	; 160
    1950:	50 e4       	ldi	r21, 0x40	; 64
    1952:	6a c0       	rjmp	.+212    	; 0x1a28 <__stack+0x929>
	  else if (mode == FM)
    1954:	80 91 2e 02 	lds	r24, 0x022E
    1958:	8a 30       	cpi	r24, 0x0A	; 10
    195a:	69 f4       	brne	.+26     	; 0x1976 <__stack+0x877>
	    freq -= 25;
    195c:	60 91 28 02 	lds	r22, 0x0228
    1960:	70 91 29 02 	lds	r23, 0x0229
    1964:	80 91 2a 02 	lds	r24, 0x022A
    1968:	90 91 2b 02 	lds	r25, 0x022B
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	48 ec       	ldi	r20, 0xC8	; 200
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	59 c0       	rjmp	.+178    	; 0x1a28 <__stack+0x929>
	  else
	    freq -= 0.5;
    1976:	60 91 28 02 	lds	r22, 0x0228
    197a:	70 91 29 02 	lds	r23, 0x0229
    197e:	80 91 2a 02 	lds	r24, 0x022A
    1982:	90 91 2b 02 	lds	r25, 0x022B
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	5f e3       	ldi	r21, 0x3F	; 63
    198e:	4c c0       	rjmp	.+152    	; 0x1a28 <__stack+0x929>
	}
	else {
	  if (mode == AM) {
    1990:	80 91 2e 02 	lds	r24, 0x022E
    1994:	88 30       	cpi	r24, 0x08	; 8
    1996:	e1 f4       	brne	.+56     	; 0x19d0 <__stack+0x8d1>
	    if (PINE & (1 << ROT_BUTTON)) 
    1998:	0b 9b       	sbis	0x01, 3	; 1
    199a:	0d c0       	rjmp	.+26     	; 0x19b6 <__stack+0x8b7>
		freq -= 1;
    199c:	60 91 28 02 	lds	r22, 0x0228
    19a0:	70 91 29 02 	lds	r23, 0x0229
    19a4:	80 91 2a 02 	lds	r24, 0x022A
    19a8:	90 91 2b 02 	lds	r25, 0x022B
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	39 c0       	rjmp	.+114    	; 0x1a28 <__stack+0x929>
	    else
	      freq -= 10;
    19b6:	60 91 28 02 	lds	r22, 0x0228
    19ba:	70 91 29 02 	lds	r23, 0x0229
    19be:	80 91 2a 02 	lds	r24, 0x022A
    19c2:	90 91 2b 02 	lds	r25, 0x022B
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e2       	ldi	r20, 0x20	; 32
    19cc:	51 e4       	ldi	r21, 0x41	; 65
    19ce:	2c c0       	rjmp	.+88     	; 0x1a28 <__stack+0x929>
	  }
	  else if (mode == FM)
    19d0:	80 91 2e 02 	lds	r24, 0x022E
    19d4:	8a 30       	cpi	r24, 0x0A	; 10
    19d6:	69 f4       	brne	.+26     	; 0x19f2 <__stack+0x8f3>
	    freq -= 2.5;
    19d8:	60 91 28 02 	lds	r22, 0x0228
    19dc:	70 91 29 02 	lds	r23, 0x0229
    19e0:	80 91 2a 02 	lds	r24, 0x022A
    19e4:	90 91 2b 02 	lds	r25, 0x022B
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e2       	ldi	r20, 0x20	; 32
    19ee:	50 e4       	ldi	r21, 0x40	; 64
    19f0:	1b c0       	rjmp	.+54     	; 0x1a28 <__stack+0x929>
	  else {
	    if (PINE & (1 << ROT_BUTTON)) 
    19f2:	0b 9b       	sbis	0x01, 3	; 1
    19f4:	0d c0       	rjmp	.+26     	; 0x1a10 <__stack+0x911>
		freq -= 0.05;
    19f6:	60 91 28 02 	lds	r22, 0x0228
    19fa:	70 91 29 02 	lds	r23, 0x0229
    19fe:	80 91 2a 02 	lds	r24, 0x022A
    1a02:	90 91 2b 02 	lds	r25, 0x022B
    1a06:	2d ec       	ldi	r18, 0xCD	; 205
    1a08:	3c ec       	ldi	r19, 0xCC	; 204
    1a0a:	4c e4       	ldi	r20, 0x4C	; 76
    1a0c:	5d e3       	ldi	r21, 0x3D	; 61
    1a0e:	0c c0       	rjmp	.+24     	; 0x1a28 <__stack+0x929>
	    else
	      freq -= 2;
    1a10:	60 91 28 02 	lds	r22, 0x0228
    1a14:	70 91 29 02 	lds	r23, 0x0229
    1a18:	80 91 2a 02 	lds	r24, 0x022A
    1a1c:	90 91 2b 02 	lds	r25, 0x022B
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	50 e4       	ldi	r21, 0x40	; 64
    1a28:	0e 94 4f 11 	call	0x229e	; 0x229e <__subsf3>
    1a2c:	60 93 28 02 	sts	0x0228, r22
    1a30:	70 93 29 02 	sts	0x0229, r23
    1a34:	80 93 2a 02 	sts	0x022A, r24
    1a38:	90 93 2b 02 	sts	0x022B, r25
	  }
	}
      last_dir = 0x02;
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
      }
      //_delay_ms(30);

      rot_flag = 0x00;
    1a3e:	10 92 2c 02 	sts	0x022C, r1
    1a42:	8f af       	std	Y+63, r24	; 0x3f
    1a44:	71 cb       	rjmp	.-2334   	; 0x1128 <__stack+0x29>
    }
    else if (vol_flag) {
    1a46:	80 91 2d 02 	lds	r24, 0x022D
    1a4a:	88 23       	and	r24, r24
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <__stack+0x951>
    1a4e:	6c cb       	rjmp	.-2344   	; 0x1128 <__stack+0x29>
      if (vol_timer > 1) {
    1a50:	80 91 00 01 	lds	r24, 0x0100
    1a54:	82 30       	cpi	r24, 0x02	; 2
    1a56:	08 f4       	brcc	.+2      	; 0x1a5a <__stack+0x95b>
    1a58:	7a c0       	rjmp	.+244    	; 0x1b4e <__stack+0xa4f>
	if (PINF & (1 << SQUELCH_BUTTON)) {
    1a5a:	04 9b       	sbis	0x00, 4	; 0
    1a5c:	35 c0       	rjmp	.+106    	; 0x1ac8 <__stack+0x9c9>
	    if (vol_flag == 0x01) {
    1a5e:	80 91 2d 02 	lds	r24, 0x022D
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	29 f4       	brne	.+10     	; 0x1a70 <__stack+0x971>
	      if(vol<31)
    1a66:	9e e1       	ldi	r25, 0x1E	; 30
    1a68:	9a 15       	cp	r25, r10
    1a6a:	40 f0       	brcs	.+16     	; 0x1a7c <__stack+0x97d>
		vol ++; // Higher means lower 
    1a6c:	a3 94       	inc	r10
    1a6e:	06 c0       	rjmp	.+12     	; 0x1a7c <__stack+0x97d>
	      sprintf(buffer,"Vol %d    ", 31-vol);
	      lcd_goto(0x40);
	      lcd_puts(buffer);
	    }
	    else if (vol_flag == 0x02) {
    1a70:	80 91 2d 02 	lds	r24, 0x022D
    1a74:	82 30       	cpi	r24, 0x02	; 2
    1a76:	e1 f4       	brne	.+56     	; 0x1ab0 <__stack+0x9b1>
	      if(vol>0)
    1a78:	a1 10       	cpse	r10, r1
		vol --;
    1a7a:	aa 94       	dec	r10
	      sprintf(buffer,"Vol %d    ", 31-vol);
    1a7c:	8f e1       	ldi	r24, 0x1F	; 31
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	8a 19       	sub	r24, r10
    1a82:	91 09       	sbc	r25, r1
    1a84:	9f 93       	push	r25
    1a86:	8f 93       	push	r24
    1a88:	80 ed       	ldi	r24, 0xD0	; 208
    1a8a:	91 e0       	ldi	r25, 0x01	; 1
    1a8c:	9f 93       	push	r25
    1a8e:	8f 93       	push	r24
    1a90:	1f 93       	push	r17
    1a92:	0f 93       	push	r16
    1a94:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <sprintf>
	      lcd_goto(0x40);
    1a98:	80 e4       	ldi	r24, 0x40	; 64
    1a9a:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	      lcd_puts(buffer);
    1a9e:	c8 01       	movw	r24, r16
    1aa0:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
	    }
	    
	    err = updateVolumeSquelch(vol, squelch);
    1ab0:	6b 2d       	mov	r22, r11
    1ab2:	8a 2d       	mov	r24, r10
    1ab4:	0e 94 b7 04 	call	0x96e	; 0x96e <updateVolumeSquelch>
	    
	    if (err) {
    1ab8:	88 23       	and	r24, r24
    1aba:	09 f4       	brne	.+2      	; 0x1abe <__stack+0x9bf>
    1abc:	46 c0       	rjmp	.+140    	; 0x1b4a <__stack+0xa4b>
	      sprintf(buffer,"Err Vol %x         ",err);
    1abe:	1f 92       	push	r1
    1ac0:	8f 93       	push	r24
    1ac2:	8b ed       	ldi	r24, 0xDB	; 219
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	2f c0       	rjmp	.+94     	; 0x1b26 <__stack+0xa27>
	      lcd_goto(0x40);
	      lcd_puts(buffer);	
	    }      
	  }
	  else {
	    if (vol_flag == 0x02) {
    1ac8:	80 91 2d 02 	lds	r24, 0x022D
    1acc:	82 30       	cpi	r24, 0x02	; 2
    1ace:	29 f4       	brne	.+10     	; 0x1ada <__stack+0x9db>
	      if(squelch<31)
    1ad0:	ae e1       	ldi	r26, 0x1E	; 30
    1ad2:	ab 15       	cp	r26, r11
    1ad4:	40 f0       	brcs	.+16     	; 0x1ae6 <__stack+0x9e7>
		squelch ++; 
    1ad6:	b3 94       	inc	r11
    1ad8:	06 c0       	rjmp	.+12     	; 0x1ae6 <__stack+0x9e7>
	      sprintf(buffer,"Sq %d    ", squelch);
	      lcd_goto(0x40);
	      lcd_puts(buffer);
	    }
	    else if (vol_flag == 0x01) {
    1ada:	80 91 2d 02 	lds	r24, 0x022D
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	c1 f4       	brne	.+48     	; 0x1b12 <__stack+0xa13>
	      if(squelch>0)
    1ae2:	b1 10       	cpse	r11, r1
		squelch --;
    1ae4:	ba 94       	dec	r11
	      sprintf(buffer,"Sq %d    ", squelch);
    1ae6:	1f 92       	push	r1
    1ae8:	bf 92       	push	r11
    1aea:	8f ee       	ldi	r24, 0xEF	; 239
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	9f 93       	push	r25
    1af0:	8f 93       	push	r24
    1af2:	1f 93       	push	r17
    1af4:	0f 93       	push	r16
    1af6:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <sprintf>
	      lcd_goto(0x40);
    1afa:	80 e4       	ldi	r24, 0x40	; 64
    1afc:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	      lcd_puts(buffer);
    1b00:	c8 01       	movw	r24, r16
    1b02:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
	    }
	    
	    err = updateVolumeSquelch(vol, squelch);
    1b12:	6b 2d       	mov	r22, r11
    1b14:	8a 2d       	mov	r24, r10
    1b16:	0e 94 b7 04 	call	0x96e	; 0x96e <updateVolumeSquelch>
	    
	    if (err) {
    1b1a:	88 23       	and	r24, r24
    1b1c:	b1 f0       	breq	.+44     	; 0x1b4a <__stack+0xa4b>
	      sprintf(buffer,"Err Sq %x         ",err);
    1b1e:	1f 92       	push	r1
    1b20:	8f 93       	push	r24
    1b22:	89 ef       	ldi	r24, 0xF9	; 249
    1b24:	91 e0       	ldi	r25, 0x01	; 1
    1b26:	9f 93       	push	r25
    1b28:	8f 93       	push	r24
    1b2a:	1f 93       	push	r17
    1b2c:	0f 93       	push	r16
    1b2e:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <sprintf>
	      lcd_goto(0x40);
    1b32:	80 e4       	ldi	r24, 0x40	; 64
    1b34:	0e 94 57 07 	call	0xeae	; 0xeae <lcd_goto>
	      lcd_puts(buffer);	
    1b38:	c8 01       	movw	r24, r16
    1b3a:	0e 94 63 07 	call	0xec6	; 0xec6 <lcd_puts>
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
	    }      
	  }
	vol_timer = 0;
    1b4a:	10 92 00 01 	sts	0x0100, r1
      }
      vol_flag = 0x00;
    1b4e:	10 92 2d 02 	sts	0x022D, r1
    1b52:	ea ca       	rjmp	.-2604   	; 0x1128 <__stack+0x29>

00001b54 <vfprintf>:
    1b54:	2f 92       	push	r2
    1b56:	3f 92       	push	r3
    1b58:	4f 92       	push	r4
    1b5a:	5f 92       	push	r5
    1b5c:	6f 92       	push	r6
    1b5e:	7f 92       	push	r7
    1b60:	8f 92       	push	r8
    1b62:	9f 92       	push	r9
    1b64:	af 92       	push	r10
    1b66:	bf 92       	push	r11
    1b68:	cf 92       	push	r12
    1b6a:	df 92       	push	r13
    1b6c:	ef 92       	push	r14
    1b6e:	ff 92       	push	r15
    1b70:	0f 93       	push	r16
    1b72:	1f 93       	push	r17
    1b74:	cf 93       	push	r28
    1b76:	df 93       	push	r29
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	63 97       	sbiw	r28, 0x13	; 19
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
    1b88:	6c 01       	movw	r12, r24
    1b8a:	4b 01       	movw	r8, r22
    1b8c:	2a 01       	movw	r4, r20
    1b8e:	fc 01       	movw	r30, r24
    1b90:	17 82       	std	Z+7, r1	; 0x07
    1b92:	16 82       	std	Z+6, r1	; 0x06
    1b94:	83 81       	ldd	r24, Z+3	; 0x03
    1b96:	81 ff       	sbrs	r24, 1
    1b98:	43 c3       	rjmp	.+1670   	; 0x2220 <vfprintf+0x6cc>
    1b9a:	ae 01       	movw	r20, r28
    1b9c:	4f 5f       	subi	r20, 0xFF	; 255
    1b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba0:	3a 01       	movw	r6, r20
    1ba2:	f6 01       	movw	r30, r12
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	f4 01       	movw	r30, r8
    1ba8:	93 fd       	sbrc	r25, 3
    1baa:	85 91       	lpm	r24, Z+
    1bac:	93 ff       	sbrs	r25, 3
    1bae:	81 91       	ld	r24, Z+
    1bb0:	4f 01       	movw	r8, r30
    1bb2:	88 23       	and	r24, r24
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <vfprintf+0x64>
    1bb6:	30 c3       	rjmp	.+1632   	; 0x2218 <vfprintf+0x6c4>
    1bb8:	85 32       	cpi	r24, 0x25	; 37
    1bba:	39 f4       	brne	.+14     	; 0x1bca <vfprintf+0x76>
    1bbc:	93 fd       	sbrc	r25, 3
    1bbe:	85 91       	lpm	r24, Z+
    1bc0:	93 ff       	sbrs	r25, 3
    1bc2:	81 91       	ld	r24, Z+
    1bc4:	4f 01       	movw	r8, r30
    1bc6:	85 32       	cpi	r24, 0x25	; 37
    1bc8:	39 f4       	brne	.+14     	; 0x1bd8 <vfprintf+0x84>
    1bca:	b6 01       	movw	r22, r12
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1bd2:	52 01       	movw	r10, r4
    1bd4:	25 01       	movw	r4, r10
    1bd6:	e5 cf       	rjmp	.-54     	; 0x1ba2 <vfprintf+0x4e>
    1bd8:	10 e0       	ldi	r17, 0x00	; 0
    1bda:	f1 2c       	mov	r15, r1
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	20 32       	cpi	r18, 0x20	; 32
    1be0:	a0 f4       	brcc	.+40     	; 0x1c0a <vfprintf+0xb6>
    1be2:	8b 32       	cpi	r24, 0x2B	; 43
    1be4:	69 f0       	breq	.+26     	; 0x1c00 <vfprintf+0xac>
    1be6:	30 f4       	brcc	.+12     	; 0x1bf4 <vfprintf+0xa0>
    1be8:	80 32       	cpi	r24, 0x20	; 32
    1bea:	59 f0       	breq	.+22     	; 0x1c02 <vfprintf+0xae>
    1bec:	83 32       	cpi	r24, 0x23	; 35
    1bee:	69 f4       	brne	.+26     	; 0x1c0a <vfprintf+0xb6>
    1bf0:	20 61       	ori	r18, 0x10	; 16
    1bf2:	2c c0       	rjmp	.+88     	; 0x1c4c <vfprintf+0xf8>
    1bf4:	8d 32       	cpi	r24, 0x2D	; 45
    1bf6:	39 f0       	breq	.+14     	; 0x1c06 <vfprintf+0xb2>
    1bf8:	80 33       	cpi	r24, 0x30	; 48
    1bfa:	39 f4       	brne	.+14     	; 0x1c0a <vfprintf+0xb6>
    1bfc:	21 60       	ori	r18, 0x01	; 1
    1bfe:	26 c0       	rjmp	.+76     	; 0x1c4c <vfprintf+0xf8>
    1c00:	22 60       	ori	r18, 0x02	; 2
    1c02:	24 60       	ori	r18, 0x04	; 4
    1c04:	23 c0       	rjmp	.+70     	; 0x1c4c <vfprintf+0xf8>
    1c06:	28 60       	ori	r18, 0x08	; 8
    1c08:	21 c0       	rjmp	.+66     	; 0x1c4c <vfprintf+0xf8>
    1c0a:	27 fd       	sbrc	r18, 7
    1c0c:	27 c0       	rjmp	.+78     	; 0x1c5c <vfprintf+0x108>
    1c0e:	30 ed       	ldi	r19, 0xD0	; 208
    1c10:	38 0f       	add	r19, r24
    1c12:	3a 30       	cpi	r19, 0x0A	; 10
    1c14:	78 f4       	brcc	.+30     	; 0x1c34 <vfprintf+0xe0>
    1c16:	26 ff       	sbrs	r18, 6
    1c18:	06 c0       	rjmp	.+12     	; 0x1c26 <vfprintf+0xd2>
    1c1a:	fa e0       	ldi	r31, 0x0A	; 10
    1c1c:	1f 9f       	mul	r17, r31
    1c1e:	30 0d       	add	r19, r0
    1c20:	11 24       	eor	r1, r1
    1c22:	13 2f       	mov	r17, r19
    1c24:	13 c0       	rjmp	.+38     	; 0x1c4c <vfprintf+0xf8>
    1c26:	4a e0       	ldi	r20, 0x0A	; 10
    1c28:	f4 9e       	mul	r15, r20
    1c2a:	30 0d       	add	r19, r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	f3 2e       	mov	r15, r19
    1c30:	20 62       	ori	r18, 0x20	; 32
    1c32:	0c c0       	rjmp	.+24     	; 0x1c4c <vfprintf+0xf8>
    1c34:	8e 32       	cpi	r24, 0x2E	; 46
    1c36:	21 f4       	brne	.+8      	; 0x1c40 <vfprintf+0xec>
    1c38:	26 fd       	sbrc	r18, 6
    1c3a:	ee c2       	rjmp	.+1500   	; 0x2218 <vfprintf+0x6c4>
    1c3c:	20 64       	ori	r18, 0x40	; 64
    1c3e:	06 c0       	rjmp	.+12     	; 0x1c4c <vfprintf+0xf8>
    1c40:	8c 36       	cpi	r24, 0x6C	; 108
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <vfprintf+0xf4>
    1c44:	20 68       	ori	r18, 0x80	; 128
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <vfprintf+0xf8>
    1c48:	88 36       	cpi	r24, 0x68	; 104
    1c4a:	41 f4       	brne	.+16     	; 0x1c5c <vfprintf+0x108>
    1c4c:	f4 01       	movw	r30, r8
    1c4e:	93 fd       	sbrc	r25, 3
    1c50:	85 91       	lpm	r24, Z+
    1c52:	93 ff       	sbrs	r25, 3
    1c54:	81 91       	ld	r24, Z+
    1c56:	4f 01       	movw	r8, r30
    1c58:	81 11       	cpse	r24, r1
    1c5a:	c1 cf       	rjmp	.-126    	; 0x1bde <vfprintf+0x8a>
    1c5c:	9b eb       	ldi	r25, 0xBB	; 187
    1c5e:	98 0f       	add	r25, r24
    1c60:	93 30       	cpi	r25, 0x03	; 3
    1c62:	18 f4       	brcc	.+6      	; 0x1c6a <vfprintf+0x116>
    1c64:	20 61       	ori	r18, 0x10	; 16
    1c66:	80 5e       	subi	r24, 0xE0	; 224
    1c68:	06 c0       	rjmp	.+12     	; 0x1c76 <vfprintf+0x122>
    1c6a:	9b e9       	ldi	r25, 0x9B	; 155
    1c6c:	98 0f       	add	r25, r24
    1c6e:	93 30       	cpi	r25, 0x03	; 3
    1c70:	08 f0       	brcs	.+2      	; 0x1c74 <vfprintf+0x120>
    1c72:	71 c1       	rjmp	.+738    	; 0x1f56 <vfprintf+0x402>
    1c74:	2f 7e       	andi	r18, 0xEF	; 239
    1c76:	26 ff       	sbrs	r18, 6
    1c78:	16 e0       	ldi	r17, 0x06	; 6
    1c7a:	2f 73       	andi	r18, 0x3F	; 63
    1c7c:	32 2e       	mov	r3, r18
    1c7e:	85 36       	cpi	r24, 0x65	; 101
    1c80:	19 f4       	brne	.+6      	; 0x1c88 <vfprintf+0x134>
    1c82:	20 64       	ori	r18, 0x40	; 64
    1c84:	32 2e       	mov	r3, r18
    1c86:	08 c0       	rjmp	.+16     	; 0x1c98 <vfprintf+0x144>
    1c88:	86 36       	cpi	r24, 0x66	; 102
    1c8a:	21 f4       	brne	.+8      	; 0x1c94 <vfprintf+0x140>
    1c8c:	f2 2f       	mov	r31, r18
    1c8e:	f0 68       	ori	r31, 0x80	; 128
    1c90:	3f 2e       	mov	r3, r31
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <vfprintf+0x144>
    1c94:	11 11       	cpse	r17, r1
    1c96:	11 50       	subi	r17, 0x01	; 1
    1c98:	37 fe       	sbrs	r3, 7
    1c9a:	07 c0       	rjmp	.+14     	; 0x1caa <vfprintf+0x156>
    1c9c:	1c 33       	cpi	r17, 0x3C	; 60
    1c9e:	50 f4       	brcc	.+20     	; 0x1cb4 <vfprintf+0x160>
    1ca0:	ee 24       	eor	r14, r14
    1ca2:	e3 94       	inc	r14
    1ca4:	e1 0e       	add	r14, r17
    1ca6:	27 e0       	ldi	r18, 0x07	; 7
    1ca8:	0b c0       	rjmp	.+22     	; 0x1cc0 <vfprintf+0x16c>
    1caa:	18 30       	cpi	r17, 0x08	; 8
    1cac:	38 f0       	brcs	.+14     	; 0x1cbc <vfprintf+0x168>
    1cae:	27 e0       	ldi	r18, 0x07	; 7
    1cb0:	17 e0       	ldi	r17, 0x07	; 7
    1cb2:	05 c0       	rjmp	.+10     	; 0x1cbe <vfprintf+0x16a>
    1cb4:	27 e0       	ldi	r18, 0x07	; 7
    1cb6:	4c e3       	ldi	r20, 0x3C	; 60
    1cb8:	e4 2e       	mov	r14, r20
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <vfprintf+0x16c>
    1cbc:	21 2f       	mov	r18, r17
    1cbe:	e1 2c       	mov	r14, r1
    1cc0:	52 01       	movw	r10, r4
    1cc2:	44 e0       	ldi	r20, 0x04	; 4
    1cc4:	a4 0e       	add	r10, r20
    1cc6:	b1 1c       	adc	r11, r1
    1cc8:	f2 01       	movw	r30, r4
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	0e 2d       	mov	r16, r14
    1cd4:	a3 01       	movw	r20, r6
    1cd6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__ftoa_engine>
    1cda:	2c 01       	movw	r4, r24
    1cdc:	09 81       	ldd	r16, Y+1	; 0x01
    1cde:	00 ff       	sbrs	r16, 0
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <vfprintf+0x192>
    1ce2:	03 ff       	sbrs	r16, 3
    1ce4:	07 c0       	rjmp	.+14     	; 0x1cf4 <vfprintf+0x1a0>
    1ce6:	31 fc       	sbrc	r3, 1
    1ce8:	08 c0       	rjmp	.+16     	; 0x1cfa <vfprintf+0x1a6>
    1cea:	32 fe       	sbrs	r3, 2
    1cec:	09 c0       	rjmp	.+18     	; 0x1d00 <vfprintf+0x1ac>
    1cee:	30 e2       	ldi	r19, 0x20	; 32
    1cf0:	23 2e       	mov	r2, r19
    1cf2:	07 c0       	rjmp	.+14     	; 0x1d02 <vfprintf+0x1ae>
    1cf4:	2d e2       	ldi	r18, 0x2D	; 45
    1cf6:	22 2e       	mov	r2, r18
    1cf8:	04 c0       	rjmp	.+8      	; 0x1d02 <vfprintf+0x1ae>
    1cfa:	9b e2       	ldi	r25, 0x2B	; 43
    1cfc:	29 2e       	mov	r2, r25
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <vfprintf+0x1ae>
    1d00:	21 2c       	mov	r2, r1
    1d02:	80 2f       	mov	r24, r16
    1d04:	8c 70       	andi	r24, 0x0C	; 12
    1d06:	19 f0       	breq	.+6      	; 0x1d0e <vfprintf+0x1ba>
    1d08:	21 10       	cpse	r2, r1
    1d0a:	68 c2       	rjmp	.+1232   	; 0x21dc <vfprintf+0x688>
    1d0c:	a8 c2       	rjmp	.+1360   	; 0x225e <vfprintf+0x70a>
    1d0e:	37 fe       	sbrs	r3, 7
    1d10:	0f c0       	rjmp	.+30     	; 0x1d30 <vfprintf+0x1dc>
    1d12:	e4 0c       	add	r14, r4
    1d14:	04 ff       	sbrs	r16, 4
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <vfprintf+0x1cc>
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	81 33       	cpi	r24, 0x31	; 49
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <vfprintf+0x1cc>
    1d1e:	ea 94       	dec	r14
    1d20:	1e 14       	cp	r1, r14
    1d22:	74 f5       	brge	.+92     	; 0x1d80 <vfprintf+0x22c>
    1d24:	f8 e0       	ldi	r31, 0x08	; 8
    1d26:	fe 15       	cp	r31, r14
    1d28:	78 f5       	brcc	.+94     	; 0x1d88 <vfprintf+0x234>
    1d2a:	88 e0       	ldi	r24, 0x08	; 8
    1d2c:	e8 2e       	mov	r14, r24
    1d2e:	2c c0       	rjmp	.+88     	; 0x1d88 <vfprintf+0x234>
    1d30:	36 fc       	sbrc	r3, 6
    1d32:	2a c0       	rjmp	.+84     	; 0x1d88 <vfprintf+0x234>
    1d34:	81 2f       	mov	r24, r17
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	84 15       	cp	r24, r4
    1d3a:	95 05       	cpc	r25, r5
    1d3c:	9c f0       	brlt	.+38     	; 0x1d64 <vfprintf+0x210>
    1d3e:	2c ef       	ldi	r18, 0xFC	; 252
    1d40:	42 16       	cp	r4, r18
    1d42:	2f ef       	ldi	r18, 0xFF	; 255
    1d44:	52 06       	cpc	r5, r18
    1d46:	74 f0       	brlt	.+28     	; 0x1d64 <vfprintf+0x210>
    1d48:	43 2d       	mov	r20, r3
    1d4a:	40 68       	ori	r20, 0x80	; 128
    1d4c:	34 2e       	mov	r3, r20
    1d4e:	0a c0       	rjmp	.+20     	; 0x1d64 <vfprintf+0x210>
    1d50:	e2 e0       	ldi	r30, 0x02	; 2
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	ec 0f       	add	r30, r28
    1d56:	fd 1f       	adc	r31, r29
    1d58:	e1 0f       	add	r30, r17
    1d5a:	f1 1d       	adc	r31, r1
    1d5c:	80 81       	ld	r24, Z
    1d5e:	80 33       	cpi	r24, 0x30	; 48
    1d60:	19 f4       	brne	.+6      	; 0x1d68 <vfprintf+0x214>
    1d62:	11 50       	subi	r17, 0x01	; 1
    1d64:	11 11       	cpse	r17, r1
    1d66:	f4 cf       	rjmp	.-24     	; 0x1d50 <vfprintf+0x1fc>
    1d68:	37 fe       	sbrs	r3, 7
    1d6a:	0e c0       	rjmp	.+28     	; 0x1d88 <vfprintf+0x234>
    1d6c:	ee 24       	eor	r14, r14
    1d6e:	e3 94       	inc	r14
    1d70:	e1 0e       	add	r14, r17
    1d72:	81 2f       	mov	r24, r17
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	48 16       	cp	r4, r24
    1d78:	59 06       	cpc	r5, r25
    1d7a:	2c f4       	brge	.+10     	; 0x1d86 <vfprintf+0x232>
    1d7c:	14 19       	sub	r17, r4
    1d7e:	04 c0       	rjmp	.+8      	; 0x1d88 <vfprintf+0x234>
    1d80:	ee 24       	eor	r14, r14
    1d82:	e3 94       	inc	r14
    1d84:	01 c0       	rjmp	.+2      	; 0x1d88 <vfprintf+0x234>
    1d86:	10 e0       	ldi	r17, 0x00	; 0
    1d88:	37 fe       	sbrs	r3, 7
    1d8a:	06 c0       	rjmp	.+12     	; 0x1d98 <vfprintf+0x244>
    1d8c:	14 14       	cp	r1, r4
    1d8e:	15 04       	cpc	r1, r5
    1d90:	34 f4       	brge	.+12     	; 0x1d9e <vfprintf+0x24a>
    1d92:	c2 01       	movw	r24, r4
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <vfprintf+0x24e>
    1d98:	85 e0       	ldi	r24, 0x05	; 5
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <vfprintf+0x24e>
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	21 10       	cpse	r2, r1
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	11 23       	and	r17, r17
    1da8:	31 f0       	breq	.+12     	; 0x1db6 <vfprintf+0x262>
    1daa:	21 2f       	mov	r18, r17
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	2f 5f       	subi	r18, 0xFF	; 255
    1db0:	3f 4f       	sbci	r19, 0xFF	; 255
    1db2:	82 0f       	add	r24, r18
    1db4:	93 1f       	adc	r25, r19
    1db6:	2f 2d       	mov	r18, r15
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	82 17       	cp	r24, r18
    1dbc:	93 07       	cpc	r25, r19
    1dbe:	14 f4       	brge	.+4      	; 0x1dc4 <vfprintf+0x270>
    1dc0:	f8 1a       	sub	r15, r24
    1dc2:	01 c0       	rjmp	.+2      	; 0x1dc6 <vfprintf+0x272>
    1dc4:	f1 2c       	mov	r15, r1
    1dc6:	83 2d       	mov	r24, r3
    1dc8:	89 70       	andi	r24, 0x09	; 9
    1dca:	49 f4       	brne	.+18     	; 0x1dde <vfprintf+0x28a>
    1dcc:	ff 20       	and	r15, r15
    1dce:	39 f0       	breq	.+14     	; 0x1dde <vfprintf+0x28a>
    1dd0:	b6 01       	movw	r22, r12
    1dd2:	80 e2       	ldi	r24, 0x20	; 32
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1dda:	fa 94       	dec	r15
    1ddc:	f7 cf       	rjmp	.-18     	; 0x1dcc <vfprintf+0x278>
    1dde:	22 20       	and	r2, r2
    1de0:	29 f0       	breq	.+10     	; 0x1dec <vfprintf+0x298>
    1de2:	b6 01       	movw	r22, r12
    1de4:	82 2d       	mov	r24, r2
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1dec:	33 fc       	sbrc	r3, 3
    1dee:	09 c0       	rjmp	.+18     	; 0x1e02 <vfprintf+0x2ae>
    1df0:	ff 20       	and	r15, r15
    1df2:	39 f0       	breq	.+14     	; 0x1e02 <vfprintf+0x2ae>
    1df4:	b6 01       	movw	r22, r12
    1df6:	80 e3       	ldi	r24, 0x30	; 48
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1dfe:	fa 94       	dec	r15
    1e00:	f7 cf       	rjmp	.-18     	; 0x1df0 <vfprintf+0x29c>
    1e02:	37 fe       	sbrs	r3, 7
    1e04:	5a c0       	rjmp	.+180    	; 0x1eba <vfprintf+0x366>
    1e06:	94 2d       	mov	r25, r4
    1e08:	85 2d       	mov	r24, r5
    1e0a:	57 fe       	sbrs	r5, 7
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <vfprintf+0x2be>
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	29 2e       	mov	r2, r25
    1e14:	38 2e       	mov	r3, r24
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	a2 01       	movw	r20, r4
    1e1c:	4e 19       	sub	r20, r14
    1e1e:	51 09       	sbc	r21, r1
    1e20:	5d 87       	std	Y+13, r21	; 0x0d
    1e22:	4c 87       	std	Y+12, r20	; 0x0c
    1e24:	a2 01       	movw	r20, r4
    1e26:	42 19       	sub	r20, r2
    1e28:	53 09       	sbc	r21, r3
    1e2a:	5f 87       	std	Y+15, r21	; 0x0f
    1e2c:	4e 87       	std	Y+14, r20	; 0x0e
    1e2e:	61 2f       	mov	r22, r17
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	44 27       	eor	r20, r20
    1e34:	55 27       	eor	r21, r21
    1e36:	46 1b       	sub	r20, r22
    1e38:	57 0b       	sbc	r21, r23
    1e3a:	59 8b       	std	Y+17, r21	; 0x11
    1e3c:	48 8b       	std	Y+16, r20	; 0x10
    1e3e:	5f ef       	ldi	r21, 0xFF	; 255
    1e40:	25 16       	cp	r2, r21
    1e42:	35 06       	cpc	r3, r21
    1e44:	49 f4       	brne	.+18     	; 0x1e58 <vfprintf+0x304>
    1e46:	b6 01       	movw	r22, r12
    1e48:	8e e2       	ldi	r24, 0x2E	; 46
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	2a 8b       	std	Y+18, r18	; 0x12
    1e4e:	3b 8b       	std	Y+19, r19	; 0x13
    1e50:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1e54:	3b 89       	ldd	r19, Y+19	; 0x13
    1e56:	2a 89       	ldd	r18, Y+18	; 0x12
    1e58:	42 14       	cp	r4, r2
    1e5a:	53 04       	cpc	r5, r3
    1e5c:	6c f0       	brlt	.+26     	; 0x1e78 <vfprintf+0x324>
    1e5e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e60:	5d 85       	ldd	r21, Y+13	; 0x0d
    1e62:	42 15       	cp	r20, r2
    1e64:	53 05       	cpc	r21, r3
    1e66:	44 f4       	brge	.+16     	; 0x1e78 <vfprintf+0x324>
    1e68:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e6a:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e6c:	e2 0f       	add	r30, r18
    1e6e:	f3 1f       	adc	r31, r19
    1e70:	e6 0d       	add	r30, r6
    1e72:	f7 1d       	adc	r31, r7
    1e74:	81 81       	ldd	r24, Z+1	; 0x01
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <vfprintf+0x326>
    1e78:	80 e3       	ldi	r24, 0x30	; 48
    1e7a:	51 e0       	ldi	r21, 0x01	; 1
    1e7c:	25 1a       	sub	r2, r21
    1e7e:	31 08       	sbc	r3, r1
    1e80:	2f 5f       	subi	r18, 0xFF	; 255
    1e82:	3f 4f       	sbci	r19, 0xFF	; 255
    1e84:	48 89       	ldd	r20, Y+16	; 0x10
    1e86:	59 89       	ldd	r21, Y+17	; 0x11
    1e88:	24 16       	cp	r2, r20
    1e8a:	35 06       	cpc	r3, r21
    1e8c:	4c f0       	brlt	.+18     	; 0x1ea0 <vfprintf+0x34c>
    1e8e:	b6 01       	movw	r22, r12
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	2a 8b       	std	Y+18, r18	; 0x12
    1e94:	3b 8b       	std	Y+19, r19	; 0x13
    1e96:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1e9a:	2a 89       	ldd	r18, Y+18	; 0x12
    1e9c:	3b 89       	ldd	r19, Y+19	; 0x13
    1e9e:	cf cf       	rjmp	.-98     	; 0x1e3e <vfprintf+0x2ea>
    1ea0:	24 14       	cp	r2, r4
    1ea2:	35 04       	cpc	r3, r5
    1ea4:	39 f4       	brne	.+14     	; 0x1eb4 <vfprintf+0x360>
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	96 33       	cpi	r25, 0x36	; 54
    1eaa:	18 f4       	brcc	.+6      	; 0x1eb2 <vfprintf+0x35e>
    1eac:	95 33       	cpi	r25, 0x35	; 53
    1eae:	11 f4       	brne	.+4      	; 0x1eb4 <vfprintf+0x360>
    1eb0:	04 ff       	sbrs	r16, 4
    1eb2:	81 e3       	ldi	r24, 0x31	; 49
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	4b c0       	rjmp	.+150    	; 0x1f50 <vfprintf+0x3fc>
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	81 33       	cpi	r24, 0x31	; 49
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <vfprintf+0x36e>
    1ec0:	0f 7e       	andi	r16, 0xEF	; 239
    1ec2:	b6 01       	movw	r22, r12
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1eca:	11 11       	cpse	r17, r1
    1ecc:	05 c0       	rjmp	.+10     	; 0x1ed8 <vfprintf+0x384>
    1ece:	34 fc       	sbrc	r3, 4
    1ed0:	18 c0       	rjmp	.+48     	; 0x1f02 <vfprintf+0x3ae>
    1ed2:	85 e6       	ldi	r24, 0x65	; 101
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	17 c0       	rjmp	.+46     	; 0x1f06 <vfprintf+0x3b2>
    1ed8:	b6 01       	movw	r22, r12
    1eda:	8e e2       	ldi	r24, 0x2E	; 46
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	ee 24       	eor	r14, r14
    1ee6:	e3 94       	inc	r14
    1ee8:	e8 0e       	add	r14, r24
    1eea:	f3 01       	movw	r30, r6
    1eec:	e8 0f       	add	r30, r24
    1eee:	f1 1d       	adc	r31, r1
    1ef0:	80 81       	ld	r24, Z
    1ef2:	b6 01       	movw	r22, r12
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1efa:	11 50       	subi	r17, 0x01	; 1
    1efc:	8e 2d       	mov	r24, r14
    1efe:	91 f7       	brne	.-28     	; 0x1ee4 <vfprintf+0x390>
    1f00:	e6 cf       	rjmp	.-52     	; 0x1ece <vfprintf+0x37a>
    1f02:	85 e4       	ldi	r24, 0x45	; 69
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	b6 01       	movw	r22, r12
    1f08:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1f0c:	57 fc       	sbrc	r5, 7
    1f0e:	05 c0       	rjmp	.+10     	; 0x1f1a <vfprintf+0x3c6>
    1f10:	41 14       	cp	r4, r1
    1f12:	51 04       	cpc	r5, r1
    1f14:	39 f4       	brne	.+14     	; 0x1f24 <vfprintf+0x3d0>
    1f16:	04 ff       	sbrs	r16, 4
    1f18:	05 c0       	rjmp	.+10     	; 0x1f24 <vfprintf+0x3d0>
    1f1a:	51 94       	neg	r5
    1f1c:	41 94       	neg	r4
    1f1e:	51 08       	sbc	r5, r1
    1f20:	8d e2       	ldi	r24, 0x2D	; 45
    1f22:	01 c0       	rjmp	.+2      	; 0x1f26 <vfprintf+0x3d2>
    1f24:	8b e2       	ldi	r24, 0x2B	; 43
    1f26:	b6 01       	movw	r22, r12
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1f2e:	80 e3       	ldi	r24, 0x30	; 48
    1f30:	9a e0       	ldi	r25, 0x0A	; 10
    1f32:	49 16       	cp	r4, r25
    1f34:	51 04       	cpc	r5, r1
    1f36:	2c f0       	brlt	.+10     	; 0x1f42 <vfprintf+0x3ee>
    1f38:	8f 5f       	subi	r24, 0xFF	; 255
    1f3a:	5a e0       	ldi	r21, 0x0A	; 10
    1f3c:	45 1a       	sub	r4, r21
    1f3e:	51 08       	sbc	r5, r1
    1f40:	f7 cf       	rjmp	.-18     	; 0x1f30 <vfprintf+0x3dc>
    1f42:	b6 01       	movw	r22, r12
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1f4a:	b6 01       	movw	r22, r12
    1f4c:	c2 01       	movw	r24, r4
    1f4e:	c0 96       	adiw	r24, 0x30	; 48
    1f50:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1f54:	57 c1       	rjmp	.+686    	; 0x2204 <vfprintf+0x6b0>
    1f56:	83 36       	cpi	r24, 0x63	; 99
    1f58:	31 f0       	breq	.+12     	; 0x1f66 <vfprintf+0x412>
    1f5a:	83 37       	cpi	r24, 0x73	; 115
    1f5c:	79 f0       	breq	.+30     	; 0x1f7c <vfprintf+0x428>
    1f5e:	83 35       	cpi	r24, 0x53	; 83
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <vfprintf+0x410>
    1f62:	58 c0       	rjmp	.+176    	; 0x2014 <vfprintf+0x4c0>
    1f64:	21 c0       	rjmp	.+66     	; 0x1fa8 <vfprintf+0x454>
    1f66:	52 01       	movw	r10, r4
    1f68:	e2 e0       	ldi	r30, 0x02	; 2
    1f6a:	ae 0e       	add	r10, r30
    1f6c:	b1 1c       	adc	r11, r1
    1f6e:	f2 01       	movw	r30, r4
    1f70:	80 81       	ld	r24, Z
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	01 e0       	ldi	r16, 0x01	; 1
    1f76:	10 e0       	ldi	r17, 0x00	; 0
    1f78:	23 01       	movw	r4, r6
    1f7a:	14 c0       	rjmp	.+40     	; 0x1fa4 <vfprintf+0x450>
    1f7c:	52 01       	movw	r10, r4
    1f7e:	f2 e0       	ldi	r31, 0x02	; 2
    1f80:	af 0e       	add	r10, r31
    1f82:	b1 1c       	adc	r11, r1
    1f84:	f2 01       	movw	r30, r4
    1f86:	40 80       	ld	r4, Z
    1f88:	51 80       	ldd	r5, Z+1	; 0x01
    1f8a:	26 ff       	sbrs	r18, 6
    1f8c:	03 c0       	rjmp	.+6      	; 0x1f94 <vfprintf+0x440>
    1f8e:	61 2f       	mov	r22, r17
    1f90:	70 e0       	ldi	r23, 0x00	; 0
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <vfprintf+0x444>
    1f94:	6f ef       	ldi	r22, 0xFF	; 255
    1f96:	7f ef       	ldi	r23, 0xFF	; 255
    1f98:	c2 01       	movw	r24, r4
    1f9a:	2a 8b       	std	Y+18, r18	; 0x12
    1f9c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <strnlen>
    1fa0:	8c 01       	movw	r16, r24
    1fa2:	2a 89       	ldd	r18, Y+18	; 0x12
    1fa4:	2f 77       	andi	r18, 0x7F	; 127
    1fa6:	15 c0       	rjmp	.+42     	; 0x1fd2 <vfprintf+0x47e>
    1fa8:	52 01       	movw	r10, r4
    1faa:	f2 e0       	ldi	r31, 0x02	; 2
    1fac:	af 0e       	add	r10, r31
    1fae:	b1 1c       	adc	r11, r1
    1fb0:	f2 01       	movw	r30, r4
    1fb2:	40 80       	ld	r4, Z
    1fb4:	51 80       	ldd	r5, Z+1	; 0x01
    1fb6:	26 ff       	sbrs	r18, 6
    1fb8:	03 c0       	rjmp	.+6      	; 0x1fc0 <vfprintf+0x46c>
    1fba:	61 2f       	mov	r22, r17
    1fbc:	70 e0       	ldi	r23, 0x00	; 0
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <vfprintf+0x470>
    1fc0:	6f ef       	ldi	r22, 0xFF	; 255
    1fc2:	7f ef       	ldi	r23, 0xFF	; 255
    1fc4:	c2 01       	movw	r24, r4
    1fc6:	2a 8b       	std	Y+18, r18	; 0x12
    1fc8:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <strnlen_P>
    1fcc:	8c 01       	movw	r16, r24
    1fce:	2a 89       	ldd	r18, Y+18	; 0x12
    1fd0:	20 68       	ori	r18, 0x80	; 128
    1fd2:	32 2e       	mov	r3, r18
    1fd4:	23 fd       	sbrc	r18, 3
    1fd6:	1a c0       	rjmp	.+52     	; 0x200c <vfprintf+0x4b8>
    1fd8:	8f 2d       	mov	r24, r15
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	08 17       	cp	r16, r24
    1fde:	19 07       	cpc	r17, r25
    1fe0:	a8 f4       	brcc	.+42     	; 0x200c <vfprintf+0x4b8>
    1fe2:	b6 01       	movw	r22, r12
    1fe4:	80 e2       	ldi	r24, 0x20	; 32
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    1fec:	fa 94       	dec	r15
    1fee:	f4 cf       	rjmp	.-24     	; 0x1fd8 <vfprintf+0x484>
    1ff0:	f2 01       	movw	r30, r4
    1ff2:	37 fc       	sbrc	r3, 7
    1ff4:	85 91       	lpm	r24, Z+
    1ff6:	37 fe       	sbrs	r3, 7
    1ff8:	81 91       	ld	r24, Z+
    1ffa:	2f 01       	movw	r4, r30
    1ffc:	b6 01       	movw	r22, r12
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    2004:	f1 10       	cpse	r15, r1
    2006:	fa 94       	dec	r15
    2008:	01 50       	subi	r16, 0x01	; 1
    200a:	11 09       	sbc	r17, r1
    200c:	01 15       	cp	r16, r1
    200e:	11 05       	cpc	r17, r1
    2010:	79 f7       	brne	.-34     	; 0x1ff0 <vfprintf+0x49c>
    2012:	f8 c0       	rjmp	.+496    	; 0x2204 <vfprintf+0x6b0>
    2014:	84 36       	cpi	r24, 0x64	; 100
    2016:	11 f0       	breq	.+4      	; 0x201c <vfprintf+0x4c8>
    2018:	89 36       	cpi	r24, 0x69	; 105
    201a:	59 f5       	brne	.+86     	; 0x2072 <vfprintf+0x51e>
    201c:	52 01       	movw	r10, r4
    201e:	27 ff       	sbrs	r18, 7
    2020:	09 c0       	rjmp	.+18     	; 0x2034 <vfprintf+0x4e0>
    2022:	f4 e0       	ldi	r31, 0x04	; 4
    2024:	af 0e       	add	r10, r31
    2026:	b1 1c       	adc	r11, r1
    2028:	f2 01       	movw	r30, r4
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	93 81       	ldd	r25, Z+3	; 0x03
    2032:	0a c0       	rjmp	.+20     	; 0x2048 <vfprintf+0x4f4>
    2034:	f2 e0       	ldi	r31, 0x02	; 2
    2036:	af 0e       	add	r10, r31
    2038:	b1 1c       	adc	r11, r1
    203a:	f2 01       	movw	r30, r4
    203c:	60 81       	ld	r22, Z
    203e:	71 81       	ldd	r23, Z+1	; 0x01
    2040:	07 2e       	mov	r0, r23
    2042:	00 0c       	add	r0, r0
    2044:	88 0b       	sbc	r24, r24
    2046:	99 0b       	sbc	r25, r25
    2048:	2f 76       	andi	r18, 0x6F	; 111
    204a:	32 2e       	mov	r3, r18
    204c:	97 ff       	sbrs	r25, 7
    204e:	09 c0       	rjmp	.+18     	; 0x2062 <vfprintf+0x50e>
    2050:	90 95       	com	r25
    2052:	80 95       	com	r24
    2054:	70 95       	com	r23
    2056:	61 95       	neg	r22
    2058:	7f 4f       	sbci	r23, 0xFF	; 255
    205a:	8f 4f       	sbci	r24, 0xFF	; 255
    205c:	9f 4f       	sbci	r25, 0xFF	; 255
    205e:	20 68       	ori	r18, 0x80	; 128
    2060:	32 2e       	mov	r3, r18
    2062:	2a e0       	ldi	r18, 0x0A	; 10
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	a3 01       	movw	r20, r6
    2068:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__ultoa_invert>
    206c:	e8 2e       	mov	r14, r24
    206e:	e6 18       	sub	r14, r6
    2070:	3f c0       	rjmp	.+126    	; 0x20f0 <vfprintf+0x59c>
    2072:	02 2f       	mov	r16, r18
    2074:	85 37       	cpi	r24, 0x75	; 117
    2076:	21 f4       	brne	.+8      	; 0x2080 <vfprintf+0x52c>
    2078:	0f 7e       	andi	r16, 0xEF	; 239
    207a:	2a e0       	ldi	r18, 0x0A	; 10
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	1d c0       	rjmp	.+58     	; 0x20ba <vfprintf+0x566>
    2080:	09 7f       	andi	r16, 0xF9	; 249
    2082:	8f 36       	cpi	r24, 0x6F	; 111
    2084:	91 f0       	breq	.+36     	; 0x20aa <vfprintf+0x556>
    2086:	18 f4       	brcc	.+6      	; 0x208e <vfprintf+0x53a>
    2088:	88 35       	cpi	r24, 0x58	; 88
    208a:	59 f0       	breq	.+22     	; 0x20a2 <vfprintf+0x54e>
    208c:	c5 c0       	rjmp	.+394    	; 0x2218 <vfprintf+0x6c4>
    208e:	80 37       	cpi	r24, 0x70	; 112
    2090:	19 f0       	breq	.+6      	; 0x2098 <vfprintf+0x544>
    2092:	88 37       	cpi	r24, 0x78	; 120
    2094:	11 f0       	breq	.+4      	; 0x209a <vfprintf+0x546>
    2096:	c0 c0       	rjmp	.+384    	; 0x2218 <vfprintf+0x6c4>
    2098:	00 61       	ori	r16, 0x10	; 16
    209a:	04 ff       	sbrs	r16, 4
    209c:	09 c0       	rjmp	.+18     	; 0x20b0 <vfprintf+0x55c>
    209e:	04 60       	ori	r16, 0x04	; 4
    20a0:	07 c0       	rjmp	.+14     	; 0x20b0 <vfprintf+0x55c>
    20a2:	24 ff       	sbrs	r18, 4
    20a4:	08 c0       	rjmp	.+16     	; 0x20b6 <vfprintf+0x562>
    20a6:	06 60       	ori	r16, 0x06	; 6
    20a8:	06 c0       	rjmp	.+12     	; 0x20b6 <vfprintf+0x562>
    20aa:	28 e0       	ldi	r18, 0x08	; 8
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	05 c0       	rjmp	.+10     	; 0x20ba <vfprintf+0x566>
    20b0:	20 e1       	ldi	r18, 0x10	; 16
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <vfprintf+0x566>
    20b6:	20 e1       	ldi	r18, 0x10	; 16
    20b8:	32 e0       	ldi	r19, 0x02	; 2
    20ba:	52 01       	movw	r10, r4
    20bc:	07 ff       	sbrs	r16, 7
    20be:	09 c0       	rjmp	.+18     	; 0x20d2 <vfprintf+0x57e>
    20c0:	f4 e0       	ldi	r31, 0x04	; 4
    20c2:	af 0e       	add	r10, r31
    20c4:	b1 1c       	adc	r11, r1
    20c6:	f2 01       	movw	r30, r4
    20c8:	60 81       	ld	r22, Z
    20ca:	71 81       	ldd	r23, Z+1	; 0x01
    20cc:	82 81       	ldd	r24, Z+2	; 0x02
    20ce:	93 81       	ldd	r25, Z+3	; 0x03
    20d0:	08 c0       	rjmp	.+16     	; 0x20e2 <vfprintf+0x58e>
    20d2:	f2 e0       	ldi	r31, 0x02	; 2
    20d4:	af 0e       	add	r10, r31
    20d6:	b1 1c       	adc	r11, r1
    20d8:	f2 01       	movw	r30, r4
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a3 01       	movw	r20, r6
    20e4:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <__ultoa_invert>
    20e8:	e8 2e       	mov	r14, r24
    20ea:	e6 18       	sub	r14, r6
    20ec:	0f 77       	andi	r16, 0x7F	; 127
    20ee:	30 2e       	mov	r3, r16
    20f0:	36 fe       	sbrs	r3, 6
    20f2:	0b c0       	rjmp	.+22     	; 0x210a <vfprintf+0x5b6>
    20f4:	33 2d       	mov	r19, r3
    20f6:	3e 7f       	andi	r19, 0xFE	; 254
    20f8:	e1 16       	cp	r14, r17
    20fa:	50 f4       	brcc	.+20     	; 0x2110 <vfprintf+0x5bc>
    20fc:	34 fe       	sbrs	r3, 4
    20fe:	0a c0       	rjmp	.+20     	; 0x2114 <vfprintf+0x5c0>
    2100:	32 fc       	sbrc	r3, 2
    2102:	08 c0       	rjmp	.+16     	; 0x2114 <vfprintf+0x5c0>
    2104:	33 2d       	mov	r19, r3
    2106:	3e 7e       	andi	r19, 0xEE	; 238
    2108:	05 c0       	rjmp	.+10     	; 0x2114 <vfprintf+0x5c0>
    210a:	0e 2d       	mov	r16, r14
    210c:	33 2d       	mov	r19, r3
    210e:	03 c0       	rjmp	.+6      	; 0x2116 <vfprintf+0x5c2>
    2110:	0e 2d       	mov	r16, r14
    2112:	01 c0       	rjmp	.+2      	; 0x2116 <vfprintf+0x5c2>
    2114:	01 2f       	mov	r16, r17
    2116:	34 ff       	sbrs	r19, 4
    2118:	0c c0       	rjmp	.+24     	; 0x2132 <vfprintf+0x5de>
    211a:	fe 01       	movw	r30, r28
    211c:	ee 0d       	add	r30, r14
    211e:	f1 1d       	adc	r31, r1
    2120:	80 81       	ld	r24, Z
    2122:	80 33       	cpi	r24, 0x30	; 48
    2124:	11 f4       	brne	.+4      	; 0x212a <vfprintf+0x5d6>
    2126:	39 7e       	andi	r19, 0xE9	; 233
    2128:	08 c0       	rjmp	.+16     	; 0x213a <vfprintf+0x5e6>
    212a:	32 ff       	sbrs	r19, 2
    212c:	05 c0       	rjmp	.+10     	; 0x2138 <vfprintf+0x5e4>
    212e:	0e 5f       	subi	r16, 0xFE	; 254
    2130:	04 c0       	rjmp	.+8      	; 0x213a <vfprintf+0x5e6>
    2132:	83 2f       	mov	r24, r19
    2134:	86 78       	andi	r24, 0x86	; 134
    2136:	09 f0       	breq	.+2      	; 0x213a <vfprintf+0x5e6>
    2138:	0f 5f       	subi	r16, 0xFF	; 255
    213a:	33 fd       	sbrc	r19, 3
    213c:	13 c0       	rjmp	.+38     	; 0x2164 <vfprintf+0x610>
    213e:	30 ff       	sbrs	r19, 0
    2140:	06 c0       	rjmp	.+12     	; 0x214e <vfprintf+0x5fa>
    2142:	1e 2d       	mov	r17, r14
    2144:	0f 15       	cp	r16, r15
    2146:	18 f4       	brcc	.+6      	; 0x214e <vfprintf+0x5fa>
    2148:	1f 0d       	add	r17, r15
    214a:	10 1b       	sub	r17, r16
    214c:	0f 2d       	mov	r16, r15
    214e:	0f 15       	cp	r16, r15
    2150:	68 f4       	brcc	.+26     	; 0x216c <vfprintf+0x618>
    2152:	b6 01       	movw	r22, r12
    2154:	80 e2       	ldi	r24, 0x20	; 32
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	3b 8b       	std	Y+19, r19	; 0x13
    215a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    215e:	0f 5f       	subi	r16, 0xFF	; 255
    2160:	3b 89       	ldd	r19, Y+19	; 0x13
    2162:	f5 cf       	rjmp	.-22     	; 0x214e <vfprintf+0x5fa>
    2164:	0f 15       	cp	r16, r15
    2166:	10 f4       	brcc	.+4      	; 0x216c <vfprintf+0x618>
    2168:	f0 1a       	sub	r15, r16
    216a:	01 c0       	rjmp	.+2      	; 0x216e <vfprintf+0x61a>
    216c:	f1 2c       	mov	r15, r1
    216e:	34 ff       	sbrs	r19, 4
    2170:	12 c0       	rjmp	.+36     	; 0x2196 <vfprintf+0x642>
    2172:	b6 01       	movw	r22, r12
    2174:	80 e3       	ldi	r24, 0x30	; 48
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	3b 8b       	std	Y+19, r19	; 0x13
    217a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    217e:	3b 89       	ldd	r19, Y+19	; 0x13
    2180:	32 ff       	sbrs	r19, 2
    2182:	17 c0       	rjmp	.+46     	; 0x21b2 <vfprintf+0x65e>
    2184:	31 fd       	sbrc	r19, 1
    2186:	03 c0       	rjmp	.+6      	; 0x218e <vfprintf+0x63a>
    2188:	88 e7       	ldi	r24, 0x78	; 120
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <vfprintf+0x63e>
    218e:	88 e5       	ldi	r24, 0x58	; 88
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	b6 01       	movw	r22, r12
    2194:	0c c0       	rjmp	.+24     	; 0x21ae <vfprintf+0x65a>
    2196:	83 2f       	mov	r24, r19
    2198:	86 78       	andi	r24, 0x86	; 134
    219a:	59 f0       	breq	.+22     	; 0x21b2 <vfprintf+0x65e>
    219c:	31 ff       	sbrs	r19, 1
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <vfprintf+0x650>
    21a0:	8b e2       	ldi	r24, 0x2B	; 43
    21a2:	01 c0       	rjmp	.+2      	; 0x21a6 <vfprintf+0x652>
    21a4:	80 e2       	ldi	r24, 0x20	; 32
    21a6:	37 fd       	sbrc	r19, 7
    21a8:	8d e2       	ldi	r24, 0x2D	; 45
    21aa:	b6 01       	movw	r22, r12
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    21b2:	e1 16       	cp	r14, r17
    21b4:	38 f4       	brcc	.+14     	; 0x21c4 <vfprintf+0x670>
    21b6:	b6 01       	movw	r22, r12
    21b8:	80 e3       	ldi	r24, 0x30	; 48
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    21c0:	11 50       	subi	r17, 0x01	; 1
    21c2:	f7 cf       	rjmp	.-18     	; 0x21b2 <vfprintf+0x65e>
    21c4:	ea 94       	dec	r14
    21c6:	f3 01       	movw	r30, r6
    21c8:	ee 0d       	add	r30, r14
    21ca:	f1 1d       	adc	r31, r1
    21cc:	80 81       	ld	r24, Z
    21ce:	b6 01       	movw	r22, r12
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    21d6:	e1 10       	cpse	r14, r1
    21d8:	f5 cf       	rjmp	.-22     	; 0x21c4 <vfprintf+0x670>
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <vfprintf+0x6b0>
    21dc:	f4 e0       	ldi	r31, 0x04	; 4
    21de:	ff 15       	cp	r31, r15
    21e0:	58 f5       	brcc	.+86     	; 0x2238 <vfprintf+0x6e4>
    21e2:	84 e0       	ldi	r24, 0x04	; 4
    21e4:	f8 1a       	sub	r15, r24
    21e6:	33 fe       	sbrs	r3, 3
    21e8:	1e c0       	rjmp	.+60     	; 0x2226 <vfprintf+0x6d2>
    21ea:	21 10       	cpse	r2, r1
    21ec:	26 c0       	rjmp	.+76     	; 0x223a <vfprintf+0x6e6>
    21ee:	03 ff       	sbrs	r16, 3
    21f0:	2a c0       	rjmp	.+84     	; 0x2246 <vfprintf+0x6f2>
    21f2:	06 ea       	ldi	r16, 0xA6	; 166
    21f4:	10 e0       	ldi	r17, 0x00	; 0
    21f6:	f3 2d       	mov	r31, r3
    21f8:	f0 71       	andi	r31, 0x10	; 16
    21fa:	3f 2e       	mov	r3, r31
    21fc:	f8 01       	movw	r30, r16
    21fe:	84 91       	lpm	r24, Z
    2200:	81 11       	cpse	r24, r1
    2202:	24 c0       	rjmp	.+72     	; 0x224c <vfprintf+0x6f8>
    2204:	ff 20       	and	r15, r15
    2206:	09 f4       	brne	.+2      	; 0x220a <vfprintf+0x6b6>
    2208:	e5 cc       	rjmp	.-1590   	; 0x1bd4 <vfprintf+0x80>
    220a:	b6 01       	movw	r22, r12
    220c:	80 e2       	ldi	r24, 0x20	; 32
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    2214:	fa 94       	dec	r15
    2216:	f6 cf       	rjmp	.-20     	; 0x2204 <vfprintf+0x6b0>
    2218:	f6 01       	movw	r30, r12
    221a:	86 81       	ldd	r24, Z+6	; 0x06
    221c:	97 81       	ldd	r25, Z+7	; 0x07
    221e:	26 c0       	rjmp	.+76     	; 0x226c <vfprintf+0x718>
    2220:	8f ef       	ldi	r24, 0xFF	; 255
    2222:	9f ef       	ldi	r25, 0xFF	; 255
    2224:	23 c0       	rjmp	.+70     	; 0x226c <vfprintf+0x718>
    2226:	b6 01       	movw	r22, r12
    2228:	80 e2       	ldi	r24, 0x20	; 32
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    2230:	fa 94       	dec	r15
    2232:	f1 10       	cpse	r15, r1
    2234:	f8 cf       	rjmp	.-16     	; 0x2226 <vfprintf+0x6d2>
    2236:	d9 cf       	rjmp	.-78     	; 0x21ea <vfprintf+0x696>
    2238:	f1 2c       	mov	r15, r1
    223a:	b6 01       	movw	r22, r12
    223c:	82 2d       	mov	r24, r2
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    2244:	d4 cf       	rjmp	.-88     	; 0x21ee <vfprintf+0x69a>
    2246:	0a ea       	ldi	r16, 0xAA	; 170
    2248:	10 e0       	ldi	r17, 0x00	; 0
    224a:	d5 cf       	rjmp	.-86     	; 0x21f6 <vfprintf+0x6a2>
    224c:	31 10       	cpse	r3, r1
    224e:	80 52       	subi	r24, 0x20	; 32
    2250:	b6 01       	movw	r22, r12
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <fputc>
    2258:	0f 5f       	subi	r16, 0xFF	; 255
    225a:	1f 4f       	sbci	r17, 0xFF	; 255
    225c:	cf cf       	rjmp	.-98     	; 0x21fc <vfprintf+0x6a8>
    225e:	23 e0       	ldi	r18, 0x03	; 3
    2260:	2f 15       	cp	r18, r15
    2262:	10 f4       	brcc	.+4      	; 0x2268 <vfprintf+0x714>
    2264:	83 e0       	ldi	r24, 0x03	; 3
    2266:	be cf       	rjmp	.-132    	; 0x21e4 <vfprintf+0x690>
    2268:	f1 2c       	mov	r15, r1
    226a:	c1 cf       	rjmp	.-126    	; 0x21ee <vfprintf+0x69a>
    226c:	63 96       	adiw	r28, 0x13	; 19
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	ff 90       	pop	r15
    2282:	ef 90       	pop	r14
    2284:	df 90       	pop	r13
    2286:	cf 90       	pop	r12
    2288:	bf 90       	pop	r11
    228a:	af 90       	pop	r10
    228c:	9f 90       	pop	r9
    228e:	8f 90       	pop	r8
    2290:	7f 90       	pop	r7
    2292:	6f 90       	pop	r6
    2294:	5f 90       	pop	r5
    2296:	4f 90       	pop	r4
    2298:	3f 90       	pop	r3
    229a:	2f 90       	pop	r2
    229c:	08 95       	ret

0000229e <__subsf3>:
    229e:	50 58       	subi	r21, 0x80	; 128

000022a0 <__addsf3>:
    22a0:	bb 27       	eor	r27, r27
    22a2:	aa 27       	eor	r26, r26
    22a4:	0e 94 67 11 	call	0x22ce	; 0x22ce <__addsf3x>
    22a8:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__fp_round>
    22ac:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_pscA>
    22b0:	38 f0       	brcs	.+14     	; 0x22c0 <__addsf3+0x20>
    22b2:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__fp_pscB>
    22b6:	20 f0       	brcs	.+8      	; 0x22c0 <__addsf3+0x20>
    22b8:	39 f4       	brne	.+14     	; 0x22c8 <__addsf3+0x28>
    22ba:	9f 3f       	cpi	r25, 0xFF	; 255
    22bc:	19 f4       	brne	.+6      	; 0x22c4 <__addsf3+0x24>
    22be:	26 f4       	brtc	.+8      	; 0x22c8 <__addsf3+0x28>
    22c0:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__fp_nan>
    22c4:	0e f4       	brtc	.+2      	; 0x22c8 <__addsf3+0x28>
    22c6:	e0 95       	com	r30
    22c8:	e7 fb       	bst	r30, 7
    22ca:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_inf>

000022ce <__addsf3x>:
    22ce:	e9 2f       	mov	r30, r25
    22d0:	0e 94 86 13 	call	0x270c	; 0x270c <__fp_split3>
    22d4:	58 f3       	brcs	.-42     	; 0x22ac <__addsf3+0xc>
    22d6:	ba 17       	cp	r27, r26
    22d8:	62 07       	cpc	r22, r18
    22da:	73 07       	cpc	r23, r19
    22dc:	84 07       	cpc	r24, r20
    22de:	95 07       	cpc	r25, r21
    22e0:	20 f0       	brcs	.+8      	; 0x22ea <__addsf3x+0x1c>
    22e2:	79 f4       	brne	.+30     	; 0x2302 <__addsf3x+0x34>
    22e4:	a6 f5       	brtc	.+104    	; 0x234e <__addsf3x+0x80>
    22e6:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__fp_zero>
    22ea:	0e f4       	brtc	.+2      	; 0x22ee <__addsf3x+0x20>
    22ec:	e0 95       	com	r30
    22ee:	0b 2e       	mov	r0, r27
    22f0:	ba 2f       	mov	r27, r26
    22f2:	a0 2d       	mov	r26, r0
    22f4:	0b 01       	movw	r0, r22
    22f6:	b9 01       	movw	r22, r18
    22f8:	90 01       	movw	r18, r0
    22fa:	0c 01       	movw	r0, r24
    22fc:	ca 01       	movw	r24, r20
    22fe:	a0 01       	movw	r20, r0
    2300:	11 24       	eor	r1, r1
    2302:	ff 27       	eor	r31, r31
    2304:	59 1b       	sub	r21, r25
    2306:	99 f0       	breq	.+38     	; 0x232e <__addsf3x+0x60>
    2308:	59 3f       	cpi	r21, 0xF9	; 249
    230a:	50 f4       	brcc	.+20     	; 0x2320 <__addsf3x+0x52>
    230c:	50 3e       	cpi	r21, 0xE0	; 224
    230e:	68 f1       	brcs	.+90     	; 0x236a <__addsf3x+0x9c>
    2310:	1a 16       	cp	r1, r26
    2312:	f0 40       	sbci	r31, 0x00	; 0
    2314:	a2 2f       	mov	r26, r18
    2316:	23 2f       	mov	r18, r19
    2318:	34 2f       	mov	r19, r20
    231a:	44 27       	eor	r20, r20
    231c:	58 5f       	subi	r21, 0xF8	; 248
    231e:	f3 cf       	rjmp	.-26     	; 0x2306 <__addsf3x+0x38>
    2320:	46 95       	lsr	r20
    2322:	37 95       	ror	r19
    2324:	27 95       	ror	r18
    2326:	a7 95       	ror	r26
    2328:	f0 40       	sbci	r31, 0x00	; 0
    232a:	53 95       	inc	r21
    232c:	c9 f7       	brne	.-14     	; 0x2320 <__addsf3x+0x52>
    232e:	7e f4       	brtc	.+30     	; 0x234e <__addsf3x+0x80>
    2330:	1f 16       	cp	r1, r31
    2332:	ba 0b       	sbc	r27, r26
    2334:	62 0b       	sbc	r22, r18
    2336:	73 0b       	sbc	r23, r19
    2338:	84 0b       	sbc	r24, r20
    233a:	ba f0       	brmi	.+46     	; 0x236a <__addsf3x+0x9c>
    233c:	91 50       	subi	r25, 0x01	; 1
    233e:	a1 f0       	breq	.+40     	; 0x2368 <__addsf3x+0x9a>
    2340:	ff 0f       	add	r31, r31
    2342:	bb 1f       	adc	r27, r27
    2344:	66 1f       	adc	r22, r22
    2346:	77 1f       	adc	r23, r23
    2348:	88 1f       	adc	r24, r24
    234a:	c2 f7       	brpl	.-16     	; 0x233c <__addsf3x+0x6e>
    234c:	0e c0       	rjmp	.+28     	; 0x236a <__addsf3x+0x9c>
    234e:	ba 0f       	add	r27, r26
    2350:	62 1f       	adc	r22, r18
    2352:	73 1f       	adc	r23, r19
    2354:	84 1f       	adc	r24, r20
    2356:	48 f4       	brcc	.+18     	; 0x236a <__addsf3x+0x9c>
    2358:	87 95       	ror	r24
    235a:	77 95       	ror	r23
    235c:	67 95       	ror	r22
    235e:	b7 95       	ror	r27
    2360:	f7 95       	ror	r31
    2362:	9e 3f       	cpi	r25, 0xFE	; 254
    2364:	08 f0       	brcs	.+2      	; 0x2368 <__addsf3x+0x9a>
    2366:	b0 cf       	rjmp	.-160    	; 0x22c8 <__addsf3+0x28>
    2368:	93 95       	inc	r25
    236a:	88 0f       	add	r24, r24
    236c:	08 f0       	brcs	.+2      	; 0x2370 <__addsf3x+0xa2>
    236e:	99 27       	eor	r25, r25
    2370:	ee 0f       	add	r30, r30
    2372:	97 95       	ror	r25
    2374:	87 95       	ror	r24
    2376:	08 95       	ret

00002378 <__cmpsf2>:
    2378:	0e 94 11 13 	call	0x2622	; 0x2622 <__fp_cmp>
    237c:	08 f4       	brcc	.+2      	; 0x2380 <__cmpsf2+0x8>
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	08 95       	ret

00002382 <__divsf3>:
    2382:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__divsf3x>
    2386:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__fp_round>
    238a:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__fp_pscB>
    238e:	58 f0       	brcs	.+22     	; 0x23a6 <__divsf3+0x24>
    2390:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_pscA>
    2394:	40 f0       	brcs	.+16     	; 0x23a6 <__divsf3+0x24>
    2396:	29 f4       	brne	.+10     	; 0x23a2 <__divsf3+0x20>
    2398:	5f 3f       	cpi	r21, 0xFF	; 255
    239a:	29 f0       	breq	.+10     	; 0x23a6 <__divsf3+0x24>
    239c:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_inf>
    23a0:	51 11       	cpse	r21, r1
    23a2:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__fp_szero>
    23a6:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__fp_nan>

000023aa <__divsf3x>:
    23aa:	0e 94 86 13 	call	0x270c	; 0x270c <__fp_split3>
    23ae:	68 f3       	brcs	.-38     	; 0x238a <__divsf3+0x8>

000023b0 <__divsf3_pse>:
    23b0:	99 23       	and	r25, r25
    23b2:	b1 f3       	breq	.-20     	; 0x23a0 <__divsf3+0x1e>
    23b4:	55 23       	and	r21, r21
    23b6:	91 f3       	breq	.-28     	; 0x239c <__divsf3+0x1a>
    23b8:	95 1b       	sub	r25, r21
    23ba:	55 0b       	sbc	r21, r21
    23bc:	bb 27       	eor	r27, r27
    23be:	aa 27       	eor	r26, r26
    23c0:	62 17       	cp	r22, r18
    23c2:	73 07       	cpc	r23, r19
    23c4:	84 07       	cpc	r24, r20
    23c6:	38 f0       	brcs	.+14     	; 0x23d6 <__divsf3_pse+0x26>
    23c8:	9f 5f       	subi	r25, 0xFF	; 255
    23ca:	5f 4f       	sbci	r21, 0xFF	; 255
    23cc:	22 0f       	add	r18, r18
    23ce:	33 1f       	adc	r19, r19
    23d0:	44 1f       	adc	r20, r20
    23d2:	aa 1f       	adc	r26, r26
    23d4:	a9 f3       	breq	.-22     	; 0x23c0 <__divsf3_pse+0x10>
    23d6:	35 d0       	rcall	.+106    	; 0x2442 <__divsf3_pse+0x92>
    23d8:	0e 2e       	mov	r0, r30
    23da:	3a f0       	brmi	.+14     	; 0x23ea <__divsf3_pse+0x3a>
    23dc:	e0 e8       	ldi	r30, 0x80	; 128
    23de:	32 d0       	rcall	.+100    	; 0x2444 <__divsf3_pse+0x94>
    23e0:	91 50       	subi	r25, 0x01	; 1
    23e2:	50 40       	sbci	r21, 0x00	; 0
    23e4:	e6 95       	lsr	r30
    23e6:	00 1c       	adc	r0, r0
    23e8:	ca f7       	brpl	.-14     	; 0x23dc <__divsf3_pse+0x2c>
    23ea:	2b d0       	rcall	.+86     	; 0x2442 <__divsf3_pse+0x92>
    23ec:	fe 2f       	mov	r31, r30
    23ee:	29 d0       	rcall	.+82     	; 0x2442 <__divsf3_pse+0x92>
    23f0:	66 0f       	add	r22, r22
    23f2:	77 1f       	adc	r23, r23
    23f4:	88 1f       	adc	r24, r24
    23f6:	bb 1f       	adc	r27, r27
    23f8:	26 17       	cp	r18, r22
    23fa:	37 07       	cpc	r19, r23
    23fc:	48 07       	cpc	r20, r24
    23fe:	ab 07       	cpc	r26, r27
    2400:	b0 e8       	ldi	r27, 0x80	; 128
    2402:	09 f0       	breq	.+2      	; 0x2406 <__divsf3_pse+0x56>
    2404:	bb 0b       	sbc	r27, r27
    2406:	80 2d       	mov	r24, r0
    2408:	bf 01       	movw	r22, r30
    240a:	ff 27       	eor	r31, r31
    240c:	93 58       	subi	r25, 0x83	; 131
    240e:	5f 4f       	sbci	r21, 0xFF	; 255
    2410:	3a f0       	brmi	.+14     	; 0x2420 <__divsf3_pse+0x70>
    2412:	9e 3f       	cpi	r25, 0xFE	; 254
    2414:	51 05       	cpc	r21, r1
    2416:	78 f0       	brcs	.+30     	; 0x2436 <__divsf3_pse+0x86>
    2418:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_inf>
    241c:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__fp_szero>
    2420:	5f 3f       	cpi	r21, 0xFF	; 255
    2422:	e4 f3       	brlt	.-8      	; 0x241c <__divsf3_pse+0x6c>
    2424:	98 3e       	cpi	r25, 0xE8	; 232
    2426:	d4 f3       	brlt	.-12     	; 0x241c <__divsf3_pse+0x6c>
    2428:	86 95       	lsr	r24
    242a:	77 95       	ror	r23
    242c:	67 95       	ror	r22
    242e:	b7 95       	ror	r27
    2430:	f7 95       	ror	r31
    2432:	9f 5f       	subi	r25, 0xFF	; 255
    2434:	c9 f7       	brne	.-14     	; 0x2428 <__divsf3_pse+0x78>
    2436:	88 0f       	add	r24, r24
    2438:	91 1d       	adc	r25, r1
    243a:	96 95       	lsr	r25
    243c:	87 95       	ror	r24
    243e:	97 f9       	bld	r25, 7
    2440:	08 95       	ret
    2442:	e1 e0       	ldi	r30, 0x01	; 1
    2444:	66 0f       	add	r22, r22
    2446:	77 1f       	adc	r23, r23
    2448:	88 1f       	adc	r24, r24
    244a:	bb 1f       	adc	r27, r27
    244c:	62 17       	cp	r22, r18
    244e:	73 07       	cpc	r23, r19
    2450:	84 07       	cpc	r24, r20
    2452:	ba 07       	cpc	r27, r26
    2454:	20 f0       	brcs	.+8      	; 0x245e <__divsf3_pse+0xae>
    2456:	62 1b       	sub	r22, r18
    2458:	73 0b       	sbc	r23, r19
    245a:	84 0b       	sbc	r24, r20
    245c:	ba 0b       	sbc	r27, r26
    245e:	ee 1f       	adc	r30, r30
    2460:	88 f7       	brcc	.-30     	; 0x2444 <__divsf3_pse+0x94>
    2462:	e0 95       	com	r30
    2464:	08 95       	ret

00002466 <__fixsfsi>:
    2466:	0e 94 3a 12 	call	0x2474	; 0x2474 <__fixunssfsi>
    246a:	68 94       	set
    246c:	b1 11       	cpse	r27, r1
    246e:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__fp_szero>
    2472:	08 95       	ret

00002474 <__fixunssfsi>:
    2474:	0e 94 8e 13 	call	0x271c	; 0x271c <__fp_splitA>
    2478:	88 f0       	brcs	.+34     	; 0x249c <__fixunssfsi+0x28>
    247a:	9f 57       	subi	r25, 0x7F	; 127
    247c:	98 f0       	brcs	.+38     	; 0x24a4 <__fixunssfsi+0x30>
    247e:	b9 2f       	mov	r27, r25
    2480:	99 27       	eor	r25, r25
    2482:	b7 51       	subi	r27, 0x17	; 23
    2484:	b0 f0       	brcs	.+44     	; 0x24b2 <__fixunssfsi+0x3e>
    2486:	e1 f0       	breq	.+56     	; 0x24c0 <__fixunssfsi+0x4c>
    2488:	66 0f       	add	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	1a f0       	brmi	.+6      	; 0x2498 <__fixunssfsi+0x24>
    2492:	ba 95       	dec	r27
    2494:	c9 f7       	brne	.-14     	; 0x2488 <__fixunssfsi+0x14>
    2496:	14 c0       	rjmp	.+40     	; 0x24c0 <__fixunssfsi+0x4c>
    2498:	b1 30       	cpi	r27, 0x01	; 1
    249a:	91 f0       	breq	.+36     	; 0x24c0 <__fixunssfsi+0x4c>
    249c:	0e 94 c0 13 	call	0x2780	; 0x2780 <__fp_zero>
    24a0:	b1 e0       	ldi	r27, 0x01	; 1
    24a2:	08 95       	ret
    24a4:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__fp_zero>
    24a8:	67 2f       	mov	r22, r23
    24aa:	78 2f       	mov	r23, r24
    24ac:	88 27       	eor	r24, r24
    24ae:	b8 5f       	subi	r27, 0xF8	; 248
    24b0:	39 f0       	breq	.+14     	; 0x24c0 <__fixunssfsi+0x4c>
    24b2:	b9 3f       	cpi	r27, 0xF9	; 249
    24b4:	cc f3       	brlt	.-14     	; 0x24a8 <__fixunssfsi+0x34>
    24b6:	86 95       	lsr	r24
    24b8:	77 95       	ror	r23
    24ba:	67 95       	ror	r22
    24bc:	b3 95       	inc	r27
    24be:	d9 f7       	brne	.-10     	; 0x24b6 <__fixunssfsi+0x42>
    24c0:	3e f4       	brtc	.+14     	; 0x24d0 <__fixunssfsi+0x5c>
    24c2:	90 95       	com	r25
    24c4:	80 95       	com	r24
    24c6:	70 95       	com	r23
    24c8:	61 95       	neg	r22
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	8f 4f       	sbci	r24, 0xFF	; 255
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	08 95       	ret

000024d2 <__floatunsisf>:
    24d2:	e8 94       	clt
    24d4:	09 c0       	rjmp	.+18     	; 0x24e8 <__floatsisf+0x12>

000024d6 <__floatsisf>:
    24d6:	97 fb       	bst	r25, 7
    24d8:	3e f4       	brtc	.+14     	; 0x24e8 <__floatsisf+0x12>
    24da:	90 95       	com	r25
    24dc:	80 95       	com	r24
    24de:	70 95       	com	r23
    24e0:	61 95       	neg	r22
    24e2:	7f 4f       	sbci	r23, 0xFF	; 255
    24e4:	8f 4f       	sbci	r24, 0xFF	; 255
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	99 23       	and	r25, r25
    24ea:	a9 f0       	breq	.+42     	; 0x2516 <__floatsisf+0x40>
    24ec:	f9 2f       	mov	r31, r25
    24ee:	96 e9       	ldi	r25, 0x96	; 150
    24f0:	bb 27       	eor	r27, r27
    24f2:	93 95       	inc	r25
    24f4:	f6 95       	lsr	r31
    24f6:	87 95       	ror	r24
    24f8:	77 95       	ror	r23
    24fa:	67 95       	ror	r22
    24fc:	b7 95       	ror	r27
    24fe:	f1 11       	cpse	r31, r1
    2500:	f8 cf       	rjmp	.-16     	; 0x24f2 <__floatsisf+0x1c>
    2502:	fa f4       	brpl	.+62     	; 0x2542 <__floatsisf+0x6c>
    2504:	bb 0f       	add	r27, r27
    2506:	11 f4       	brne	.+4      	; 0x250c <__floatsisf+0x36>
    2508:	60 ff       	sbrs	r22, 0
    250a:	1b c0       	rjmp	.+54     	; 0x2542 <__floatsisf+0x6c>
    250c:	6f 5f       	subi	r22, 0xFF	; 255
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	8f 4f       	sbci	r24, 0xFF	; 255
    2512:	9f 4f       	sbci	r25, 0xFF	; 255
    2514:	16 c0       	rjmp	.+44     	; 0x2542 <__floatsisf+0x6c>
    2516:	88 23       	and	r24, r24
    2518:	11 f0       	breq	.+4      	; 0x251e <__floatsisf+0x48>
    251a:	96 e9       	ldi	r25, 0x96	; 150
    251c:	11 c0       	rjmp	.+34     	; 0x2540 <__floatsisf+0x6a>
    251e:	77 23       	and	r23, r23
    2520:	21 f0       	breq	.+8      	; 0x252a <__floatsisf+0x54>
    2522:	9e e8       	ldi	r25, 0x8E	; 142
    2524:	87 2f       	mov	r24, r23
    2526:	76 2f       	mov	r23, r22
    2528:	05 c0       	rjmp	.+10     	; 0x2534 <__floatsisf+0x5e>
    252a:	66 23       	and	r22, r22
    252c:	71 f0       	breq	.+28     	; 0x254a <__floatsisf+0x74>
    252e:	96 e8       	ldi	r25, 0x86	; 134
    2530:	86 2f       	mov	r24, r22
    2532:	70 e0       	ldi	r23, 0x00	; 0
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	2a f0       	brmi	.+10     	; 0x2542 <__floatsisf+0x6c>
    2538:	9a 95       	dec	r25
    253a:	66 0f       	add	r22, r22
    253c:	77 1f       	adc	r23, r23
    253e:	88 1f       	adc	r24, r24
    2540:	da f7       	brpl	.-10     	; 0x2538 <__floatsisf+0x62>
    2542:	88 0f       	add	r24, r24
    2544:	96 95       	lsr	r25
    2546:	87 95       	ror	r24
    2548:	97 f9       	bld	r25, 7
    254a:	08 95       	ret

0000254c <floor>:
    254c:	0e 94 a8 13 	call	0x2750	; 0x2750 <__fp_trunc>
    2550:	90 f0       	brcs	.+36     	; 0x2576 <floor+0x2a>
    2552:	9f 37       	cpi	r25, 0x7F	; 127
    2554:	48 f4       	brcc	.+18     	; 0x2568 <floor+0x1c>
    2556:	91 11       	cpse	r25, r1
    2558:	16 f0       	brts	.+4      	; 0x255e <floor+0x12>
    255a:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__fp_szero>
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	80 e8       	ldi	r24, 0x80	; 128
    2564:	9f eb       	ldi	r25, 0xBF	; 191
    2566:	08 95       	ret
    2568:	26 f4       	brtc	.+8      	; 0x2572 <floor+0x26>
    256a:	1b 16       	cp	r1, r27
    256c:	61 1d       	adc	r22, r1
    256e:	71 1d       	adc	r23, r1
    2570:	81 1d       	adc	r24, r1
    2572:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__fp_mintl>
    2576:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__fp_mpack>
    257a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_pscA>
    257e:	20 f0       	brcs	.+8      	; 0x2588 <floor+0x3c>
    2580:	19 f0       	breq	.+6      	; 0x2588 <floor+0x3c>
    2582:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__fp_pscB>
    2586:	50 f4       	brcc	.+20     	; 0x259c <fmod+0xc>
    2588:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__fp_nan>
    258c:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__fp_szero>

00002590 <fmod>:
    2590:	e9 2f       	mov	r30, r25
    2592:	0e 94 86 13 	call	0x270c	; 0x270c <__fp_split3>
    2596:	88 f3       	brcs	.-30     	; 0x257a <floor+0x2e>
    2598:	55 23       	and	r21, r21
    259a:	b1 f3       	breq	.-20     	; 0x2588 <floor+0x3c>
    259c:	e7 fb       	bst	r30, 7
    259e:	62 17       	cp	r22, r18
    25a0:	73 07       	cpc	r23, r19
    25a2:	84 07       	cpc	r24, r20
    25a4:	95 07       	cpc	r25, r21
    25a6:	a8 f1       	brcs	.+106    	; 0x2612 <fmod+0x82>
    25a8:	89 f3       	breq	.-30     	; 0x258c <floor+0x40>
    25aa:	e9 2f       	mov	r30, r25
    25ac:	ff 27       	eor	r31, r31
    25ae:	88 23       	and	r24, r24
    25b0:	2a f0       	brmi	.+10     	; 0x25bc <fmod+0x2c>
    25b2:	31 97       	sbiw	r30, 0x01	; 1
    25b4:	66 0f       	add	r22, r22
    25b6:	77 1f       	adc	r23, r23
    25b8:	88 1f       	adc	r24, r24
    25ba:	da f7       	brpl	.-10     	; 0x25b2 <fmod+0x22>
    25bc:	95 2f       	mov	r25, r21
    25be:	55 27       	eor	r21, r21
    25c0:	44 23       	and	r20, r20
    25c2:	32 f0       	brmi	.+12     	; 0x25d0 <fmod+0x40>
    25c4:	91 50       	subi	r25, 0x01	; 1
    25c6:	50 40       	sbci	r21, 0x00	; 0
    25c8:	22 0f       	add	r18, r18
    25ca:	33 1f       	adc	r19, r19
    25cc:	44 1f       	adc	r20, r20
    25ce:	d2 f7       	brpl	.-12     	; 0x25c4 <fmod+0x34>
    25d0:	bb 27       	eor	r27, r27
    25d2:	e9 1b       	sub	r30, r25
    25d4:	f5 0b       	sbc	r31, r21
    25d6:	62 1b       	sub	r22, r18
    25d8:	73 0b       	sbc	r23, r19
    25da:	84 0b       	sbc	r24, r20
    25dc:	b1 09       	sbc	r27, r1
    25de:	b1 f2       	breq	.-84     	; 0x258c <floor+0x40>
    25e0:	22 f4       	brpl	.+8      	; 0x25ea <fmod+0x5a>
    25e2:	62 0f       	add	r22, r18
    25e4:	73 1f       	adc	r23, r19
    25e6:	84 1f       	adc	r24, r20
    25e8:	b1 1d       	adc	r27, r1
    25ea:	31 97       	sbiw	r30, 0x01	; 1
    25ec:	2a f0       	brmi	.+10     	; 0x25f8 <fmod+0x68>
    25ee:	66 0f       	add	r22, r22
    25f0:	77 1f       	adc	r23, r23
    25f2:	88 1f       	adc	r24, r24
    25f4:	bb 1f       	adc	r27, r27
    25f6:	ef cf       	rjmp	.-34     	; 0x25d6 <fmod+0x46>
    25f8:	91 50       	subi	r25, 0x01	; 1
    25fa:	50 40       	sbci	r21, 0x00	; 0
    25fc:	62 f0       	brmi	.+24     	; 0x2616 <fmod+0x86>
    25fe:	41 f0       	breq	.+16     	; 0x2610 <fmod+0x80>
    2600:	88 23       	and	r24, r24
    2602:	32 f0       	brmi	.+12     	; 0x2610 <fmod+0x80>
    2604:	66 0f       	add	r22, r22
    2606:	77 1f       	adc	r23, r23
    2608:	88 1f       	adc	r24, r24
    260a:	91 50       	subi	r25, 0x01	; 1
    260c:	50 40       	sbci	r21, 0x00	; 0
    260e:	c1 f7       	brne	.-16     	; 0x2600 <fmod+0x70>
    2610:	93 95       	inc	r25
    2612:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__fp_mpack>
    2616:	86 95       	lsr	r24
    2618:	77 95       	ror	r23
    261a:	67 95       	ror	r22
    261c:	9f 5f       	subi	r25, 0xFF	; 255
    261e:	d9 f7       	brne	.-10     	; 0x2616 <fmod+0x86>
    2620:	f7 cf       	rjmp	.-18     	; 0x2610 <fmod+0x80>

00002622 <__fp_cmp>:
    2622:	99 0f       	add	r25, r25
    2624:	00 08       	sbc	r0, r0
    2626:	55 0f       	add	r21, r21
    2628:	aa 0b       	sbc	r26, r26
    262a:	e0 e8       	ldi	r30, 0x80	; 128
    262c:	fe ef       	ldi	r31, 0xFE	; 254
    262e:	16 16       	cp	r1, r22
    2630:	17 06       	cpc	r1, r23
    2632:	e8 07       	cpc	r30, r24
    2634:	f9 07       	cpc	r31, r25
    2636:	c0 f0       	brcs	.+48     	; 0x2668 <__fp_cmp+0x46>
    2638:	12 16       	cp	r1, r18
    263a:	13 06       	cpc	r1, r19
    263c:	e4 07       	cpc	r30, r20
    263e:	f5 07       	cpc	r31, r21
    2640:	98 f0       	brcs	.+38     	; 0x2668 <__fp_cmp+0x46>
    2642:	62 1b       	sub	r22, r18
    2644:	73 0b       	sbc	r23, r19
    2646:	84 0b       	sbc	r24, r20
    2648:	95 0b       	sbc	r25, r21
    264a:	39 f4       	brne	.+14     	; 0x265a <__fp_cmp+0x38>
    264c:	0a 26       	eor	r0, r26
    264e:	61 f0       	breq	.+24     	; 0x2668 <__fp_cmp+0x46>
    2650:	23 2b       	or	r18, r19
    2652:	24 2b       	or	r18, r20
    2654:	25 2b       	or	r18, r21
    2656:	21 f4       	brne	.+8      	; 0x2660 <__fp_cmp+0x3e>
    2658:	08 95       	ret
    265a:	0a 26       	eor	r0, r26
    265c:	09 f4       	brne	.+2      	; 0x2660 <__fp_cmp+0x3e>
    265e:	a1 40       	sbci	r26, 0x01	; 1
    2660:	a6 95       	lsr	r26
    2662:	8f ef       	ldi	r24, 0xFF	; 255
    2664:	81 1d       	adc	r24, r1
    2666:	81 1d       	adc	r24, r1
    2668:	08 95       	ret

0000266a <__fp_inf>:
    266a:	97 f9       	bld	r25, 7
    266c:	9f 67       	ori	r25, 0x7F	; 127
    266e:	80 e8       	ldi	r24, 0x80	; 128
    2670:	70 e0       	ldi	r23, 0x00	; 0
    2672:	60 e0       	ldi	r22, 0x00	; 0
    2674:	08 95       	ret

00002676 <__fp_mintl>:
    2676:	88 23       	and	r24, r24
    2678:	71 f4       	brne	.+28     	; 0x2696 <__fp_mintl+0x20>
    267a:	77 23       	and	r23, r23
    267c:	21 f0       	breq	.+8      	; 0x2686 <__fp_mintl+0x10>
    267e:	98 50       	subi	r25, 0x08	; 8
    2680:	87 2b       	or	r24, r23
    2682:	76 2f       	mov	r23, r22
    2684:	07 c0       	rjmp	.+14     	; 0x2694 <__fp_mintl+0x1e>
    2686:	66 23       	and	r22, r22
    2688:	11 f4       	brne	.+4      	; 0x268e <__fp_mintl+0x18>
    268a:	99 27       	eor	r25, r25
    268c:	0d c0       	rjmp	.+26     	; 0x26a8 <__fp_mintl+0x32>
    268e:	90 51       	subi	r25, 0x10	; 16
    2690:	86 2b       	or	r24, r22
    2692:	70 e0       	ldi	r23, 0x00	; 0
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	2a f0       	brmi	.+10     	; 0x26a2 <__fp_mintl+0x2c>
    2698:	9a 95       	dec	r25
    269a:	66 0f       	add	r22, r22
    269c:	77 1f       	adc	r23, r23
    269e:	88 1f       	adc	r24, r24
    26a0:	da f7       	brpl	.-10     	; 0x2698 <__fp_mintl+0x22>
    26a2:	88 0f       	add	r24, r24
    26a4:	96 95       	lsr	r25
    26a6:	87 95       	ror	r24
    26a8:	97 f9       	bld	r25, 7
    26aa:	08 95       	ret

000026ac <__fp_mpack>:
    26ac:	9f 3f       	cpi	r25, 0xFF	; 255
    26ae:	31 f0       	breq	.+12     	; 0x26bc <__fp_mpack_finite+0xc>

000026b0 <__fp_mpack_finite>:
    26b0:	91 50       	subi	r25, 0x01	; 1
    26b2:	20 f4       	brcc	.+8      	; 0x26bc <__fp_mpack_finite+0xc>
    26b4:	87 95       	ror	r24
    26b6:	77 95       	ror	r23
    26b8:	67 95       	ror	r22
    26ba:	b7 95       	ror	r27
    26bc:	88 0f       	add	r24, r24
    26be:	91 1d       	adc	r25, r1
    26c0:	96 95       	lsr	r25
    26c2:	87 95       	ror	r24
    26c4:	97 f9       	bld	r25, 7
    26c6:	08 95       	ret

000026c8 <__fp_nan>:
    26c8:	9f ef       	ldi	r25, 0xFF	; 255
    26ca:	80 ec       	ldi	r24, 0xC0	; 192
    26cc:	08 95       	ret

000026ce <__fp_pscA>:
    26ce:	00 24       	eor	r0, r0
    26d0:	0a 94       	dec	r0
    26d2:	16 16       	cp	r1, r22
    26d4:	17 06       	cpc	r1, r23
    26d6:	18 06       	cpc	r1, r24
    26d8:	09 06       	cpc	r0, r25
    26da:	08 95       	ret

000026dc <__fp_pscB>:
    26dc:	00 24       	eor	r0, r0
    26de:	0a 94       	dec	r0
    26e0:	12 16       	cp	r1, r18
    26e2:	13 06       	cpc	r1, r19
    26e4:	14 06       	cpc	r1, r20
    26e6:	05 06       	cpc	r0, r21
    26e8:	08 95       	ret

000026ea <__fp_round>:
    26ea:	09 2e       	mov	r0, r25
    26ec:	03 94       	inc	r0
    26ee:	00 0c       	add	r0, r0
    26f0:	11 f4       	brne	.+4      	; 0x26f6 <__fp_round+0xc>
    26f2:	88 23       	and	r24, r24
    26f4:	52 f0       	brmi	.+20     	; 0x270a <__fp_round+0x20>
    26f6:	bb 0f       	add	r27, r27
    26f8:	40 f4       	brcc	.+16     	; 0x270a <__fp_round+0x20>
    26fa:	bf 2b       	or	r27, r31
    26fc:	11 f4       	brne	.+4      	; 0x2702 <__fp_round+0x18>
    26fe:	60 ff       	sbrs	r22, 0
    2700:	04 c0       	rjmp	.+8      	; 0x270a <__fp_round+0x20>
    2702:	6f 5f       	subi	r22, 0xFF	; 255
    2704:	7f 4f       	sbci	r23, 0xFF	; 255
    2706:	8f 4f       	sbci	r24, 0xFF	; 255
    2708:	9f 4f       	sbci	r25, 0xFF	; 255
    270a:	08 95       	ret

0000270c <__fp_split3>:
    270c:	57 fd       	sbrc	r21, 7
    270e:	90 58       	subi	r25, 0x80	; 128
    2710:	44 0f       	add	r20, r20
    2712:	55 1f       	adc	r21, r21
    2714:	59 f0       	breq	.+22     	; 0x272c <__fp_splitA+0x10>
    2716:	5f 3f       	cpi	r21, 0xFF	; 255
    2718:	71 f0       	breq	.+28     	; 0x2736 <__fp_splitA+0x1a>
    271a:	47 95       	ror	r20

0000271c <__fp_splitA>:
    271c:	88 0f       	add	r24, r24
    271e:	97 fb       	bst	r25, 7
    2720:	99 1f       	adc	r25, r25
    2722:	61 f0       	breq	.+24     	; 0x273c <__fp_splitA+0x20>
    2724:	9f 3f       	cpi	r25, 0xFF	; 255
    2726:	79 f0       	breq	.+30     	; 0x2746 <__fp_splitA+0x2a>
    2728:	87 95       	ror	r24
    272a:	08 95       	ret
    272c:	12 16       	cp	r1, r18
    272e:	13 06       	cpc	r1, r19
    2730:	14 06       	cpc	r1, r20
    2732:	55 1f       	adc	r21, r21
    2734:	f2 cf       	rjmp	.-28     	; 0x271a <__fp_split3+0xe>
    2736:	46 95       	lsr	r20
    2738:	f1 df       	rcall	.-30     	; 0x271c <__fp_splitA>
    273a:	08 c0       	rjmp	.+16     	; 0x274c <__fp_splitA+0x30>
    273c:	16 16       	cp	r1, r22
    273e:	17 06       	cpc	r1, r23
    2740:	18 06       	cpc	r1, r24
    2742:	99 1f       	adc	r25, r25
    2744:	f1 cf       	rjmp	.-30     	; 0x2728 <__fp_splitA+0xc>
    2746:	86 95       	lsr	r24
    2748:	71 05       	cpc	r23, r1
    274a:	61 05       	cpc	r22, r1
    274c:	08 94       	sec
    274e:	08 95       	ret

00002750 <__fp_trunc>:
    2750:	0e 94 8e 13 	call	0x271c	; 0x271c <__fp_splitA>
    2754:	a0 f0       	brcs	.+40     	; 0x277e <__fp_trunc+0x2e>
    2756:	be e7       	ldi	r27, 0x7E	; 126
    2758:	b9 17       	cp	r27, r25
    275a:	88 f4       	brcc	.+34     	; 0x277e <__fp_trunc+0x2e>
    275c:	bb 27       	eor	r27, r27
    275e:	9f 38       	cpi	r25, 0x8F	; 143
    2760:	60 f4       	brcc	.+24     	; 0x277a <__fp_trunc+0x2a>
    2762:	16 16       	cp	r1, r22
    2764:	b1 1d       	adc	r27, r1
    2766:	67 2f       	mov	r22, r23
    2768:	78 2f       	mov	r23, r24
    276a:	88 27       	eor	r24, r24
    276c:	98 5f       	subi	r25, 0xF8	; 248
    276e:	f7 cf       	rjmp	.-18     	; 0x275e <__fp_trunc+0xe>
    2770:	86 95       	lsr	r24
    2772:	77 95       	ror	r23
    2774:	67 95       	ror	r22
    2776:	b1 1d       	adc	r27, r1
    2778:	93 95       	inc	r25
    277a:	96 39       	cpi	r25, 0x96	; 150
    277c:	c8 f3       	brcs	.-14     	; 0x2770 <__fp_trunc+0x20>
    277e:	08 95       	ret

00002780 <__fp_zero>:
    2780:	e8 94       	clt

00002782 <__fp_szero>:
    2782:	bb 27       	eor	r27, r27
    2784:	66 27       	eor	r22, r22
    2786:	77 27       	eor	r23, r23
    2788:	cb 01       	movw	r24, r22
    278a:	97 f9       	bld	r25, 7
    278c:	08 95       	ret

0000278e <__mulsf3>:
    278e:	0e 94 da 13 	call	0x27b4	; 0x27b4 <__mulsf3x>
    2792:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__fp_round>
    2796:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_pscA>
    279a:	38 f0       	brcs	.+14     	; 0x27aa <__mulsf3+0x1c>
    279c:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__fp_pscB>
    27a0:	20 f0       	brcs	.+8      	; 0x27aa <__mulsf3+0x1c>
    27a2:	95 23       	and	r25, r21
    27a4:	11 f0       	breq	.+4      	; 0x27aa <__mulsf3+0x1c>
    27a6:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_inf>
    27aa:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__fp_nan>
    27ae:	11 24       	eor	r1, r1
    27b0:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__fp_szero>

000027b4 <__mulsf3x>:
    27b4:	0e 94 86 13 	call	0x270c	; 0x270c <__fp_split3>
    27b8:	70 f3       	brcs	.-36     	; 0x2796 <__mulsf3+0x8>

000027ba <__mulsf3_pse>:
    27ba:	95 9f       	mul	r25, r21
    27bc:	c1 f3       	breq	.-16     	; 0x27ae <__mulsf3+0x20>
    27be:	95 0f       	add	r25, r21
    27c0:	50 e0       	ldi	r21, 0x00	; 0
    27c2:	55 1f       	adc	r21, r21
    27c4:	62 9f       	mul	r22, r18
    27c6:	f0 01       	movw	r30, r0
    27c8:	72 9f       	mul	r23, r18
    27ca:	bb 27       	eor	r27, r27
    27cc:	f0 0d       	add	r31, r0
    27ce:	b1 1d       	adc	r27, r1
    27d0:	63 9f       	mul	r22, r19
    27d2:	aa 27       	eor	r26, r26
    27d4:	f0 0d       	add	r31, r0
    27d6:	b1 1d       	adc	r27, r1
    27d8:	aa 1f       	adc	r26, r26
    27da:	64 9f       	mul	r22, r20
    27dc:	66 27       	eor	r22, r22
    27de:	b0 0d       	add	r27, r0
    27e0:	a1 1d       	adc	r26, r1
    27e2:	66 1f       	adc	r22, r22
    27e4:	82 9f       	mul	r24, r18
    27e6:	22 27       	eor	r18, r18
    27e8:	b0 0d       	add	r27, r0
    27ea:	a1 1d       	adc	r26, r1
    27ec:	62 1f       	adc	r22, r18
    27ee:	73 9f       	mul	r23, r19
    27f0:	b0 0d       	add	r27, r0
    27f2:	a1 1d       	adc	r26, r1
    27f4:	62 1f       	adc	r22, r18
    27f6:	83 9f       	mul	r24, r19
    27f8:	a0 0d       	add	r26, r0
    27fa:	61 1d       	adc	r22, r1
    27fc:	22 1f       	adc	r18, r18
    27fe:	74 9f       	mul	r23, r20
    2800:	33 27       	eor	r19, r19
    2802:	a0 0d       	add	r26, r0
    2804:	61 1d       	adc	r22, r1
    2806:	23 1f       	adc	r18, r19
    2808:	84 9f       	mul	r24, r20
    280a:	60 0d       	add	r22, r0
    280c:	21 1d       	adc	r18, r1
    280e:	82 2f       	mov	r24, r18
    2810:	76 2f       	mov	r23, r22
    2812:	6a 2f       	mov	r22, r26
    2814:	11 24       	eor	r1, r1
    2816:	9f 57       	subi	r25, 0x7F	; 127
    2818:	50 40       	sbci	r21, 0x00	; 0
    281a:	9a f0       	brmi	.+38     	; 0x2842 <__mulsf3_pse+0x88>
    281c:	f1 f0       	breq	.+60     	; 0x285a <__mulsf3_pse+0xa0>
    281e:	88 23       	and	r24, r24
    2820:	4a f0       	brmi	.+18     	; 0x2834 <__mulsf3_pse+0x7a>
    2822:	ee 0f       	add	r30, r30
    2824:	ff 1f       	adc	r31, r31
    2826:	bb 1f       	adc	r27, r27
    2828:	66 1f       	adc	r22, r22
    282a:	77 1f       	adc	r23, r23
    282c:	88 1f       	adc	r24, r24
    282e:	91 50       	subi	r25, 0x01	; 1
    2830:	50 40       	sbci	r21, 0x00	; 0
    2832:	a9 f7       	brne	.-22     	; 0x281e <__mulsf3_pse+0x64>
    2834:	9e 3f       	cpi	r25, 0xFE	; 254
    2836:	51 05       	cpc	r21, r1
    2838:	80 f0       	brcs	.+32     	; 0x285a <__mulsf3_pse+0xa0>
    283a:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_inf>
    283e:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__fp_szero>
    2842:	5f 3f       	cpi	r21, 0xFF	; 255
    2844:	e4 f3       	brlt	.-8      	; 0x283e <__mulsf3_pse+0x84>
    2846:	98 3e       	cpi	r25, 0xE8	; 232
    2848:	d4 f3       	brlt	.-12     	; 0x283e <__mulsf3_pse+0x84>
    284a:	86 95       	lsr	r24
    284c:	77 95       	ror	r23
    284e:	67 95       	ror	r22
    2850:	b7 95       	ror	r27
    2852:	f7 95       	ror	r31
    2854:	e7 95       	ror	r30
    2856:	9f 5f       	subi	r25, 0xFF	; 255
    2858:	c1 f7       	brne	.-16     	; 0x284a <__mulsf3_pse+0x90>
    285a:	fe 2b       	or	r31, r30
    285c:	88 0f       	add	r24, r24
    285e:	91 1d       	adc	r25, r1
    2860:	96 95       	lsr	r25
    2862:	87 95       	ror	r24
    2864:	97 f9       	bld	r25, 7
    2866:	08 95       	ret

00002868 <round>:
    2868:	0e 94 8e 13 	call	0x271c	; 0x271c <__fp_splitA>
    286c:	e8 f0       	brcs	.+58     	; 0x28a8 <round+0x40>
    286e:	9e 37       	cpi	r25, 0x7E	; 126
    2870:	e8 f0       	brcs	.+58     	; 0x28ac <round+0x44>
    2872:	96 39       	cpi	r25, 0x96	; 150
    2874:	b8 f4       	brcc	.+46     	; 0x28a4 <round+0x3c>
    2876:	9e 38       	cpi	r25, 0x8E	; 142
    2878:	48 f4       	brcc	.+18     	; 0x288c <round+0x24>
    287a:	67 2f       	mov	r22, r23
    287c:	78 2f       	mov	r23, r24
    287e:	88 27       	eor	r24, r24
    2880:	98 5f       	subi	r25, 0xF8	; 248
    2882:	f9 cf       	rjmp	.-14     	; 0x2876 <round+0xe>
    2884:	86 95       	lsr	r24
    2886:	77 95       	ror	r23
    2888:	67 95       	ror	r22
    288a:	93 95       	inc	r25
    288c:	95 39       	cpi	r25, 0x95	; 149
    288e:	d0 f3       	brcs	.-12     	; 0x2884 <round+0x1c>
    2890:	b6 2f       	mov	r27, r22
    2892:	b1 70       	andi	r27, 0x01	; 1
    2894:	6b 0f       	add	r22, r27
    2896:	71 1d       	adc	r23, r1
    2898:	81 1d       	adc	r24, r1
    289a:	20 f4       	brcc	.+8      	; 0x28a4 <round+0x3c>
    289c:	87 95       	ror	r24
    289e:	77 95       	ror	r23
    28a0:	67 95       	ror	r22
    28a2:	93 95       	inc	r25
    28a4:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__fp_mintl>
    28a8:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__fp_mpack>
    28ac:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__fp_szero>

000028b0 <__ftoa_engine>:
    28b0:	28 30       	cpi	r18, 0x08	; 8
    28b2:	08 f0       	brcs	.+2      	; 0x28b6 <__ftoa_engine+0x6>
    28b4:	27 e0       	ldi	r18, 0x07	; 7
    28b6:	33 27       	eor	r19, r19
    28b8:	da 01       	movw	r26, r20
    28ba:	99 0f       	add	r25, r25
    28bc:	31 1d       	adc	r19, r1
    28be:	87 fd       	sbrc	r24, 7
    28c0:	91 60       	ori	r25, 0x01	; 1
    28c2:	00 96       	adiw	r24, 0x00	; 0
    28c4:	61 05       	cpc	r22, r1
    28c6:	71 05       	cpc	r23, r1
    28c8:	39 f4       	brne	.+14     	; 0x28d8 <__ftoa_engine+0x28>
    28ca:	32 60       	ori	r19, 0x02	; 2
    28cc:	2e 5f       	subi	r18, 0xFE	; 254
    28ce:	3d 93       	st	X+, r19
    28d0:	30 e3       	ldi	r19, 0x30	; 48
    28d2:	2a 95       	dec	r18
    28d4:	e1 f7       	brne	.-8      	; 0x28ce <__ftoa_engine+0x1e>
    28d6:	08 95       	ret
    28d8:	9f 3f       	cpi	r25, 0xFF	; 255
    28da:	30 f0       	brcs	.+12     	; 0x28e8 <__ftoa_engine+0x38>
    28dc:	80 38       	cpi	r24, 0x80	; 128
    28de:	71 05       	cpc	r23, r1
    28e0:	61 05       	cpc	r22, r1
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <__ftoa_engine+0x36>
    28e4:	3c 5f       	subi	r19, 0xFC	; 252
    28e6:	3c 5f       	subi	r19, 0xFC	; 252
    28e8:	3d 93       	st	X+, r19
    28ea:	91 30       	cpi	r25, 0x01	; 1
    28ec:	08 f0       	brcs	.+2      	; 0x28f0 <__ftoa_engine+0x40>
    28ee:	80 68       	ori	r24, 0x80	; 128
    28f0:	91 1d       	adc	r25, r1
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	1f 93       	push	r17
    28f8:	0f 93       	push	r16
    28fa:	ff 92       	push	r15
    28fc:	ef 92       	push	r14
    28fe:	19 2f       	mov	r17, r25
    2900:	98 7f       	andi	r25, 0xF8	; 248
    2902:	96 95       	lsr	r25
    2904:	e9 2f       	mov	r30, r25
    2906:	96 95       	lsr	r25
    2908:	96 95       	lsr	r25
    290a:	e9 0f       	add	r30, r25
    290c:	ff 27       	eor	r31, r31
    290e:	e8 5f       	subi	r30, 0xF8	; 248
    2910:	fe 4f       	sbci	r31, 0xFE	; 254
    2912:	99 27       	eor	r25, r25
    2914:	33 27       	eor	r19, r19
    2916:	ee 24       	eor	r14, r14
    2918:	ff 24       	eor	r15, r15
    291a:	a7 01       	movw	r20, r14
    291c:	e7 01       	movw	r28, r14
    291e:	05 90       	lpm	r0, Z+
    2920:	08 94       	sec
    2922:	07 94       	ror	r0
    2924:	28 f4       	brcc	.+10     	; 0x2930 <__ftoa_engine+0x80>
    2926:	36 0f       	add	r19, r22
    2928:	e7 1e       	adc	r14, r23
    292a:	f8 1e       	adc	r15, r24
    292c:	49 1f       	adc	r20, r25
    292e:	51 1d       	adc	r21, r1
    2930:	66 0f       	add	r22, r22
    2932:	77 1f       	adc	r23, r23
    2934:	88 1f       	adc	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	06 94       	lsr	r0
    293a:	a1 f7       	brne	.-24     	; 0x2924 <__ftoa_engine+0x74>
    293c:	05 90       	lpm	r0, Z+
    293e:	07 94       	ror	r0
    2940:	28 f4       	brcc	.+10     	; 0x294c <__ftoa_engine+0x9c>
    2942:	e7 0e       	add	r14, r23
    2944:	f8 1e       	adc	r15, r24
    2946:	49 1f       	adc	r20, r25
    2948:	56 1f       	adc	r21, r22
    294a:	c1 1d       	adc	r28, r1
    294c:	77 0f       	add	r23, r23
    294e:	88 1f       	adc	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	66 1f       	adc	r22, r22
    2954:	06 94       	lsr	r0
    2956:	a1 f7       	brne	.-24     	; 0x2940 <__ftoa_engine+0x90>
    2958:	05 90       	lpm	r0, Z+
    295a:	07 94       	ror	r0
    295c:	28 f4       	brcc	.+10     	; 0x2968 <__ftoa_engine+0xb8>
    295e:	f8 0e       	add	r15, r24
    2960:	49 1f       	adc	r20, r25
    2962:	56 1f       	adc	r21, r22
    2964:	c7 1f       	adc	r28, r23
    2966:	d1 1d       	adc	r29, r1
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	66 1f       	adc	r22, r22
    296e:	77 1f       	adc	r23, r23
    2970:	06 94       	lsr	r0
    2972:	a1 f7       	brne	.-24     	; 0x295c <__ftoa_engine+0xac>
    2974:	05 90       	lpm	r0, Z+
    2976:	07 94       	ror	r0
    2978:	20 f4       	brcc	.+8      	; 0x2982 <__ftoa_engine+0xd2>
    297a:	49 0f       	add	r20, r25
    297c:	56 1f       	adc	r21, r22
    297e:	c7 1f       	adc	r28, r23
    2980:	d8 1f       	adc	r29, r24
    2982:	99 0f       	add	r25, r25
    2984:	66 1f       	adc	r22, r22
    2986:	77 1f       	adc	r23, r23
    2988:	88 1f       	adc	r24, r24
    298a:	06 94       	lsr	r0
    298c:	a9 f7       	brne	.-22     	; 0x2978 <__ftoa_engine+0xc8>
    298e:	84 91       	lpm	r24, Z
    2990:	10 95       	com	r17
    2992:	17 70       	andi	r17, 0x07	; 7
    2994:	41 f0       	breq	.+16     	; 0x29a6 <__ftoa_engine+0xf6>
    2996:	d6 95       	lsr	r29
    2998:	c7 95       	ror	r28
    299a:	57 95       	ror	r21
    299c:	47 95       	ror	r20
    299e:	f7 94       	ror	r15
    29a0:	e7 94       	ror	r14
    29a2:	1a 95       	dec	r17
    29a4:	c1 f7       	brne	.-16     	; 0x2996 <__ftoa_engine+0xe6>
    29a6:	ee ea       	ldi	r30, 0xAE	; 174
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	68 94       	set
    29ac:	15 90       	lpm	r1, Z+
    29ae:	15 91       	lpm	r17, Z+
    29b0:	35 91       	lpm	r19, Z+
    29b2:	65 91       	lpm	r22, Z+
    29b4:	95 91       	lpm	r25, Z+
    29b6:	05 90       	lpm	r0, Z+
    29b8:	7f e2       	ldi	r23, 0x2F	; 47
    29ba:	73 95       	inc	r23
    29bc:	e1 18       	sub	r14, r1
    29be:	f1 0a       	sbc	r15, r17
    29c0:	43 0b       	sbc	r20, r19
    29c2:	56 0b       	sbc	r21, r22
    29c4:	c9 0b       	sbc	r28, r25
    29c6:	d0 09       	sbc	r29, r0
    29c8:	c0 f7       	brcc	.-16     	; 0x29ba <__ftoa_engine+0x10a>
    29ca:	e1 0c       	add	r14, r1
    29cc:	f1 1e       	adc	r15, r17
    29ce:	43 1f       	adc	r20, r19
    29d0:	56 1f       	adc	r21, r22
    29d2:	c9 1f       	adc	r28, r25
    29d4:	d0 1d       	adc	r29, r0
    29d6:	7e f4       	brtc	.+30     	; 0x29f6 <__ftoa_engine+0x146>
    29d8:	70 33       	cpi	r23, 0x30	; 48
    29da:	11 f4       	brne	.+4      	; 0x29e0 <__ftoa_engine+0x130>
    29dc:	8a 95       	dec	r24
    29de:	e6 cf       	rjmp	.-52     	; 0x29ac <__ftoa_engine+0xfc>
    29e0:	e8 94       	clt
    29e2:	01 50       	subi	r16, 0x01	; 1
    29e4:	30 f0       	brcs	.+12     	; 0x29f2 <__ftoa_engine+0x142>
    29e6:	08 0f       	add	r16, r24
    29e8:	0a f4       	brpl	.+2      	; 0x29ec <__ftoa_engine+0x13c>
    29ea:	00 27       	eor	r16, r16
    29ec:	02 17       	cp	r16, r18
    29ee:	08 f4       	brcc	.+2      	; 0x29f2 <__ftoa_engine+0x142>
    29f0:	20 2f       	mov	r18, r16
    29f2:	23 95       	inc	r18
    29f4:	02 2f       	mov	r16, r18
    29f6:	7a 33       	cpi	r23, 0x3A	; 58
    29f8:	28 f0       	brcs	.+10     	; 0x2a04 <__ftoa_engine+0x154>
    29fa:	79 e3       	ldi	r23, 0x39	; 57
    29fc:	7d 93       	st	X+, r23
    29fe:	2a 95       	dec	r18
    2a00:	e9 f7       	brne	.-6      	; 0x29fc <__ftoa_engine+0x14c>
    2a02:	10 c0       	rjmp	.+32     	; 0x2a24 <__ftoa_engine+0x174>
    2a04:	7d 93       	st	X+, r23
    2a06:	2a 95       	dec	r18
    2a08:	89 f6       	brne	.-94     	; 0x29ac <__ftoa_engine+0xfc>
    2a0a:	06 94       	lsr	r0
    2a0c:	97 95       	ror	r25
    2a0e:	67 95       	ror	r22
    2a10:	37 95       	ror	r19
    2a12:	17 95       	ror	r17
    2a14:	17 94       	ror	r1
    2a16:	e1 18       	sub	r14, r1
    2a18:	f1 0a       	sbc	r15, r17
    2a1a:	43 0b       	sbc	r20, r19
    2a1c:	56 0b       	sbc	r21, r22
    2a1e:	c9 0b       	sbc	r28, r25
    2a20:	d0 09       	sbc	r29, r0
    2a22:	98 f0       	brcs	.+38     	; 0x2a4a <__ftoa_engine+0x19a>
    2a24:	23 95       	inc	r18
    2a26:	7e 91       	ld	r23, -X
    2a28:	73 95       	inc	r23
    2a2a:	7a 33       	cpi	r23, 0x3A	; 58
    2a2c:	08 f0       	brcs	.+2      	; 0x2a30 <__ftoa_engine+0x180>
    2a2e:	70 e3       	ldi	r23, 0x30	; 48
    2a30:	7c 93       	st	X, r23
    2a32:	20 13       	cpse	r18, r16
    2a34:	b8 f7       	brcc	.-18     	; 0x2a24 <__ftoa_engine+0x174>
    2a36:	7e 91       	ld	r23, -X
    2a38:	70 61       	ori	r23, 0x10	; 16
    2a3a:	7d 93       	st	X+, r23
    2a3c:	30 f0       	brcs	.+12     	; 0x2a4a <__ftoa_engine+0x19a>
    2a3e:	83 95       	inc	r24
    2a40:	71 e3       	ldi	r23, 0x31	; 49
    2a42:	7d 93       	st	X+, r23
    2a44:	70 e3       	ldi	r23, 0x30	; 48
    2a46:	2a 95       	dec	r18
    2a48:	e1 f7       	brne	.-8      	; 0x2a42 <__ftoa_engine+0x192>
    2a4a:	11 24       	eor	r1, r1
    2a4c:	ef 90       	pop	r14
    2a4e:	ff 90       	pop	r15
    2a50:	0f 91       	pop	r16
    2a52:	1f 91       	pop	r17
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	99 27       	eor	r25, r25
    2a5a:	87 fd       	sbrc	r24, 7
    2a5c:	90 95       	com	r25
    2a5e:	08 95       	ret

00002a60 <strcpy_P>:
    2a60:	fb 01       	movw	r30, r22
    2a62:	dc 01       	movw	r26, r24
    2a64:	05 90       	lpm	r0, Z+
    2a66:	0d 92       	st	X+, r0
    2a68:	00 20       	and	r0, r0
    2a6a:	e1 f7       	brne	.-8      	; 0x2a64 <strcpy_P+0x4>
    2a6c:	08 95       	ret

00002a6e <strnlen_P>:
    2a6e:	fc 01       	movw	r30, r24
    2a70:	05 90       	lpm	r0, Z+
    2a72:	61 50       	subi	r22, 0x01	; 1
    2a74:	70 40       	sbci	r23, 0x00	; 0
    2a76:	01 10       	cpse	r0, r1
    2a78:	d8 f7       	brcc	.-10     	; 0x2a70 <strnlen_P+0x2>
    2a7a:	80 95       	com	r24
    2a7c:	90 95       	com	r25
    2a7e:	8e 0f       	add	r24, r30
    2a80:	9f 1f       	adc	r25, r31
    2a82:	08 95       	ret

00002a84 <strcpy>:
    2a84:	fb 01       	movw	r30, r22
    2a86:	dc 01       	movw	r26, r24
    2a88:	01 90       	ld	r0, Z+
    2a8a:	0d 92       	st	X+, r0
    2a8c:	00 20       	and	r0, r0
    2a8e:	e1 f7       	brne	.-8      	; 0x2a88 <strcpy+0x4>
    2a90:	08 95       	ret

00002a92 <strnlen>:
    2a92:	fc 01       	movw	r30, r24
    2a94:	61 50       	subi	r22, 0x01	; 1
    2a96:	70 40       	sbci	r23, 0x00	; 0
    2a98:	01 90       	ld	r0, Z+
    2a9a:	01 10       	cpse	r0, r1
    2a9c:	d8 f7       	brcc	.-10     	; 0x2a94 <strnlen+0x2>
    2a9e:	80 95       	com	r24
    2aa0:	90 95       	com	r25
    2aa2:	8e 0f       	add	r24, r30
    2aa4:	9f 1f       	adc	r25, r31
    2aa6:	08 95       	ret

00002aa8 <fputc>:
    2aa8:	0f 93       	push	r16
    2aaa:	1f 93       	push	r17
    2aac:	cf 93       	push	r28
    2aae:	df 93       	push	r29
    2ab0:	fb 01       	movw	r30, r22
    2ab2:	23 81       	ldd	r18, Z+3	; 0x03
    2ab4:	21 fd       	sbrc	r18, 1
    2ab6:	03 c0       	rjmp	.+6      	; 0x2abe <fputc+0x16>
    2ab8:	8f ef       	ldi	r24, 0xFF	; 255
    2aba:	9f ef       	ldi	r25, 0xFF	; 255
    2abc:	28 c0       	rjmp	.+80     	; 0x2b0e <fputc+0x66>
    2abe:	22 ff       	sbrs	r18, 2
    2ac0:	16 c0       	rjmp	.+44     	; 0x2aee <fputc+0x46>
    2ac2:	46 81       	ldd	r20, Z+6	; 0x06
    2ac4:	57 81       	ldd	r21, Z+7	; 0x07
    2ac6:	24 81       	ldd	r18, Z+4	; 0x04
    2ac8:	35 81       	ldd	r19, Z+5	; 0x05
    2aca:	42 17       	cp	r20, r18
    2acc:	53 07       	cpc	r21, r19
    2ace:	44 f4       	brge	.+16     	; 0x2ae0 <fputc+0x38>
    2ad0:	a0 81       	ld	r26, Z
    2ad2:	b1 81       	ldd	r27, Z+1	; 0x01
    2ad4:	9d 01       	movw	r18, r26
    2ad6:	2f 5f       	subi	r18, 0xFF	; 255
    2ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ada:	31 83       	std	Z+1, r19	; 0x01
    2adc:	20 83       	st	Z, r18
    2ade:	8c 93       	st	X, r24
    2ae0:	26 81       	ldd	r18, Z+6	; 0x06
    2ae2:	37 81       	ldd	r19, Z+7	; 0x07
    2ae4:	2f 5f       	subi	r18, 0xFF	; 255
    2ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae8:	37 83       	std	Z+7, r19	; 0x07
    2aea:	26 83       	std	Z+6, r18	; 0x06
    2aec:	10 c0       	rjmp	.+32     	; 0x2b0e <fputc+0x66>
    2aee:	eb 01       	movw	r28, r22
    2af0:	09 2f       	mov	r16, r25
    2af2:	18 2f       	mov	r17, r24
    2af4:	00 84       	ldd	r0, Z+8	; 0x08
    2af6:	f1 85       	ldd	r31, Z+9	; 0x09
    2af8:	e0 2d       	mov	r30, r0
    2afa:	09 95       	icall
    2afc:	89 2b       	or	r24, r25
    2afe:	e1 f6       	brne	.-72     	; 0x2ab8 <fputc+0x10>
    2b00:	8e 81       	ldd	r24, Y+6	; 0x06
    2b02:	9f 81       	ldd	r25, Y+7	; 0x07
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	9f 83       	std	Y+7, r25	; 0x07
    2b08:	8e 83       	std	Y+6, r24	; 0x06
    2b0a:	81 2f       	mov	r24, r17
    2b0c:	90 2f       	mov	r25, r16
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	1f 91       	pop	r17
    2b14:	0f 91       	pop	r16
    2b16:	08 95       	ret

00002b18 <sprintf>:
    2b18:	0f 93       	push	r16
    2b1a:	1f 93       	push	r17
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	cd b7       	in	r28, 0x3d	; 61
    2b22:	de b7       	in	r29, 0x3e	; 62
    2b24:	2e 97       	sbiw	r28, 0x0e	; 14
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	0d 89       	ldd	r16, Y+21	; 0x15
    2b32:	1e 89       	ldd	r17, Y+22	; 0x16
    2b34:	86 e0       	ldi	r24, 0x06	; 6
    2b36:	8c 83       	std	Y+4, r24	; 0x04
    2b38:	1a 83       	std	Y+2, r17	; 0x02
    2b3a:	09 83       	std	Y+1, r16	; 0x01
    2b3c:	8f ef       	ldi	r24, 0xFF	; 255
    2b3e:	9f e7       	ldi	r25, 0x7F	; 127
    2b40:	9e 83       	std	Y+6, r25	; 0x06
    2b42:	8d 83       	std	Y+5, r24	; 0x05
    2b44:	ae 01       	movw	r20, r28
    2b46:	47 5e       	subi	r20, 0xE7	; 231
    2b48:	5f 4f       	sbci	r21, 0xFF	; 255
    2b4a:	6f 89       	ldd	r22, Y+23	; 0x17
    2b4c:	78 8d       	ldd	r23, Y+24	; 0x18
    2b4e:	ce 01       	movw	r24, r28
    2b50:	01 96       	adiw	r24, 0x01	; 1
    2b52:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <vfprintf>
    2b56:	2f 81       	ldd	r18, Y+7	; 0x07
    2b58:	38 85       	ldd	r19, Y+8	; 0x08
    2b5a:	f8 01       	movw	r30, r16
    2b5c:	e2 0f       	add	r30, r18
    2b5e:	f3 1f       	adc	r31, r19
    2b60:	10 82       	st	Z, r1
    2b62:	2e 96       	adiw	r28, 0x0e	; 14
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	08 95       	ret

00002b78 <__ultoa_invert>:
    2b78:	fa 01       	movw	r30, r20
    2b7a:	aa 27       	eor	r26, r26
    2b7c:	28 30       	cpi	r18, 0x08	; 8
    2b7e:	51 f1       	breq	.+84     	; 0x2bd4 <__ultoa_invert+0x5c>
    2b80:	20 31       	cpi	r18, 0x10	; 16
    2b82:	81 f1       	breq	.+96     	; 0x2be4 <__ultoa_invert+0x6c>
    2b84:	e8 94       	clt
    2b86:	6f 93       	push	r22
    2b88:	6e 7f       	andi	r22, 0xFE	; 254
    2b8a:	6e 5f       	subi	r22, 0xFE	; 254
    2b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b90:	9f 4f       	sbci	r25, 0xFF	; 255
    2b92:	af 4f       	sbci	r26, 0xFF	; 255
    2b94:	b1 e0       	ldi	r27, 0x01	; 1
    2b96:	3e d0       	rcall	.+124    	; 0x2c14 <__ultoa_invert+0x9c>
    2b98:	b4 e0       	ldi	r27, 0x04	; 4
    2b9a:	3c d0       	rcall	.+120    	; 0x2c14 <__ultoa_invert+0x9c>
    2b9c:	67 0f       	add	r22, r23
    2b9e:	78 1f       	adc	r23, r24
    2ba0:	89 1f       	adc	r24, r25
    2ba2:	9a 1f       	adc	r25, r26
    2ba4:	a1 1d       	adc	r26, r1
    2ba6:	68 0f       	add	r22, r24
    2ba8:	79 1f       	adc	r23, r25
    2baa:	8a 1f       	adc	r24, r26
    2bac:	91 1d       	adc	r25, r1
    2bae:	a1 1d       	adc	r26, r1
    2bb0:	6a 0f       	add	r22, r26
    2bb2:	71 1d       	adc	r23, r1
    2bb4:	81 1d       	adc	r24, r1
    2bb6:	91 1d       	adc	r25, r1
    2bb8:	a1 1d       	adc	r26, r1
    2bba:	20 d0       	rcall	.+64     	; 0x2bfc <__ultoa_invert+0x84>
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <__ultoa_invert+0x48>
    2bbe:	68 94       	set
    2bc0:	3f 91       	pop	r19
    2bc2:	2a e0       	ldi	r18, 0x0A	; 10
    2bc4:	26 9f       	mul	r18, r22
    2bc6:	11 24       	eor	r1, r1
    2bc8:	30 19       	sub	r19, r0
    2bca:	30 5d       	subi	r19, 0xD0	; 208
    2bcc:	31 93       	st	Z+, r19
    2bce:	de f6       	brtc	.-74     	; 0x2b86 <__ultoa_invert+0xe>
    2bd0:	cf 01       	movw	r24, r30
    2bd2:	08 95       	ret
    2bd4:	46 2f       	mov	r20, r22
    2bd6:	47 70       	andi	r20, 0x07	; 7
    2bd8:	40 5d       	subi	r20, 0xD0	; 208
    2bda:	41 93       	st	Z+, r20
    2bdc:	b3 e0       	ldi	r27, 0x03	; 3
    2bde:	0f d0       	rcall	.+30     	; 0x2bfe <__ultoa_invert+0x86>
    2be0:	c9 f7       	brne	.-14     	; 0x2bd4 <__ultoa_invert+0x5c>
    2be2:	f6 cf       	rjmp	.-20     	; 0x2bd0 <__ultoa_invert+0x58>
    2be4:	46 2f       	mov	r20, r22
    2be6:	4f 70       	andi	r20, 0x0F	; 15
    2be8:	40 5d       	subi	r20, 0xD0	; 208
    2bea:	4a 33       	cpi	r20, 0x3A	; 58
    2bec:	18 f0       	brcs	.+6      	; 0x2bf4 <__ultoa_invert+0x7c>
    2bee:	49 5d       	subi	r20, 0xD9	; 217
    2bf0:	31 fd       	sbrc	r19, 1
    2bf2:	40 52       	subi	r20, 0x20	; 32
    2bf4:	41 93       	st	Z+, r20
    2bf6:	02 d0       	rcall	.+4      	; 0x2bfc <__ultoa_invert+0x84>
    2bf8:	a9 f7       	brne	.-22     	; 0x2be4 <__ultoa_invert+0x6c>
    2bfa:	ea cf       	rjmp	.-44     	; 0x2bd0 <__ultoa_invert+0x58>
    2bfc:	b4 e0       	ldi	r27, 0x04	; 4
    2bfe:	a6 95       	lsr	r26
    2c00:	97 95       	ror	r25
    2c02:	87 95       	ror	r24
    2c04:	77 95       	ror	r23
    2c06:	67 95       	ror	r22
    2c08:	ba 95       	dec	r27
    2c0a:	c9 f7       	brne	.-14     	; 0x2bfe <__ultoa_invert+0x86>
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	61 05       	cpc	r22, r1
    2c10:	71 05       	cpc	r23, r1
    2c12:	08 95       	ret
    2c14:	9b 01       	movw	r18, r22
    2c16:	ac 01       	movw	r20, r24
    2c18:	0a 2e       	mov	r0, r26
    2c1a:	06 94       	lsr	r0
    2c1c:	57 95       	ror	r21
    2c1e:	47 95       	ror	r20
    2c20:	37 95       	ror	r19
    2c22:	27 95       	ror	r18
    2c24:	ba 95       	dec	r27
    2c26:	c9 f7       	brne	.-14     	; 0x2c1a <__ultoa_invert+0xa2>
    2c28:	62 0f       	add	r22, r18
    2c2a:	73 1f       	adc	r23, r19
    2c2c:	84 1f       	adc	r24, r20
    2c2e:	95 1f       	adc	r25, r21
    2c30:	a0 1d       	adc	r26, r0
    2c32:	08 95       	ret

00002c34 <_exit>:
    2c34:	f8 94       	cli

00002c36 <__stop_program>:
    2c36:	ff cf       	rjmp	.-2      	; 0x2c36 <__stop_program>
